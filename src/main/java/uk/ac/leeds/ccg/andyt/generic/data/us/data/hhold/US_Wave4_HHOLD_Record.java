/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.us.process.US_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.us.data.hhold;
public class US_Wave4_HHOLD_Record extends US_Wave4Or5_HHOLD_Record {
protected byte D_ADCTS;
protected byte D_ADOPTCH01;
protected byte D_ADOPTCH02;
protected byte D_ADOPTCH03;
protected byte D_ADOPTCH04;
protected byte D_ADOPTCH05;
protected boolean D_ADOPTCH06;
protected boolean D_ADOPTCH07;
protected boolean D_ADOPTCH08;
protected boolean D_ADOPTCH09;
protected boolean D_ADOPTCH10;
protected boolean D_ADOPTCH11;
protected boolean D_ADOPTCH12;
protected boolean D_ADOPTCH13;
protected boolean D_ADOPTCH14;
protected boolean D_ADOPTCH15;
protected boolean D_ADOPTCH16;
protected byte D_ADSTATUS;
protected byte D_AEDROF1;
protected byte D_AEDROF2;
protected boolean D_AEDROF3;
protected boolean D_AEDROF4;
protected double D_AEPUDA1;
protected boolean D_AEPUDA2;
protected boolean D_AEPUDA3;
protected boolean D_AEPUDA4;
protected byte D_AEPUWK1;
protected boolean D_AEPUWK2;
protected boolean D_AEPUWK3;
protected boolean D_AEPUWK4;
protected byte D_AGEGR10_DV;
protected byte D_AGEGR13_DV;
protected byte D_AGEGR5_DV;
protected byte D_AGERET;
protected byte D_AGE_DV;
protected byte D_AHVWELL;
protected byte D_AIDEFT;
protected byte D_AIDHH;
protected byte D_AIDHRS;
protected byte D_AIDHU1;
protected byte D_AIDHU2;
protected byte D_AIDHUA1;
protected byte D_AIDHUA10;
protected byte D_AIDHUA11;
protected byte D_AIDHUA12;
protected byte D_AIDHUA13;
protected byte D_AIDHUA14;
protected byte D_AIDHUA15;
protected byte D_AIDHUA16;
protected byte D_AIDHUA2;
protected byte D_AIDHUA3;
protected byte D_AIDHUA4;
protected byte D_AIDHUA5;
protected byte D_AIDHUA6;
protected byte D_AIDHUA7;
protected byte D_AIDHUA8;
protected byte D_AIDHUA9;
protected byte D_AIDXHH;
protected byte D_ALLCH01;
protected byte D_ALLCH02;
protected byte D_ALLCH03;
protected byte D_ALLCH04;
protected byte D_ALLCH05;
protected byte D_ALLCH06;
protected byte D_ALLCH07;
protected boolean D_ALLCH08;
protected boolean D_ALLCH09;
protected boolean D_ALLCH10;
protected boolean D_ALLCH11;
protected boolean D_ALLCH12;
protected boolean D_ALLCH13;
protected boolean D_ALLCH14;
protected boolean D_ALLCH15;
protected boolean D_ALLCH16;
protected byte D_AREA;
protected byte D_BASNSA;
protected double D_BASRATE;
protected byte D_BASREST;
protected byte D_BENCB;
protected byte D_BENCTC;
protected byte D_BENDIS1;
protected byte D_BENDIS10;
protected byte D_BENDIS11;
protected byte D_BENDIS12;
protected byte D_BENDIS13;
protected byte D_BENDIS14;
protected byte D_BENDIS15;
protected byte D_BENDIS16;
protected byte D_BENDIS2;
protected byte D_BENDIS3;
protected byte D_BENDIS4;
protected byte D_BENDIS5;
protected byte D_BENDIS6;
protected byte D_BENDIS7;
protected byte D_BENDIS8;
protected byte D_BENDIS9;
protected byte D_BENDIS96;
protected byte D_BENDIS97;
protected byte D_BENFAM1;
protected byte D_BENFAM10;
protected byte D_BENFAM2;
protected byte D_BENFAM3;
protected byte D_BENFAM4;
protected byte D_BENFAM5;
protected byte D_BENFAM6;
protected byte D_BENFAM7;
protected byte D_BENFAM8;
protected byte D_BENFAM9;
protected byte D_BENFAM96;
protected byte D_BENHOU1;
protected byte D_BENHOU2;
protected byte D_BENHOU3;
protected byte D_BENHOU4;
protected byte D_BENHOU5;
protected byte D_BENHOU6;
protected byte D_BENHOU7;
protected byte D_BENHOU8;
protected byte D_BENHOU9;
protected byte D_BENHOU96;
protected byte D_BENLINK;
protected byte D_BENPEN1;
protected byte D_BENPEN10;
protected byte D_BENPEN11;
protected byte D_BENPEN12;
protected byte D_BENPEN13;
protected byte D_BENPEN2;
protected byte D_BENPEN3;
protected byte D_BENPEN4;
protected byte D_BENPEN5;
protected byte D_BENPEN6;
protected byte D_BENPEN7;
protected byte D_BENPEN8;
protected byte D_BENPEN9;
protected byte D_BENPEN96;
protected byte D_BENSTA1;
protected byte D_BENSTA10;
protected byte D_BENSTA11;
protected byte D_BENSTA12;
protected byte D_BENSTA13;
protected byte D_BENSTA2;
protected byte D_BENSTA3;
protected byte D_BENSTA4;
protected byte D_BENSTA5;
protected byte D_BENSTA6;
protected byte D_BENSTA7;
protected byte D_BENSTA9;
protected byte D_BENSTA96;
protected byte D_BENSTA97;
protected byte D_BENTAX1;
protected byte D_BENTAX10;
protected byte D_BENTAX2;
protected byte D_BENTAX3;
protected byte D_BENTAX4;
protected byte D_BENTAX5;
protected byte D_BENTAX6;
protected byte D_BENTAX7;
protected byte D_BENTAX8;
protected byte D_BENTAX9;
protected byte D_BENTAX96;
protected byte D_BENUNEMP1;
protected byte D_BENUNEMP2;
protected byte D_BENUNEMP3;
protected byte D_BENUNEMP4;
protected byte D_BENUNEMP5;
protected byte D_BENUNEMP6;
protected byte D_BENUNEMP7;
protected byte D_BENUNEMP96;
protected short D_BIRTHY;
protected byte D_BRLOOP;
protected byte D_BTYPE1;
protected byte D_BTYPE10;
protected byte D_BTYPE11;
protected byte D_BTYPE12;
protected byte D_BTYPE13;
protected byte D_BTYPE14;
protected byte D_BTYPE2;
protected byte D_BTYPE3;
protected byte D_BTYPE4;
protected byte D_BTYPE5;
protected byte D_BTYPE6;
protected byte D_BTYPE7;
protected byte D_BTYPE8;
protected byte D_BTYPE9;
protected byte D_BTYPE96;
protected byte D_BUNO_DV;
protected byte D_CARBUY1;
protected byte D_CARBUY10;
protected byte D_CARBUY11;
protected byte D_CARBUY12;
protected byte D_CARBUY2;
protected byte D_CARBUY3;
protected byte D_CARBUY4;
protected byte D_CARBUY5;
protected byte D_CARBUY6;
protected byte D_CARBUY7;
protected byte D_CARBUY8;
protected byte D_CARBUY9;
protected byte D_CARBUY97;
protected int D_CARMILES;
protected byte D_CARSRV1;
protected byte D_CARSRV2;
protected byte D_CARSRV3;
protected byte D_CARUSE;
protected byte D_CASIEND;
protected int D_CCAMTJT;
protected int D_CCAMTSOLE;
protected byte D_CCARE;
protected byte D_CCBILLJT;
protected byte D_CCBILLSOLE;
protected byte D_CCJT;
protected byte D_CCJTP0;
protected byte D_CCJTP1;
protected byte D_CCJTP10;
protected byte D_CCJTP11;
protected byte D_CCJTP12;
protected byte D_CCJTP13;
protected byte D_CCJTP14;
protected byte D_CCJTP15;
protected byte D_CCJTP16;
protected byte D_CCJTP2;
protected byte D_CCJTP3;
protected byte D_CCJTP4;
protected byte D_CCJTP5;
protected byte D_CCJTP6;
protected byte D_CCJTP7;
protected byte D_CCJTP8;
protected byte D_CCJTP9;
protected byte D_CCSOLE;
protected byte D_CCWORK;
protected short D_CH1BY4;
protected short D_CHARAM;
protected byte D_CHARFREQ;
protected byte D_CHARGV;
protected byte D_CHBRFED01;
protected byte D_CHBRFED02;
protected boolean D_CHBRFED03;
protected boolean D_CHBRFED04;
protected boolean D_CHBRFED05;
protected boolean D_CHBRFED06;
protected boolean D_CHBRFED07;
protected boolean D_CHBRFED08;
protected boolean D_CHBRFED09;
protected boolean D_CHBRFED10;
protected boolean D_CHBRFED11;
protected boolean D_CHBRFED12;
protected boolean D_CHBRFED13;
protected boolean D_CHBRFED14;
protected boolean D_CHBRFED15;
protected boolean D_CHBRFED16;
protected byte D_CHILDPNO;
protected byte D_CHKRESP;
protected int D_CINDTIME;
protected byte D_CITZN1;
protected byte D_CITZN2;
protected byte D_CITZN3;
protected byte D_CJBATT;
protected byte D_CJOB;
protected byte D_CMLSTAT1;
protected byte D_CMLSTAT2;
protected byte D_CMLSTAT3;
protected byte D_COH1BM;
protected short D_COH1BY;
protected byte D_COH1EM;
protected short D_COH1EY;
protected byte D_COH1MR;
protected byte D_COHAB;
protected byte D_COHABN;
protected boolean D_COHAB_DV;
protected byte D_CONTFT;
protected byte D_COUNTRY;
protected int D_CREDAMT;
protected byte D_CREDITOR;
protected int D_CREDJT;
protected int D_CREDSOLE;
protected byte D_CSTAT;
protected byte D_CTADD1_CODE;
protected byte D_CTADD2_CODE;
protected byte D_CTCNTY_CODE;
protected byte D_CTCONS;
protected byte D_CTCONSCONF1;
protected byte D_CTCONSCONF2;
protected byte D_CTCONSCONF3;
protected byte D_CTCONSCONF4;
protected byte D_CTCONSCONF5;
protected byte D_CTCONSCONF6;
protected byte D_CTCONSCONF7;
protected byte D_CTCONSCONF8;
protected byte D_CTCONSCONF94;
protected byte D_CTEMAIL_CODE;
protected byte D_CTPCODE_CODE;
protected byte D_CTREL;
protected byte D_CTTEL1_CODE;
protected byte D_CTTEL2_CODE;
protected byte D_CTTOWN_CODE;
protected byte D_CURRJOB1;
protected byte D_CURRJOB2;
protected byte D_CURRJOB3;
protected byte D_CURRJOB4;
protected byte D_CURRJOB5;
protected byte D_CURRJOB6;
protected byte D_CURRPART1;
protected byte D_CURRPART2;
protected byte D_CURRSTAT1;
protected byte D_CURRSTAT2;
protected byte D_CURRSTAT3;
protected byte D_CURRSTAT4;
protected byte D_CURRSTAT5;
protected byte D_CURRSTAT6;
protected byte D_CURRYNOT1;
protected byte D_CURRYNOT2;
protected byte D_CURRYNOT3;
protected byte D_CURRYNOT4;
protected byte D_CURRYNOT5;
protected byte D_CURRYNOT6;
protected byte D_CURRYNOT7;
protected byte D_CURRYNOT8;
protected byte D_CURRYNOT96;
protected byte D_CURRYNOT97;
protected byte D_DEBT1;
protected byte D_DEBT2;
protected byte D_DEBT4;
protected byte D_DEBT5;
protected byte D_DEBT6;
protected byte D_DEBT7;
protected byte D_DEBT8;
protected byte D_DEBT96;
protected byte D_DEBT97;
protected byte D_DEBTC1;
protected byte D_DEBTC2;
protected byte D_DEBTC3;
protected byte D_DEBTC4;
protected byte D_DEBTC5;
protected byte D_DEBTINFO1;
protected byte D_DEBTINFO10;
protected byte D_DEBTINFO11;
protected byte D_DEBTINFO2;
protected byte D_DEBTINFO3;
protected byte D_DEBTINFO4;
protected byte D_DEBTINFO5;
protected byte D_DEBTINFO6;
protected byte D_DEBTINFO7;
protected byte D_DEBTINFO8;
protected byte D_DEBTINFO9;
protected byte D_DEBTINFO97;
protected byte D_DEBTOTH1;
protected byte D_DEBTOTH2;
protected byte D_DEBTOTH3;
protected byte D_DEBTOTH4;
protected byte D_DEBTOTH96;
protected byte D_DEBTPN0;
protected byte D_DEBTPN1;
protected byte D_DEBTPN10;
protected byte D_DEBTPN11;
protected byte D_DEBTPN12;
protected byte D_DEBTPN13;
protected byte D_DEBTPN14;
protected byte D_DEBTPN15;
protected byte D_DEBTPN16;
protected byte D_DEBTPN2;
protected byte D_DEBTPN3;
protected byte D_DEBTPN4;
protected byte D_DEBTPN5;
protected byte D_DEBTPN6;
protected byte D_DEBTPN7;
protected byte D_DEBTPN8;
protected byte D_DEBTPN9;
protected byte D_DEBTSJ;
protected int D_DEBTSK;
protected byte D_DEBTWHO1;
protected byte D_DEBTWHO2;
protected byte D_DEBTWHO3;
protected byte D_DEBTWHO4;
protected byte D_DEBTWHO97;
protected int D_DEBTY;
protected boolean D_DEPCHL_DV;
protected byte D_DEPENTH1;
protected byte D_DEPENTH2;
protected byte D_DEPENTH3;
protected byte D_DEPENTH4;
protected byte D_DEPENTH5;
protected byte D_DEPENTH6;
protected byte D_DETINC1;
protected byte D_DETINC2;
protected byte D_DETINC3;
protected byte D_DETINC4;
protected byte D_DETINC5;
protected byte D_DETINC6;
protected byte D_DISDIF1;
protected byte D_DISDIF10;
protected byte D_DISDIF11;
protected byte D_DISDIF12;
protected byte D_DISDIF2;
protected byte D_DISDIF3;
protected byte D_DISDIF4;
protected byte D_DISDIF5;
protected byte D_DISDIF6;
protected byte D_DISDIF7;
protected byte D_DISDIF8;
protected byte D_DISDIF9;
protected byte D_DISDIF96;
protected byte D_DIVCHK1;
protected byte D_DIVCHK2;
protected byte D_DIVCHK3;
protected byte D_DIVFIN1;
protected boolean D_DIVFIN2;
protected boolean D_DIVFIN3;
protected byte D_DKLM;
protected short D_DOBY_DV;
protected byte D_DONEPROXY;
protected byte D_DRGMJ;
protected byte D_DRGOTH;
protected byte D_DRGSOL;
protected byte D_DRIVE;
protected byte D_DRNK4W;
protected byte D_DVAGE;
protected byte D_DVM1;
protected boolean D_DVM2;
protected boolean D_DVM3;
protected short D_DVY41;
protected boolean D_DVY42;
protected boolean D_DVY43;
protected byte D_EATLIVU;
protected byte D_EDASP;
protected byte D_EDLINK;
protected byte D_EDLINKCONF;
protected byte D_EDLINKCONFB;
protected byte D_EDLINKKIDE;
protected byte D_EDLINKKIDSWN;
protected byte D_EDTYPE;
protected byte D_EDUCATION;
protected byte D_EDUCISGN;
protected byte D_EDUCLINKB1;
protected byte D_EDUCLINKB2;
protected byte D_EDUCLINKB3;
protected byte D_EDUCRECD;
protected byte D_EDUCRSGN;
protected byte D_EDUCSN;
protected byte D_EMPCHK;
protected byte D_EMPLOY;
protected byte D_EMPSTENDD;
protected byte D_EMPSTENDM;
protected short D_EMPSTENDY4;
protected byte D_ENDMNTH1;
protected byte D_ENDMNTH2;
protected byte D_ENDMNTH3;
protected boolean D_ENDMNTH4;
protected byte D_ENVHABIT1;
protected byte D_ENVHABIT10;
protected byte D_ENVHABIT11;
protected byte D_ENVHABIT2;
protected byte D_ENVHABIT3;
protected byte D_ENVHABIT4;
protected byte D_ENVHABIT5;
protected byte D_ENVHABIT6;
protected byte D_ENVHABIT7;
protected byte D_ENVHABIT8;
protected byte D_ENVHABIT9;
protected byte D_EPROSH;
protected byte D_ETHN_DV;
protected byte D_EVRALC;
protected byte D_EVRSMO;
protected byte D_EXPMANAGE1;
protected byte D_EXPMANAGE10;
protected byte D_EXPMANAGE11;
protected byte D_EXPMANAGE2;
protected byte D_EXPMANAGE3;
protected byte D_EXPMANAGE4;
protected byte D_EXPMANAGE5;
protected byte D_EXPMANAGE6;
protected byte D_EXPMANAGE7;
protected byte D_EXPMANAGE8;
protected byte D_EXPMANAGE9;
protected byte D_EXPMANAGE97;
protected byte D_EXTNSA;
protected double D_EXTRATE;
protected byte D_EXTREST;
protected byte D_FAMILY;
protected byte D_FAMSUP;
protected byte D_FATHER;
protected byte D_FEEND;
protected byte D_FENOW;
protected byte D_FFBRFEDLW;
protected byte D_FF_BENTYPE01;
protected byte D_FF_BENTYPE02;
protected byte D_FF_BENTYPE03;
protected byte D_FF_BENTYPE04;
protected byte D_FF_BENTYPE05;
protected byte D_FF_BENTYPE06;
protected byte D_FF_BENTYPE07;
protected byte D_FF_BENTYPE08;
protected byte D_FF_BENTYPE09;
protected byte D_FF_BENTYPE10;
protected byte D_FF_BENTYPE11;
protected byte D_FF_BENTYPE12;
protected byte D_FF_BENTYPE13;
protected byte D_FF_BENTYPE14;
protected byte D_FF_BENTYPE15;
protected byte D_FF_BENTYPE16;
protected byte D_FF_BENTYPE17;
protected byte D_FF_BENTYPE18;
protected byte D_FF_BENTYPE19;
protected byte D_FF_BENTYPE20;
protected byte D_FF_BENTYPE21;
protected byte D_FF_BENTYPE22;
protected byte D_FF_BENTYPE23;
protected byte D_FF_BENTYPE24;
protected byte D_FF_BENTYPE25;
protected byte D_FF_BENTYPE26;
protected byte D_FF_BENTYPE27;
protected byte D_FF_BENTYPE28;
protected byte D_FF_BENTYPE29;
protected byte D_FF_BENTYPE30;
protected byte D_FF_BENTYPE31;
protected byte D_FF_BENTYPE32;
protected byte D_FF_BENTYPE33;
protected byte D_FF_BENTYPE34;
protected byte D_FF_BENTYPE35;
protected byte D_FF_BENTYPE36;
protected byte D_FF_BENTYPE37;
protected byte D_FF_BENTYPE38;
protected byte D_FF_BENTYPE39;
protected byte D_FF_EMPLW;
protected byte D_FF_EVERINT;
protected byte D_FF_IVINTLANG;
protected byte D_FF_IVLOLW;
protected byte D_FF_JBMNGR;
protected byte D_FF_JBSEMP;
protected byte D_FF_JBSIZE;
protected byte D_FF_JBSTAT;
protected byte D_FF_OPRLG;
protected byte D_FF_OPRLG0;
protected byte D_FF_OPRLG0NI;
protected byte D_FF_TEL;
protected byte D_FF_UKBORN;
protected short D_FF_YR2UK4;
protected double D_FIBENOTHR_DV;
protected double D_FIBENOTHR_IF;
protected boolean D_FIBENOTHR_TC;
protected double D_FIMNGRS_DV;
protected double D_FIMNGRS_IF;
protected boolean D_FIMNGRS_TC;
protected double D_FIMNINVNET_DV;
protected double D_FIMNLABGRS_DV;
protected double D_FIMNLABGRS_IF;
protected boolean D_FIMNLABGRS_TC;
protected double D_FIMNLABNET_DV;
protected boolean D_FIMNLABNET_TC;
protected double D_FIMNMISC_DV;
protected double D_FIMNNET_DV;
protected double D_FIMNPEN_DV;
protected double D_FIMNPRBEN_DV;
protected double D_FIMNSBEN_DV;
protected byte D_FINFUT;
protected byte D_FINNOW;
protected byte D_FIVEALCDR;
protected byte D_FIYRDB1;
protected byte D_FIYRDB2;
protected byte D_FIYRDB3;
protected byte D_FIYRDB4;
protected byte D_FIYRDB5;
protected byte D_FIYRDB6;
protected int D_FIYRDIA;
protected double D_FIYRINVINC_DV;
protected byte D_FIYRINVINC_IF;
protected boolean D_FIYRINVINC_TC;
protected byte D_FLAGLINKB1;
protected byte D_FLAGLINKB2;
protected byte D_FLAGLINKB3;
protected byte D_FLYES1;
protected byte D_FLYES2;
protected byte D_FLYES3;
protected byte D_FLYES4;
protected int D_FNPID;
protected byte D_FNPNO;
protected int D_FNSPID;
protected byte D_FNSPNO;
protected byte D_FRDRG;
protected byte D_FT2ENDM1;
protected byte D_FT2ENDM2;
protected short D_FT2ENDY41;
protected short D_FT2ENDY42;
protected byte D_FTEDANY;
protected byte D_FTEDEND1;
protected byte D_FTEDEND2;
protected byte D_FTEDMOR1;
protected byte D_FTEDMOR2;
protected byte D_FTEDSTARTM1;
protected byte D_FTEDSTARTM2;
protected short D_FTEDSTARTY41;
protected short D_FTEDSTARTY42;
protected byte D_FTENDM;
protected short D_FTENDY4;
protected byte D_FTQUALS;
protected byte D_GOR_DV;
protected int D_GRFPID;
protected byte D_GRFPNO;
protected int D_GRMPID;
protected byte D_GRMPNO;
protected byte D_HASCURR;
protected byte D_HASEMAIL;
protected byte D_HCOND1;
protected byte D_HCOND10;
protected byte D_HCOND11;
protected byte D_HCOND12;
protected byte D_HCOND13;
protected byte D_HCOND14;
protected byte D_HCOND15;
protected byte D_HCOND16;
protected byte D_HCOND17;
protected byte D_HCOND2;
protected byte D_HCOND3;
protected byte D_HCOND4;
protected byte D_HCOND5;
protected byte D_HCOND6;
protected byte D_HCOND7;
protected byte D_HCOND8;
protected byte D_HCOND9;
protected byte D_HCOND96;
protected byte D_HCONDA01;
protected byte D_HCONDA02;
protected byte D_HCONDA03;
protected byte D_HCONDA04;
protected byte D_HCONDA05;
protected byte D_HCONDA06;
protected byte D_HCONDA07;
protected byte D_HCONDA08;
protected byte D_HCONDA09;
protected byte D_HCONDA10;
protected byte D_HCONDA11;
protected byte D_HCONDA12;
protected byte D_HCONDA13;
protected byte D_HCONDA14;
protected byte D_HCONDA15;
protected byte D_HCONDA16;
protected byte D_HCONDA17;
protected byte D_HCONDN1;
protected byte D_HCONDN10;
protected byte D_HCONDN11;
protected byte D_HCONDN12;
protected byte D_HCONDN13;
protected byte D_HCONDN14;
protected byte D_HCONDN15;
protected byte D_HCONDN16;
protected byte D_HCONDN17;
protected byte D_HCONDN2;
protected byte D_HCONDN3;
protected byte D_HCONDN4;
protected byte D_HCONDN5;
protected byte D_HCONDN6;
protected byte D_HCONDN7;
protected byte D_HCONDN8;
protected byte D_HCONDN9;
protected byte D_HCONDN96;
protected byte D_HCONDNO1;
protected byte D_HCONDNO10;
protected byte D_HCONDNO2;
protected byte D_HCONDNO3;
protected byte D_HCONDNO4;
protected byte D_HCONDNO5;
protected byte D_HCONDNO6;
protected byte D_HCONDNO7;
protected byte D_HCONDNO8;
protected byte D_HCONDNO9;
protected byte D_HCONDNS1;
protected byte D_HCONDNS10;
protected byte D_HCONDNS2;
protected byte D_HCONDNS3;
protected byte D_HCONDNS4;
protected byte D_HCONDNS5;
protected byte D_HCONDNS6;
protected byte D_HCONDNS7;
protected byte D_HCONDNS8;
protected byte D_HCONDNS9;
protected byte D_HCONDS01;
protected byte D_HCONDS02;
protected byte D_HCONDS03;
protected byte D_HCONDS04;
protected byte D_HCONDS05;
protected byte D_HCONDS08;
protected byte D_HCONDS09;
protected byte D_HCONDS10;
protected byte D_HCONDS11;
protected byte D_HCONDS12;
protected byte D_HCONDS13;
protected byte D_HCONDS14;
protected byte D_HCONDS15;
protected byte D_HCONDS16;
protected byte D_HCONDS17;
protected byte D_HEALTH;
protected byte D_HEALTHSN;
protected byte D_HEDLIK;
protected byte D_HEDNT;
protected byte D_HEDNTO_CODE;
protected byte D_HGADOPTF;
protected byte D_HGADOPTM;
protected byte D_HGBIOF;
protected byte D_HGBIOM;
protected byte D_HGPART;
protected byte D_HHORIG;
protected byte D_HHRESP_DV;
protected byte D_HHTYPE_DV;
protected int D_HIDP;
protected byte D_HIQUAL_DV;
protected byte D_HLTHISGN;
protected byte D_HLTHKIDLINK;
protected byte D_HLTHLINK;
protected byte D_HLTHLINKB1;
protected byte D_HLTHLINKB2;
protected byte D_HLTHLINKB3;
protected byte D_HLTHRECD;
protected byte D_HLTHRSGN;
protected byte D_HOSPC1;
protected byte D_HOSPC10;
protected byte D_HOSPC2;
protected byte D_HOSPC3;
protected byte D_HOSPC4;
protected byte D_HOSPC5;
protected byte D_HOSPC6;
protected byte D_HOSPC7;
protected byte D_HOSPC8;
protected byte D_HOSPC9;
protected short D_HOSPDC1;
protected boolean D_HOSPDC10;
protected byte D_HOSPDC2;
protected byte D_HOSPDC3;
protected byte D_HOSPDC4;
protected byte D_HOSPDC5;
protected byte D_HOSPDC6;
protected boolean D_HOSPDC7;
protected byte D_HOSPDC8;
protected boolean D_HOSPDC9;
protected byte D_HOUSING;
protected short D_HOWLNG;
protected int D_HRPID;
protected byte D_HRPNO;
protected byte D_HRS_SLPH;
protected byte D_HRS_SLPM;
protected byte D_HUBOSS;
protected byte D_HUBUYS;
protected byte D_HUCAR;
protected byte D_HUDIY;
protected byte D_HUFRYS;
protected byte D_HUIRON;
protected byte D_HUMOPS;
protected byte D_HUPOTS;
protected byte D_HURUNS;
protected byte D_HUSITS;
protected byte D_IENDDATHH;
protected byte D_IENDDATMM;
protected byte D_IENDDATSS;
protected double D_IND5MUS_LW;
protected double D_IND5MUS_XW;
protected double D_INDBD91_LW;
protected double D_INDBDUB_LW;
protected double D_INDIN01_LW;
protected double D_INDIN91_LW;
protected double D_INDINUB_LW;
protected double D_INDINUB_XW;
protected double D_INDINUS_LW;
protected boolean D_INDMODE;
protected double D_INDNS91_LW;
protected double D_INDNSUB_LW;
protected double D_INDPXUB_LW;
protected double D_INDPXUB_XW;
protected double D_INDPXUS_LW;
protected double D_INDSCUB_LW;
protected double D_INDSCUB_XW;
protected double D_INDSCUS_LW;
protected byte D_INFSAVE1;
protected byte D_INFSAVE2;
protected byte D_INFSAVE3;
protected byte D_INFSAVE4;
protected byte D_INFSAVE5;
protected byte D_INFSAVE6;
protected byte D_INFSAVE96;
protected byte D_INOCONTACT;
protected byte D_INTCONTACT;
protected byte D_INTDATD_DV;
protected byte D_INTDATM_DV;
protected short D_INTDATY_DV;
protected byte D_INTSIGNHEALTH;
protected byte D_INVITRO1;
protected boolean D_INVITRO2;
protected boolean D_INVITRO3;
protected boolean D_INVITRO4;
protected byte D_IOUTCOME;
protected byte D_ISTRTDATD;
protected byte D_ISTRTDATHH;
protected byte D_ISTRTDATM;
protected byte D_ISTRTDATMM;
protected byte D_ISTRTDATSS;
protected short D_ISTRTDATY;
protected short D_ISYEAR;
protected byte D_IVAFFCT11;
protected byte D_IVAFFCT12;
protected byte D_IVAFFCT13;
protected byte D_IVAFFCT14;
protected byte D_IVAFFCT15;
protected byte D_IVAFFCT17;
protected byte D_IVAFFCT21;
protected byte D_IVAFFCT22;
protected byte D_IVAFFCT23;
protected byte D_IVAFFCT27;
protected byte D_IVAFFCT30;
protected byte D_IVAFFCT97;
protected byte D_IVCOOP;
protected boolean D_IVFIO;
protected byte D_IVINFNCE;
protected byte D_IVLIBAL;
protected byte D_IVLIENG;
protected byte D_IVLITRANS;
protected byte D_IVLIWHO;
protected byte D_IVPRSNT;
protected byte D_J1BOSS;
protected byte D_J1MNGR;
protected byte D_J1NONE;
protected byte D_J1NSSEC5_DV;
protected byte D_J1SEMP;
protected short D_J1SOC00_CC;
protected short D_J1SOC10_CC;
protected byte D_J1SOC90_CC;
protected byte D_J2HAS;
protected short D_J2HRS;
protected byte D_J2NSSEC5_DV;
protected int D_J2PAY;
protected double D_J2PAYNET_DV;
protected double D_J2PAY_DV;
protected byte D_J2PAY_IF;
protected byte D_J2SEMP;
protected short D_J2SOC00_CC;
protected short D_J2SOC10_CC;
protected byte D_J2SOC90_CC;
protected byte D_JBATT1;
protected byte D_JBATT2;
protected byte D_JBATT3;
protected byte D_JBATT4;
protected byte D_JBATT5;
protected byte D_JBATT6;
protected byte D_JBBGD;
protected byte D_JBBGDATD;
protected byte D_JBBGDATM;
protected short D_JBBGDATY;
protected byte D_JBBGM;
protected short D_JBBGY;
protected byte D_JBENDD;
protected byte D_JBENDM;
protected byte D_JBENDREAS;
protected short D_JBENDY4;
protected byte D_JBES2000;
protected byte D_JBFLEX1;
protected byte D_JBFLEX2;
protected byte D_JBFLEX3;
protected byte D_JBFLEX4;
protected byte D_JBFLEX5;
protected byte D_JBFLEX6;
protected byte D_JBFLEX7;
protected byte D_JBFLEX8;
protected byte D_JBFLEX96;
protected byte D_JBFT_DV;
protected byte D_JBFXINF;
protected byte D_JBFXUSE1;
protected byte D_JBFXUSE2;
protected byte D_JBFXUSE3;
protected byte D_JBFXUSE4;
protected byte D_JBFXUSE5;
protected byte D_JBFXUSE6;
protected byte D_JBFXUSE7;
protected byte D_JBFXUSE8;
protected byte D_JBFXUSE96;
protected byte D_JBHAD;
protected byte D_JBHAS;
protected double D_JBHRS;
protected byte D_JBIINDB_DV;
protected short D_JBISCO88_CC;
protected byte D_JBLKCHA;
protected byte D_JBLKCHB;
protected byte D_JBLKCHC;
protected byte D_JBLKCHD;
protected byte D_JBLKCHE;
protected byte D_JBMNGR;
protected byte D_JBMNGRCHK;
protected byte D_JBNSSEC3_DV;
protected byte D_JBNSSEC5_DV;
protected byte D_JBNSSEC8_DV;
protected byte D_JBNSSEC_DV;
protected byte D_JBOFF;
protected byte D_JBOFFY;
protected byte D_JBONUS;
protected byte D_JBOT;
protected byte D_JBOTPD;
protected byte D_JBPEN;
protected byte D_JBPENM;
protected short D_JBPENY4;
protected byte D_JBPERFP;
protected byte D_JBPL;
protected byte D_JBRGSC_DV;
protected byte D_JBRISE;
protected byte D_JBSAMR;
protected byte D_JBSAT;
protected byte D_JBSEC;
protected byte D_JBSECT;
protected byte D_JBSECTPUB;
protected byte D_JBSEG_DV;
protected byte D_JBSEMP;
protected byte D_JBSEMPCHK;
protected byte D_JBSIC07CHK;
protected byte D_JBSIC07_CC;
protected byte D_JBSIZE;
protected byte D_JBSIZECHK;
protected byte D_JBSOC00CHK;
protected short D_JBSOC00_CC;
protected short D_JBSOC10_CC;
protected byte D_JBSOCGR_DV;
protected byte D_JBSTAT;
protected byte D_JBTERM1;
protected byte D_JBTERM2;
protected short D_JBTTWT;
protected byte D_JBXPCHA;
protected byte D_JBXPCHB;
protected byte D_JBXPCHC;
protected byte D_JBXPCHD;
protected byte D_JBXPCHE;
protected byte D_JLBOSS;
protected byte D_JLENDM;
protected short D_JLENDY;
protected byte D_JLES2000;
protected byte D_JLIINDB_DV;
protected short D_JLISCO88_CC;
protected byte D_JLMNGR;
protected byte D_JLNSSEC3_DV;
protected byte D_JLNSSEC5_DV;
protected byte D_JLNSSEC8_DV;
protected byte D_JLNSSEC_DV;
protected byte D_JLRGSC_DV;
protected byte D_JLSEG_DV;
protected byte D_JLSEMP;
protected byte D_JLSIC07_CC;
protected byte D_JLSIZE;
protected short D_JLSOC00_CC;
protected short D_JLSOC10_CC;
protected byte D_JOBHOURS1;
protected byte D_JOBHOURS2;
protected byte D_JOBHOURS3;
protected byte D_JOBHOURS4;
protected byte D_JOBHOURS5;
protected boolean D_JOBHOURS6;
protected byte D_JSACCS;
protected byte D_JSBOSS;
protected byte D_JSHRS;
protected byte D_JSPART;
protected int D_JSPAYU;
protected byte D_JSPAYW;
protected byte D_JSPL;
protected byte D_JSPRBM;
protected short D_JSPRBY4;
protected byte D_JSPREM;
protected short D_JSPREY4;
protected int D_JSPRF;
protected byte D_JSPRLS;
protected byte D_JSPRNI;
protected byte D_JSPRTX;
protected byte D_JSPYNI;
protected byte D_JSPYTX;
protected byte D_JSSIZE;
protected byte D_JSTTWT;
protected short D_JSTTWTB;
protected byte D_JSTYPEB;
protected byte D_JSWORKTRAV;
protected byte D_JUBGN;
protected byte D_JULK4WK;
protected byte D_JULK4X1;
protected byte D_JULK4X2;
protected byte D_JULK4X3;
protected byte D_JULK4X4;
protected byte D_JULK4X5;
protected byte D_JULK4X6;
protected byte D_JULK4X96;
protected byte D_JULKJB;
protected byte D_JWBS1_DV;
protected byte D_JWBS2_DV;
protected byte D_LADOPT;
protected byte D_LATE;
protected byte D_LCHMULTI1;
protected byte D_LCHMULTI2;
protected boolean D_LCHMULTI3;
protected boolean D_LCHMULTI4;
protected byte D_LCOHNPI;
protected double D_LENINDINTV;
protected byte D_LIENG;
protected byte D_LIHOW;
protected byte D_LINGUA;
protected byte D_LITRANS;
protected byte D_LIVESP;
protected boolean D_LIVESP_DV;
protected byte D_LIVEWITH;
protected byte D_LIWHO;
protected byte D_LKMOVE;
protected byte D_LMAR1M;
protected short D_LMAR1Y;
protected byte D_LMCBM1;
protected byte D_LMCBM2;
protected short D_LMCBY41;
protected short D_LMCBY42;
protected byte D_LMSPM1;
protected byte D_LMSPM2;
protected short D_LMSPY41;
protected short D_LMSPY42;
protected byte D_LNADOPT;
protected byte D_LNPRNT;
protected byte D_LPRNT;
protected byte D_LVHM;
protected byte D_LVMTHP;
protected byte D_LVSCHDO;
protected byte D_LVWHY;
protected short D_LVYRP;
protected byte D_LWWRONG;
protected byte D_MACOB;
protected byte D_MAJU;
protected byte D_MANSSEC5_DV;
protected byte D_MARSTAT;
protected short D_MASOC00_CC;
protected short D_MASOC10_CC;
protected byte D_MASOC90_CC;
protected byte D_MASTAT_DV;
protected byte D_MATLEAVE;
protected byte D_MATLV;
protected byte D_MATLVENDD;
protected byte D_MATLVENDM;
protected short D_MATLVENDY4;
protected byte D_MATLVSTD;
protected byte D_MATLVSTM;
protected short D_MATLVSTY4;
protected byte D_MAYRUK;
protected byte D_MED_SLP;
protected byte D_MEMORIG;
protected byte D_MEMPLOY;
protected byte D_MLAGST;
protected byte D_MLAGSTU;
protected byte D_MLFUTR;
protected byte D_MLRNOT1;
protected byte D_MLRNOT10;
protected byte D_MLRNOT11;
protected byte D_MLRNOT12;
protected byte D_MLRNOT13;
protected byte D_MLRNOT2;
protected byte D_MLRNOT3;
protected byte D_MLRNOT4;
protected byte D_MLRNOT5;
protected byte D_MLRNOT6;
protected byte D_MLRNOT7;
protected byte D_MLRNOT8;
protected byte D_MLRNOT9;
protected byte D_MLRNOT97;
protected byte D_MLSTAT;
protected byte D_MLSTATCHK;
protected byte D_MLWKFPT;
protected int D_MNPID;
protected byte D_MNPNO;
protected int D_MNSPID;
protected byte D_MNSPNO;
protected byte D_MOBUSE;
protected byte D_MONTH;
protected byte D_MOVDIR;
protected byte D_MOVEOTH_CODE;
protected byte D_MOVY11;
protected byte D_MOVY12;
protected byte D_MOVY13;
protected byte D_MOVY14;
protected byte D_MOVY15;
protected byte D_MOVY16;
protected byte D_MSTATCH1;
protected byte D_MSTATCH2;
protected byte D_MSTATCH3;
protected byte D_MSTATSAM;
protected byte D_MSTATSAMN;
protected byte D_MVEVER;
protected byte D_MVMNTH;
protected short D_MVYR;
protected byte D_NADOPTCH;
protected byte D_NAIDXHH;
protected byte D_NATCH01;
protected byte D_NATCH02;
protected byte D_NATCH03;
protected byte D_NATCH04;
protected byte D_NATCH05;
protected byte D_NATCH06;
protected byte D_NATCH07;
protected byte D_NATCH08;
protected byte D_NATCH09;
protected byte D_NATCH10;
protected byte D_NATCH11;
protected byte D_NATCH12;
protected boolean D_NATCH13;
protected boolean D_NATCH14;
protected boolean D_NATCH15;
protected boolean D_NATCH16;
protected byte D_NATID1;
protected byte D_NATID2;
protected byte D_NATID3;
protected byte D_NATID4;
protected byte D_NATID5;
protected byte D_NATID6;
protected byte D_NATID97;
protected byte D_NCARS;
protected byte D_NCCJT;
protected byte D_NCCSOLE;
protected byte D_NCH10;
protected byte D_NCH10TO15;
protected byte D_NCH14RESP;
protected byte D_NCH3RESP;
protected byte D_NCH415RESP;
protected byte D_NCH5RESP;
protected byte D_NCH5TO15;
protected byte D_NCH8RESP;
protected byte D_NCHILD;
protected byte D_NCHILD_DV;
protected byte D_NCHRESP;
protected byte D_NCHUND18RESP;
protected byte D_NCHUNDER16;
protected byte D_NCRR1;
protected byte D_NCRR11;
protected byte D_NCRR12;
protected byte D_NCRR3;
protected byte D_NCRR4;
protected byte D_NCRR5;
protected byte D_NCRR6;
protected byte D_NCRR8;
protected byte D_NCRR9;
protected byte D_NCRRM;
protected short D_NCRRY4;
protected byte D_NDEPCHL_DV;
protected byte D_NETPUSE;
protected byte D_NETUSE;
protected byte D_NEXT;
protected byte D_NEXT1;
protected byte D_NEXT2;
protected byte D_NEXT3;
protected byte D_NEXT4;
protected byte D_NEXT5;
protected byte D_NEXT6;
protected byte D_NEXTELSE1;
protected byte D_NEXTELSE2;
protected byte D_NEXTELSE3;
protected byte D_NEXTELSE4;
protected byte D_NEXTELSE5;
protected byte D_NEXTELSE6;
protected byte D_NEXTJOB1;
protected byte D_NEXTJOB2;
protected byte D_NEXTJOB3;
protected byte D_NEXTJOB4;
protected byte D_NEXTJOB5;
protected byte D_NEXTJOB6;
protected byte D_NEXTSTAT1;
protected byte D_NEXTSTAT2;
protected byte D_NEXTSTAT3;
protected byte D_NEXTSTAT4;
protected byte D_NEXTSTAT5;
protected byte D_NEXTSTAT6;
protected byte D_NFH01;
protected byte D_NFH02;
protected byte D_NFH03;
protected byte D_NFH04;
protected byte D_NFH05;
protected byte D_NFH06;
protected byte D_NFH07;
protected byte D_NFH08;
protected byte D_NFH09;
protected byte D_NFH10;
protected byte D_NFH11;
protected byte D_NFH12;
protected byte D_NFH13;
protected byte D_NFH14;
protected byte D_NFH15;
protected byte D_NFH16;
protected byte D_NFH17;
protected byte D_NFH18;
protected byte D_NFH19;
protected byte D_NFH20;
protected byte D_NFH21;
protected byte D_NFH22;
protected byte D_NFH23;
protected byte D_NFH24;
protected byte D_NFH25;
protected byte D_NFH26;
protected byte D_NFH27;
protected byte D_NFH28;
protected byte D_NFH29;
protected byte D_NFH30;
protected byte D_NFH31;
protected byte D_NFH32;
protected byte D_NFH33;
protected byte D_NFH34;
protected byte D_NFH35;
protected byte D_NFH36;
protected byte D_NFH37;
protected byte D_NFH38;
protected byte D_NFH39;
protected byte D_NFLYEU;
protected byte D_NFLYIN;
protected byte D_NFLYOS;
protected byte D_NGRP_DV;
protected byte D_NHIQUAL_DV;
protected byte D_NIACT;
protected byte D_NIREL;
protected byte D_NISERPS;
protected byte D_NMAR;
protected byte D_NMPSP_DV;
protected byte D_NNATCH;
protected byte D_NNEWBORN;
protected byte D_NNMPSP_DV;
protected byte D_NNSIB_DV;
protected byte D_NNSSIB_DV;
protected byte D_NOSVY;
protected byte D_NOTEMPCHK;
protected byte D_NPENSIONER_DV;
protected byte D_NPNS_DV;
protected byte D_NPN_DV;
protected byte D_NQFHIGH_DV;
protected byte D_NUNMPSP_DV;
protected byte D_NXTJBENDD;
protected byte D_NXTJBENDM;
protected short D_NXTJBENDY4;
protected byte D_NXTJBES;
protected byte D_NXTJBHRS;
protected byte D_NXTST;
protected byte D_NXTSTELSE;
protected byte D_NXTSTENDD;
protected byte D_NXTSTENDM;
protected short D_NXTSTENDY4;
protected byte D_OLYMACT11;
protected byte D_OLYMACT12;
protected byte D_OLYMACT13;
protected byte D_OLYMACT14;
protected byte D_OLYMACT15;
protected byte D_OLYMACT16;
protected byte D_OLYMACT17;
protected byte D_OLYMACT18;
protected byte D_OLYMACT196;
protected byte D_OLYMACT198;
protected byte D_OLYMACT21;
protected byte D_OLYMACT22;
protected byte D_OLYMACT23;
protected byte D_OLYMACT24;
protected byte D_OLYMACT25;
protected byte D_OLYMACT26;
protected byte D_OLYMACT27;
protected byte D_OLYMACT28;
protected byte D_OLYMACT296;
protected byte D_OLYMACT298;
protected byte D_OLYMACT31;
protected byte D_OLYMACT32;
protected byte D_OLYMACT33;
protected byte D_OLYMACT34;
protected byte D_OLYMACT35;
protected byte D_OLYMACT36;
protected byte D_OLYMACT37;
protected byte D_OLYMACT38;
protected byte D_OLYMACT396;
protected byte D_OLYMACT398;
protected byte D_OLYMPAS11;
protected byte D_OLYMPAS12;
protected byte D_OLYMPAS13;
protected byte D_OLYMPAS14;
protected byte D_OLYMPAS15;
protected byte D_OLYMPAS196;
protected byte D_OLYMPAS198;
protected byte D_OLYMPAS21;
protected byte D_OLYMPAS22;
protected byte D_OLYMPAS23;
protected byte D_OLYMPAS24;
protected byte D_OLYMPAS25;
protected byte D_OLYMPAS296;
protected byte D_OLYMPAS298;
protected byte D_OLYMPAS31;
protected byte D_OLYMPAS32;
protected byte D_OLYMPAS33;
protected byte D_OLYMPAS34;
protected byte D_OLYMPAS35;
protected byte D_OLYMPAS396;
protected byte D_OLYMPAS398;
protected byte D_OPRLG;
protected byte D_OPRLG0;
protected byte D_OPRLG0NI;
protected byte D_OPRLG1;
protected byte D_OPRLG2;
protected byte D_OPRLG3;
protected byte D_OPSERV1;
protected byte D_OPSERV10;
protected byte D_OPSERV2;
protected byte D_OPSERV3;
protected byte D_OPSERV4;
protected byte D_OPSERV5;
protected byte D_OPSERV6;
protected byte D_OPSERV7;
protected byte D_OPSERV8;
protected byte D_OPSERV9;
protected boolean D_ORIGADD;
protected byte D_OTHCONT;
protected byte D_OVTNSA;
protected byte D_OVTPAY;
protected double D_OVTRATE;
protected byte D_OVTREST;
protected byte D_PACOB;
protected byte D_PAJU;
protected byte D_PANSSEC5_DV;
protected short D_PASOC00_CC;
protected short D_PASOC10_CC;
protected byte D_PASOC90_CC;
protected int D_PAYGL;
protected double D_PAYGU_DV;
protected byte D_PAYGU_IF;
protected byte D_PAYGWC;
protected double D_PAYG_DV;
protected int D_PAYNL;
protected double D_PAYNU_DV;
protected byte D_PAYNU_IF;
protected byte D_PAYNWC;
protected double D_PAYN_DV;
protected byte D_PAYRUK;
protected byte D_PAYTYP;
protected int D_PAYU;
protected byte D_PAYUG;
protected byte D_PAYUSL;
protected byte D_PAYUWC;
protected double D_PAYU_DV;
protected byte D_PBNFT1;
protected byte D_PBNFT10;
protected byte D_PBNFT11;
protected byte D_PBNFT12;
protected byte D_PBNFT13;
protected byte D_PBNFT2;
protected byte D_PBNFT3;
protected byte D_PBNFT4;
protected byte D_PBNFT5;
protected byte D_PBNFT6;
protected byte D_PBNFT7;
protected byte D_PBNFT8;
protected byte D_PBNFT9;
protected byte D_PBNFT96;
protected byte D_PENMCN;
protected byte D_PENMEX;
protected double D_PENMPY;
protected byte D_PENMTP;
protected boolean D_PENSIONER_DV;
protected byte D_PENSPB;
protected byte D_PJBPTFT;
protected byte D_PJSPTFT;
protected byte D_PJULK4WK;
protected byte D_PLBORNC;
protected byte D_PLIVPAR;
protected byte D_PLNOWM;
protected short D_PLNOWY4;
protected int D_PN1PID;
protected byte D_PN1PNO;
protected byte D_PN1SEX;
protected int D_PN2PID;
protected byte D_PN2PNO;
protected byte D_PN2SEX;
protected byte D_PNCARS;
protected byte D_PNO;
protected int D_PNS1PID;
protected byte D_PNS1PNO;
protected byte D_PNS1SEX;
protected int D_PNS2PID;
protected byte D_PNS2PNO;
protected byte D_PNS2SEX;
protected byte D_PPEN;
protected byte D_PPENSIONER;
protected byte D_PPENT;
protected int D_PPID;
protected byte D_PPNO;
protected byte D_PPPEX;
protected byte D_PPPEXM;
protected int D_PPRAM;
protected byte D_PPRAMPC;
protected byte D_PPREG;
protected byte D_PPSEX;
protected short D_PPYRS;
protected byte D_PRAYFREQ;
protected byte D_PREARN;
protected byte D_PREARNA;
protected byte D_PREARNW;
protected byte D_PREASON;
protected byte D_PREG;
protected byte D_PREGEND1;
protected byte D_PREGEND2;
protected byte D_PREGEND3;
protected boolean D_PREGEND4;
protected byte D_PREGFERT1;
protected byte D_PREGFERT2;
protected byte D_PREGFERT3;
protected boolean D_PREGFERT4;
protected byte D_PREGM1;
protected byte D_PREGM2;
protected byte D_PREGM3;
protected boolean D_PREGM4;
protected byte D_PREGOUT1;
protected byte D_PREGOUT2;
protected byte D_PREGOUT3;
protected byte D_PREGOUT4;
protected byte D_PREGSMK11;
protected boolean D_PREGSMK12;
protected boolean D_PREGSMK13;
protected boolean D_PREGSMK14;
protected byte D_PREGSMK21;
protected boolean D_PREGSMK22;
protected boolean D_PREGSMK23;
protected boolean D_PREGSMK24;
protected byte D_PREGSMK31;
protected boolean D_PREGSMK32;
protected boolean D_PREGSMK33;
protected boolean D_PREGSMK34;
protected byte D_PREGSMOKE1;
protected byte D_PREGSMOKE2;
protected boolean D_PREGSMOKE3;
protected boolean D_PREGSMOKE4;
protected short D_PREGY41;
protected short D_PREGY42;
protected short D_PREGY43;
protected boolean D_PREGY44;
protected byte D_PREL;
protected byte D_PRFITB;
protected byte D_PRFITBA;
protected byte D_PRFITBW;
protected byte D_PRIPN;
protected byte D_PS1;
protected byte D_PS10;
protected byte D_PS11;
protected byte D_PS12;
protected byte D_PS13;
protected byte D_PS14;
protected byte D_PS15;
protected byte D_PS16;
protected byte D_PS17;
protected byte D_PS18;
protected byte D_PS19;
protected byte D_PS2;
protected byte D_PS20;
protected byte D_PS21;
protected byte D_PS22;
protected byte D_PS23;
protected byte D_PS24;
protected byte D_PS25;
protected byte D_PS26;
protected byte D_PS27;
protected byte D_PS28;
protected byte D_PS29;
protected byte D_PS3;
protected byte D_PS30;
protected byte D_PS31;
protected byte D_PS32;
protected byte D_PS4;
protected byte D_PS5;
protected byte D_PS6;
protected byte D_PS7;
protected byte D_PS8;
protected byte D_PS9;
protected byte D_PSDQA_DV;
protected byte D_PSDQB_DV;
protected byte D_PSDQC_DV;
protected byte D_PSIBLINGS;
protected byte D_PSNUMCH;
protected int D_PSU;
protected byte D_QFHIGH;
protected boolean D_QFHIGHFL_DV;
protected byte D_QFHIGH_DV;
protected byte D_QFVOC1;
protected byte D_QFVOC10;
protected byte D_QFVOC11;
protected byte D_QFVOC12;
protected byte D_QFVOC13;
protected byte D_QFVOC14;
protected byte D_QFVOC15;
protected byte D_QFVOC2;
protected byte D_QFVOC3;
protected byte D_QFVOC4;
protected byte D_QFVOC5;
protected byte D_QFVOC6;
protected byte D_QFVOC7;
protected byte D_QFVOC8;
protected byte D_QFVOC9;
protected byte D_QFVOC96;
protected byte D_QUALNE;
protected byte D_QUALNEW1;
protected byte D_QUALNEW10;
protected byte D_QUALNEW11;
protected byte D_QUALNEW13;
protected byte D_QUALNEW15;
protected byte D_QUALNEW16;
protected byte D_QUALNEW17;
protected byte D_QUALNEW18;
protected byte D_QUALNEW19;
protected byte D_QUALNEW2;
protected byte D_QUALNEW20;
protected byte D_QUALNEW21;
protected byte D_QUALNEW22;
protected byte D_QUALNEW23;
protected byte D_QUALNEW24;
protected byte D_QUALNEW25;
protected byte D_QUALNEW26;
protected byte D_QUALNEW27;
protected byte D_QUALNEW28;
protected byte D_QUALNEW29;
protected byte D_QUALNEW3;
protected byte D_QUALNEW30;
protected byte D_QUALNEW31;
protected byte D_QUALNEW5;
protected byte D_QUALNEW6;
protected byte D_QUALNEW7;
protected byte D_QUALNEW8;
protected byte D_QUALNEW9;
protected byte D_QUALOC;
protected byte D_RACEL;
protected byte D_RACELAT;
protected byte D_RACELBT;
protected byte D_RACELMT;
protected byte D_RACELOT_CODE;
protected byte D_RACELO_CODE;
protected byte D_RACELT;
protected byte D_RACELWT;
protected byte D_RACEL_DV;
protected byte D_RACH16_DV;
protected byte D_RCOTHERD_CODE;
protected byte D_REASEND1;
protected byte D_REASEND2;
protected byte D_REASEND3;
protected byte D_REASEND4;
protected byte D_REASEND5;
protected boolean D_REASEND6;
protected byte D_REFBANK;
protected byte D_REFBNKY;
protected byte D_RELUP;
protected byte D_REMAIL_CODE;
protected byte D_REMCNTRY1;
protected byte D_REMCNTRY2;
protected byte D_REMCNTRY3;
protected byte D_REMCNTRY4;
protected byte D_REMHO;
protected byte D_REMHOW1;
protected byte D_REMHOW2;
protected byte D_REMHOW3;
protected byte D_REMIT1;
protected byte D_REMIT2;
protected byte D_REMIT3;
protected byte D_REMIT4;
protected byte D_REMIT5;
protected short D_REMITAMT1;
protected int D_REMITAMT2;
protected short D_REMITAMT3;
protected int D_REMITAMT4;
protected byte D_REMITFREQ1;
protected byte D_REMITFREQ2;
protected byte D_REMITFREQ3;
protected byte D_REMITFREQ4;
protected byte D_REMITREG1;
protected byte D_REMITREG2;
protected byte D_REMITREG3;
protected byte D_REMITREG4;
protected byte D_REMITUSUAL1;
protected byte D_REMITUSUAL2;
protected byte D_REMITUSUAL3;
protected byte D_REMITUSUAL4;
protected boolean D_RESPF16;
protected boolean D_RESPF16_DV;
protected boolean D_RESPM16;
protected boolean D_RESPM16_DV;
protected byte D_RETAMT;
protected byte D_RETCHK;
protected byte D_RETSUF;
protected byte D_RHLAND_CODE;
protected byte D_RLCHARITY;
protected byte D_RLDRNK;
protected byte D_RLEAT;
protected byte D_RLFRIENDS;
protected byte D_RLJOB;
protected byte D_RLJOBY1;
protected byte D_RLJOBY2;
protected byte D_RLJOBY3;
protected byte D_RLJOBY4;
protected byte D_RLJOBY5;
protected byte D_RLJOBY6;
protected byte D_RLJOBY97;
protected byte D_RLMARG;
protected byte D_RLSAVE;
protected byte D_RLSCHL;
protected byte D_RLWEAR;
protected byte D_RPHMOB_CODE;
protected byte D_RPHWRK_CODE;
protected byte D_RTCON1;
protected byte D_RTCON2;
protected byte D_RTCON3;
protected byte D_RTCON4;
protected byte D_RTEXPJB;
protected byte D_RTFND1;
protected byte D_RTFND10;
protected byte D_RTFND2;
protected byte D_RTFND3;
protected byte D_RTFND4;
protected byte D_RTFND5;
protected byte D_RTFND6;
protected byte D_RTFND7;
protected byte D_RTFND8;
protected byte D_RTFND9;
protected byte D_RTFND96;
protected byte D_RTPRO1;
protected byte D_RTPRO2;
protected byte D_RTPRO3;
protected byte D_RTPRO4;
protected byte D_RTPRO5;
protected byte D_RTPRO6;
protected byte D_SAMEJOB;
protected byte D_SAMPST;
protected byte D_SAVDOCS;
protected byte D_SAVE;
protected int D_SAVED;
protected byte D_SAVLT;
protected byte D_SAVREG;
protected byte D_SCAC;
protected byte D_SCEND;
protected byte D_SCENV_BCCC;
protected byte D_SCENV_CANC;
protected byte D_SCENV_CREX;
protected byte D_SCENV_CRLF;
protected byte D_SCENV_FITL;
protected byte D_SCENV_FTST;
protected byte D_SCENV_GRN;
protected byte D_SCENV_MEDS;
protected byte D_SCENV_NOOT;
protected byte D_SCENV_NOWO;
protected byte D_SCENV_PMEP;
protected byte D_SCENV_TLAT;
protected boolean D_SCFLAG_DV;
protected byte D_SCGHQ1_DV;
protected byte D_SCGHQ2_DV;
protected byte D_SCGHQA;
protected byte D_SCGHQB;
protected byte D_SCGHQC;
protected byte D_SCGHQD;
protected byte D_SCGHQE;
protected byte D_SCGHQF;
protected byte D_SCGHQG;
protected byte D_SCGHQH;
protected byte D_SCGHQI;
protected byte D_SCGHQJ;
protected byte D_SCGHQK;
protected byte D_SCGHQL;
protected byte D_SCHLLOC;
protected byte D_SCHOK;
protected byte D_SCHOOL;
protected byte D_SCHOOLCNTRY1;
protected byte D_SCHOOLCNTRY2;
protected byte D_SCHOOLCNTRY3;
protected byte D_SCHOOLCNTRY4;
protected byte D_SCHOOLCNTRY5;
protected byte D_SCLFSAT1;
protected byte D_SCLFSAT2;
protected byte D_SCLFSAT7;
protected byte D_SCLFSATO;
protected byte D_SCOPECL200;
protected byte D_SCOPECL30;
protected byte D_SCOPFAMA;
protected byte D_SCOPFAMB;
protected byte D_SCOPFAMD;
protected byte D_SCOPFAMF;
protected byte D_SCOPFAMH;
protected byte D_SCRF1;
protected byte D_SCRF2;
protected byte D_SCRF3;
protected byte D_SCRF4;
protected byte D_SCRF5;
protected byte D_SCRF6;
protected byte D_SCRF97;
protected byte D_SCRX_CODE;
protected byte D_SCSF1;
protected byte D_SCSF2A;
protected byte D_SCSF2B;
protected byte D_SCSF3A;
protected byte D_SCSF3B;
protected byte D_SCSF4A;
protected byte D_SCSF4B;
protected byte D_SCSF5;
protected byte D_SCSF6A;
protected byte D_SCSF6B;
protected byte D_SCSF6C;
protected byte D_SCSF7;
protected byte D_SCUN1;
protected byte D_SCUN2;
protected byte D_SCUN3;
protected byte D_SCUN97;
protected byte D_SCUX_CODE;
protected byte D_SCWEMWBA;
protected byte D_SCWEMWBB;
protected byte D_SCWEMWBC;
protected byte D_SCWEMWBD;
protected byte D_SCWEMWBE;
protected byte D_SCWEMWBF;
protected byte D_SCWEMWBG;
protected byte D_SCWKIMP;
protected byte D_SCWKOR1;
protected byte D_SCWKOR10;
protected byte D_SCWKOR11;
protected byte D_SCWKOR12;
protected byte D_SCWKOR13;
protected byte D_SCWKOR14;
protected byte D_SCWKOR15;
protected byte D_SCWKOR2;
protected byte D_SCWKOR3;
protected byte D_SCWKOR4;
protected byte D_SCWKOR5;
protected byte D_SCWKOR6;
protected byte D_SCWKOR7;
protected byte D_SCWKOR8;
protected byte D_SCWKOR9;
protected double D_SEEARNGRS_DV;
protected byte D_SEEARNGRS_IF;
protected double D_SEEARNNET_DV;
protected byte D_SERVUSE1;
protected byte D_SERVUSE10;
protected byte D_SERVUSE2;
protected byte D_SERVUSE3;
protected byte D_SERVUSE4;
protected byte D_SERVUSE5;
protected byte D_SERVUSE6;
protected byte D_SERVUSE7;
protected byte D_SERVUSE8;
protected byte D_SERVUSE9;
protected byte D_SERVUSE96;
protected boolean D_SEX;
protected byte D_SEX_DV;
protected byte D_SF1;
protected double D_SF12MCS_DV;
protected double D_SF12PCS_DV;
protected byte D_SIGNEDUCKIDS1;
protected byte D_SIGNEDUCKIDS2;
protected byte D_SIGNHEALTHKI1;
protected byte D_SIGNHEALTHKI2;
protected boolean D_SINGLE_DV;
protected byte D_SLP_QUAL;
protected byte D_SMKMNTH11;
protected boolean D_SMKMNTH12;
protected boolean D_SMKMNTH13;
protected boolean D_SMKMNTH14;
protected byte D_SMKMNTH21;
protected boolean D_SMKMNTH22;
protected boolean D_SMKMNTH23;
protected boolean D_SMKMNTH24;
protected byte D_SMKMNTH31;
protected boolean D_SMKMNTH32;
protected boolean D_SMKMNTH33;
protected boolean D_SMKMNTH34;
protected byte D_SMOFRQ;
protected byte D_SOCCONT;
protected byte D_SPPEN;
protected int D_SPPID;
protected byte D_SPPNO;
protected byte D_SRVYNOT1;
protected byte D_SRVYNOT10;
protected byte D_SRVYNOT2;
protected byte D_SRVYNOT3;
protected byte D_SRVYNOT4;
protected byte D_SRVYNOT5;
protected byte D_SRVYNOT6;
protected byte D_SRVYNOT7;
protected byte D_SRVYNOT8;
protected byte D_SRVYNOT9;
protected byte D_STATCM1;
protected byte D_STATCM2;
protected byte D_STATCM3;
protected short D_STATCY41;
protected short D_STATCY42;
protected short D_STATCY43;
protected byte D_STATENDD1;
protected byte D_STATENDD2;
protected byte D_STATENDD3;
protected byte D_STATENDD4;
protected byte D_STATENDD5;
protected boolean D_STATENDD6;
protected byte D_STATENDM1;
protected byte D_STATENDM2;
protected byte D_STATENDM3;
protected byte D_STATENDM4;
protected byte D_STATENDM5;
protected boolean D_STATENDM6;
protected short D_STATENDY41;
protected short D_STATENDY42;
protected short D_STATENDY43;
protected short D_STATENDY44;
protected short D_STATENDY45;
protected boolean D_STATENDY46;
protected byte D_STENDREAS;
protected short D_STRATA;
protected byte D_SUSP;
protected byte D_SVACTS1;
protected byte D_SVACTS2;
protected byte D_SVACTS3;
protected byte D_SVACTS4;
protected byte D_SVACTS5;
protected byte D_SVACTS96;
protected byte D_SVACTS97;
protected int D_SVAMT1;
protected int D_SVAMT2;
protected int D_SVAMT3;
protected int D_SVAMT4;
protected int D_SVAMT5;
protected int D_SVAMT6;
protected byte D_SVB1_1;
protected byte D_SVB1_2;
protected byte D_SVB1_3;
protected byte D_SVB1_4;
protected byte D_SVB1_5;
protected byte D_SVB1_6;
protected byte D_SVB2_1;
protected byte D_SVB2_2;
protected byte D_SVB2_3;
protected byte D_SVB2_4;
protected byte D_SVB2_5;
protected byte D_SVB2_6;
protected byte D_SVB3_1;
protected byte D_SVB3_2;
protected byte D_SVB3_3;
protected byte D_SVB3_4;
protected byte D_SVB3_5;
protected byte D_SVB3_6;
protected byte D_SVB4_1;
protected byte D_SVB4_2;
protected byte D_SVB4_3;
protected byte D_SVB4_4;
protected byte D_SVB4_5;
protected byte D_SVB4_6;
protected byte D_SVB5_1;
protected byte D_SVB5_2;
protected byte D_SVB5_3;
protected byte D_SVB5_4;
protected byte D_SVB5_5;
protected byte D_SVB5_6;
protected byte D_SVPN0_1;
protected byte D_SVPN0_2;
protected boolean D_SVPN0_3;
protected boolean D_SVPN0_4;
protected boolean D_SVPN0_5;
protected boolean D_SVPN0_6;
protected byte D_SVPN10_1;
protected byte D_SVPN10_2;
protected boolean D_SVPN10_3;
protected boolean D_SVPN10_4;
protected boolean D_SVPN10_5;
protected boolean D_SVPN10_6;
protected byte D_SVPN11_1;
protected byte D_SVPN11_2;
protected boolean D_SVPN11_3;
protected boolean D_SVPN11_4;
protected boolean D_SVPN11_5;
protected boolean D_SVPN11_6;
protected byte D_SVPN12_1;
protected byte D_SVPN12_2;
protected boolean D_SVPN12_3;
protected boolean D_SVPN12_4;
protected boolean D_SVPN12_5;
protected boolean D_SVPN12_6;
protected byte D_SVPN13_1;
protected byte D_SVPN13_2;
protected boolean D_SVPN13_3;
protected boolean D_SVPN13_4;
protected boolean D_SVPN13_5;
protected boolean D_SVPN13_6;
protected byte D_SVPN14_1;
protected byte D_SVPN14_2;
protected boolean D_SVPN14_3;
protected boolean D_SVPN14_4;
protected boolean D_SVPN14_5;
protected boolean D_SVPN14_6;
protected byte D_SVPN15_1;
protected byte D_SVPN15_2;
protected boolean D_SVPN15_3;
protected boolean D_SVPN15_4;
protected boolean D_SVPN15_5;
protected boolean D_SVPN15_6;
protected byte D_SVPN16_1;
protected byte D_SVPN16_2;
protected boolean D_SVPN16_3;
protected boolean D_SVPN16_4;
protected boolean D_SVPN16_5;
protected boolean D_SVPN16_6;
protected byte D_SVPN1_1;
protected byte D_SVPN1_2;
protected boolean D_SVPN1_3;
protected boolean D_SVPN1_4;
protected boolean D_SVPN1_5;
protected boolean D_SVPN1_6;
protected byte D_SVPN2_1;
protected byte D_SVPN2_2;
protected boolean D_SVPN2_3;
protected boolean D_SVPN2_4;
protected boolean D_SVPN2_5;
protected boolean D_SVPN2_6;
protected byte D_SVPN3_1;
protected byte D_SVPN3_2;
protected boolean D_SVPN3_3;
protected boolean D_SVPN3_4;
protected boolean D_SVPN3_5;
protected boolean D_SVPN3_6;
protected byte D_SVPN4_1;
protected byte D_SVPN4_2;
protected boolean D_SVPN4_3;
protected boolean D_SVPN4_4;
protected boolean D_SVPN4_5;
protected boolean D_SVPN4_6;
protected byte D_SVPN5_1;
protected byte D_SVPN5_2;
protected boolean D_SVPN5_3;
protected boolean D_SVPN5_4;
protected boolean D_SVPN5_5;
protected boolean D_SVPN5_6;
protected byte D_SVPN6_1;
protected byte D_SVPN6_2;
protected boolean D_SVPN6_3;
protected boolean D_SVPN6_4;
protected boolean D_SVPN6_5;
protected boolean D_SVPN6_6;
protected byte D_SVPN7_1;
protected byte D_SVPN7_2;
protected boolean D_SVPN7_3;
protected boolean D_SVPN7_4;
protected boolean D_SVPN7_5;
protected boolean D_SVPN7_6;
protected byte D_SVPN8_1;
protected byte D_SVPN8_2;
protected boolean D_SVPN8_3;
protected boolean D_SVPN8_4;
protected boolean D_SVPN8_5;
protected boolean D_SVPN8_6;
protected byte D_SVPN9_1;
protected byte D_SVPN9_2;
protected boolean D_SVPN9_3;
protected boolean D_SVPN9_4;
protected boolean D_SVPN9_5;
protected boolean D_SVPN9_6;
protected byte D_SVSJ1;
protected byte D_SVSJ2;
protected boolean D_SVSJ3;
protected boolean D_SVSJ4;
protected boolean D_SVSJ5;
protected boolean D_SVSJ6;
protected int D_SVSK1;
protected int D_SVSK2;
protected boolean D_SVSK3;
protected boolean D_SVSK4;
protected boolean D_SVSK5;
protected boolean D_SVSK6;
protected byte D_SWEMWBS_DV;
protected byte D_TF_JBSEMP;
protected short D_TMTIME;
protected byte D_TRAINANY;
protected short D_TRAINDAYS1;
protected short D_TRAINDAYS2;
protected short D_TRAINDAYS3;
protected byte D_TRAINEND1;
protected byte D_TRAINEND2;
protected byte D_TRAINEND3;
protected byte D_TRAINHRS1;
protected byte D_TRAINHRS2;
protected byte D_TRAINHRS3;
protected byte D_TRAINN;
protected byte D_TRAINPURP11;
protected byte D_TRAINPURP12;
protected byte D_TRAINPURP13;
protected byte D_TRAINPURP21;
protected byte D_TRAINPURP22;
protected byte D_TRAINPURP23;
protected byte D_TRAINPURP31;
protected byte D_TRAINPURP32;
protected byte D_TRAINPURP33;
protected byte D_TRAINPURP41;
protected byte D_TRAINPURP42;
protected byte D_TRAINPURP43;
protected byte D_TRAINPURP51;
protected byte D_TRAINPURP52;
protected byte D_TRAINPURP53;
protected byte D_TRAINPURP61;
protected byte D_TRAINPURP62;
protected byte D_TRAINPURP63;
protected byte D_TRAINPURP71;
protected byte D_TRAINPURP72;
protected byte D_TRAINPURP73;
protected byte D_TRAINQUAL1;
protected byte D_TRAINQUAL2;
protected byte D_TRAINQUAL3;
protected byte D_TRBIKEFQ;
protected byte D_TRBUSFQ;
protected byte D_TRCARFQ;
protected byte D_TRQUAL1;
protected byte D_TRQUAL10;
protected byte D_TRQUAL11;
protected byte D_TRQUAL13;
protected byte D_TRQUAL15;
protected byte D_TRQUAL16;
protected byte D_TRQUAL17;
protected byte D_TRQUAL18;
protected byte D_TRQUAL19;
protected byte D_TRQUAL2;
protected byte D_TRQUAL20;
protected byte D_TRQUAL21;
protected byte D_TRQUAL22;
protected byte D_TRQUAL23;
protected byte D_TRQUAL24;
protected byte D_TRQUAL25;
protected byte D_TRQUAL26;
protected byte D_TRQUAL27;
protected byte D_TRQUAL28;
protected byte D_TRQUAL29;
protected byte D_TRQUAL3;
protected byte D_TRQUAL30;
protected byte D_TRQUAL31;
protected byte D_TRQUAL4;
protected byte D_TRQUAL5;
protected byte D_TRQUAL6;
protected byte D_TRQUAL7;
protected byte D_TRQUAL8;
protected byte D_TRQUAL9;
protected byte D_TRTRNFQ;
protected byte D_TRWHO1;
protected byte D_TRWHO2;
protected byte D_TRWHO3;
protected byte D_TSLP_30M;
protected byte D_TSLP_CGH;
protected byte D_TSLP_WAK;
protected byte D_TSTA_AWK;
protected byte D_TUIN1;
protected byte D_TUJBPL;
protected byte D_TWKCAR;
protected byte D_TWKDIFF1;
protected byte D_TWKDIFF2;
protected byte D_TWKDIFF3;
protected byte D_TWKDIFF4;
protected byte D_TWKDIFF5;
protected byte D_TWKDIFF6;
protected byte D_TWKDIFF7;
protected byte D_TWKDIFF8;
protected byte D_TWKDIFF97;
protected byte D_TWKDIFFM;
protected byte D_UKBORN;
protected byte D_UNDQUS;
protected byte D_UNUSEXP;
protected byte D_UPSET;
protected byte D_URBAN_DV;
protected byte D_VOLFREQ;
protected short D_VOLHRS;
protected byte D_VOLUN;
protected byte D_VOTE1;
protected byte D_VOTE2;
protected byte D_VOTE3;
protected byte D_VOTE4;
protected byte D_VOTE5;
protected byte D_VOTE6;
protected byte D_WHORUAGE;
protected byte D_WHORUEDU;
protected byte D_WHORUFAM;
protected byte D_WHORUPOL;
protected byte D_WHORUPRO;
protected byte D_WHORURAC;
protected byte D_WHORUSEX;
protected byte D_WKAUT1;
protected byte D_WKAUT2;
protected byte D_WKAUT3;
protected byte D_WKAUT4;
protected byte D_WKAUT5;
protected byte D_WKENDS;
protected byte D_WKPLSAM;
protected byte D_WKTIME;
protected short D_WORKDIS;
protected byte D_WORKTRAV;
protected byte D_XPMOVE;
protected byte D_XPMVMNTH;
protected byte D_XPMVWHN;
protected byte D_XPMVWHR;
protected short D_XPMVYR;
protected byte D_XTRA5MINOSM_DV;
protected byte D_XTRA5MIN_DV;
protected byte D_YAFUTA;
protected byte D_YAFUTB;
protected byte D_YAJBSRV1;
protected byte D_YAJBSRV2;
protected byte D_YAJBSRV3;
protected byte D_YAJBSRV4;
protected byte D_YAJBSRV5;
protected byte D_YAJBSRV7;
protected byte D_YAJBSRV8;
protected byte D_YAJBSRV96;
protected byte D_YANSSEC5_DV;
protected short D_YASOC00_CC;
protected short D_YASOC10_CC;
protected byte D_YASOC90_CC;
protected byte D_YNOTBIKE1;
protected byte D_YNOTBIKE2;
protected byte D_YNOTBIKE3;
protected byte D_YNOTBIKE96;
protected byte D_YPAMAR;
protected byte D_YPAPAR;
protected byte D_YPESTA;
protected byte D_YPESTB;
protected byte D_YPESTC;
protected byte D_YPESTE;
protected byte D_YPESTF;
protected byte D_YPESTI;
protected byte D_YPESTJ;
protected byte D_YPESTK;
protected byte D_YPNETCHT;
protected byte D_YPNPAL;
protected byte D_YPSOCWEB;
protected short D_YR2UK4;
protected final void initD_ADCTS(String s) {
if (!s.trim().isEmpty()) {
D_ADCTS = Byte.parseByte(s);
} else {
D_ADCTS = Byte.MIN_VALUE;
}
}

protected final void initD_ADOPTCH01(String s) {
if (!s.trim().isEmpty()) {
D_ADOPTCH01 = Byte.parseByte(s);
} else {
D_ADOPTCH01 = Byte.MIN_VALUE;
}
}

protected final void initD_ADOPTCH02(String s) {
if (!s.trim().isEmpty()) {
D_ADOPTCH02 = Byte.parseByte(s);
} else {
D_ADOPTCH02 = Byte.MIN_VALUE;
}
}

protected final void initD_ADOPTCH03(String s) {
if (!s.trim().isEmpty()) {
D_ADOPTCH03 = Byte.parseByte(s);
} else {
D_ADOPTCH03 = Byte.MIN_VALUE;
}
}

protected final void initD_ADOPTCH04(String s) {
if (!s.trim().isEmpty()) {
D_ADOPTCH04 = Byte.parseByte(s);
} else {
D_ADOPTCH04 = Byte.MIN_VALUE;
}
}

protected final void initD_ADOPTCH05(String s) {
if (!s.trim().isEmpty()) {
D_ADOPTCH05 = Byte.parseByte(s);
} else {
D_ADOPTCH05 = Byte.MIN_VALUE;
}
}

protected final void initD_ADOPTCH06(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH06 = false;
} else {
D_ADOPTCH06 = true;
}
}
}

protected final void initD_ADOPTCH07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH07 = false;
} else {
D_ADOPTCH07 = true;
}
}
}

protected final void initD_ADOPTCH08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH08 = false;
} else {
D_ADOPTCH08 = true;
}
}
}

protected final void initD_ADOPTCH09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH09 = false;
} else {
D_ADOPTCH09 = true;
}
}
}

protected final void initD_ADOPTCH10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH10 = false;
} else {
D_ADOPTCH10 = true;
}
}
}

protected final void initD_ADOPTCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH11 = false;
} else {
D_ADOPTCH11 = true;
}
}
}

protected final void initD_ADOPTCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH12 = false;
} else {
D_ADOPTCH12 = true;
}
}
}

protected final void initD_ADOPTCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH13 = false;
} else {
D_ADOPTCH13 = true;
}
}
}

protected final void initD_ADOPTCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH14 = false;
} else {
D_ADOPTCH14 = true;
}
}
}

protected final void initD_ADOPTCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH15 = false;
} else {
D_ADOPTCH15 = true;
}
}
}

protected final void initD_ADOPTCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ADOPTCH16 = false;
} else {
D_ADOPTCH16 = true;
}
}
}

protected final void initD_ADSTATUS(String s) {
if (!s.trim().isEmpty()) {
D_ADSTATUS = Byte.parseByte(s);
} else {
D_ADSTATUS = Byte.MIN_VALUE;
}
}

protected final void initD_AEDROF1(String s) {
if (!s.trim().isEmpty()) {
D_AEDROF1 = Byte.parseByte(s);
} else {
D_AEDROF1 = Byte.MIN_VALUE;
}
}

protected final void initD_AEDROF2(String s) {
if (!s.trim().isEmpty()) {
D_AEDROF2 = Byte.parseByte(s);
} else {
D_AEDROF2 = Byte.MIN_VALUE;
}
}

protected final void initD_AEDROF3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_AEDROF3 = false;
} else {
D_AEDROF3 = true;
}
}
}

protected final void initD_AEDROF4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_AEDROF4 = false;
} else {
D_AEDROF4 = true;
}
}
}

protected final void initD_AEPUDA1(String s) {
if (!s.trim().isEmpty()) {
D_AEPUDA1 = Double.parseDouble(s);
} else {
D_AEPUDA1 = Double.NaN;
}
}

protected final void initD_AEPUDA2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_AEPUDA2 = false;
} else {
D_AEPUDA2 = true;
}
}
}

protected final void initD_AEPUDA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_AEPUDA3 = false;
} else {
D_AEPUDA3 = true;
}
}
}

protected final void initD_AEPUDA4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_AEPUDA4 = false;
} else {
D_AEPUDA4 = true;
}
}
}

protected final void initD_AEPUWK1(String s) {
if (!s.trim().isEmpty()) {
D_AEPUWK1 = Byte.parseByte(s);
} else {
D_AEPUWK1 = Byte.MIN_VALUE;
}
}

protected final void initD_AEPUWK2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_AEPUWK2 = false;
} else {
D_AEPUWK2 = true;
}
}
}

protected final void initD_AEPUWK3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_AEPUWK3 = false;
} else {
D_AEPUWK3 = true;
}
}
}

protected final void initD_AEPUWK4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_AEPUWK4 = false;
} else {
D_AEPUWK4 = true;
}
}
}

protected final void initD_AGEGR10_DV(String s) {
if (!s.trim().isEmpty()) {
D_AGEGR10_DV = Byte.parseByte(s);
} else {
D_AGEGR10_DV = Byte.MIN_VALUE;
}
}

protected final void initD_AGEGR13_DV(String s) {
if (!s.trim().isEmpty()) {
D_AGEGR13_DV = Byte.parseByte(s);
} else {
D_AGEGR13_DV = Byte.MIN_VALUE;
}
}

protected final void initD_AGEGR5_DV(String s) {
if (!s.trim().isEmpty()) {
D_AGEGR5_DV = Byte.parseByte(s);
} else {
D_AGEGR5_DV = Byte.MIN_VALUE;
}
}

protected final void initD_AGERET(String s) {
if (!s.trim().isEmpty()) {
D_AGERET = Byte.parseByte(s);
} else {
D_AGERET = Byte.MIN_VALUE;
}
}

protected final void initD_AGE_DV(String s) {
if (!s.trim().isEmpty()) {
D_AGE_DV = Byte.parseByte(s);
} else {
D_AGE_DV = Byte.MIN_VALUE;
}
}

protected final void initD_AHVWELL(String s) {
if (!s.trim().isEmpty()) {
D_AHVWELL = Byte.parseByte(s);
} else {
D_AHVWELL = Byte.MIN_VALUE;
}
}

protected final void initD_AIDEFT(String s) {
if (!s.trim().isEmpty()) {
D_AIDEFT = Byte.parseByte(s);
} else {
D_AIDEFT = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHH(String s) {
if (!s.trim().isEmpty()) {
D_AIDHH = Byte.parseByte(s);
} else {
D_AIDHH = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHRS(String s) {
if (!s.trim().isEmpty()) {
D_AIDHRS = Byte.parseByte(s);
} else {
D_AIDHRS = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHU1(String s) {
if (!s.trim().isEmpty()) {
D_AIDHU1 = Byte.parseByte(s);
} else {
D_AIDHU1 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHU2(String s) {
if (!s.trim().isEmpty()) {
D_AIDHU2 = Byte.parseByte(s);
} else {
D_AIDHU2 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA1(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA1 = Byte.parseByte(s);
} else {
D_AIDHUA1 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA10(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA10 = Byte.parseByte(s);
} else {
D_AIDHUA10 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA11(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA11 = Byte.parseByte(s);
} else {
D_AIDHUA11 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA12(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA12 = Byte.parseByte(s);
} else {
D_AIDHUA12 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA13(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA13 = Byte.parseByte(s);
} else {
D_AIDHUA13 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA14(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA14 = Byte.parseByte(s);
} else {
D_AIDHUA14 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA15(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA15 = Byte.parseByte(s);
} else {
D_AIDHUA15 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA16(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA16 = Byte.parseByte(s);
} else {
D_AIDHUA16 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA2(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA2 = Byte.parseByte(s);
} else {
D_AIDHUA2 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA3(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA3 = Byte.parseByte(s);
} else {
D_AIDHUA3 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA4(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA4 = Byte.parseByte(s);
} else {
D_AIDHUA4 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA5(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA5 = Byte.parseByte(s);
} else {
D_AIDHUA5 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA6(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA6 = Byte.parseByte(s);
} else {
D_AIDHUA6 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA7(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA7 = Byte.parseByte(s);
} else {
D_AIDHUA7 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA8(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA8 = Byte.parseByte(s);
} else {
D_AIDHUA8 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDHUA9(String s) {
if (!s.trim().isEmpty()) {
D_AIDHUA9 = Byte.parseByte(s);
} else {
D_AIDHUA9 = Byte.MIN_VALUE;
}
}

protected final void initD_AIDXHH(String s) {
if (!s.trim().isEmpty()) {
D_AIDXHH = Byte.parseByte(s);
} else {
D_AIDXHH = Byte.MIN_VALUE;
}
}

protected final void initD_ALLCH01(String s) {
if (!s.trim().isEmpty()) {
D_ALLCH01 = Byte.parseByte(s);
} else {
D_ALLCH01 = Byte.MIN_VALUE;
}
}

protected final void initD_ALLCH02(String s) {
if (!s.trim().isEmpty()) {
D_ALLCH02 = Byte.parseByte(s);
} else {
D_ALLCH02 = Byte.MIN_VALUE;
}
}

protected final void initD_ALLCH03(String s) {
if (!s.trim().isEmpty()) {
D_ALLCH03 = Byte.parseByte(s);
} else {
D_ALLCH03 = Byte.MIN_VALUE;
}
}

protected final void initD_ALLCH04(String s) {
if (!s.trim().isEmpty()) {
D_ALLCH04 = Byte.parseByte(s);
} else {
D_ALLCH04 = Byte.MIN_VALUE;
}
}

protected final void initD_ALLCH05(String s) {
if (!s.trim().isEmpty()) {
D_ALLCH05 = Byte.parseByte(s);
} else {
D_ALLCH05 = Byte.MIN_VALUE;
}
}

protected final void initD_ALLCH06(String s) {
if (!s.trim().isEmpty()) {
D_ALLCH06 = Byte.parseByte(s);
} else {
D_ALLCH06 = Byte.MIN_VALUE;
}
}

protected final void initD_ALLCH07(String s) {
if (!s.trim().isEmpty()) {
D_ALLCH07 = Byte.parseByte(s);
} else {
D_ALLCH07 = Byte.MIN_VALUE;
}
}

protected final void initD_ALLCH08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ALLCH08 = false;
} else {
D_ALLCH08 = true;
}
}
}

protected final void initD_ALLCH09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ALLCH09 = false;
} else {
D_ALLCH09 = true;
}
}
}

protected final void initD_ALLCH10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ALLCH10 = false;
} else {
D_ALLCH10 = true;
}
}
}

protected final void initD_ALLCH11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ALLCH11 = false;
} else {
D_ALLCH11 = true;
}
}
}

protected final void initD_ALLCH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ALLCH12 = false;
} else {
D_ALLCH12 = true;
}
}
}

protected final void initD_ALLCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ALLCH13 = false;
} else {
D_ALLCH13 = true;
}
}
}

protected final void initD_ALLCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ALLCH14 = false;
} else {
D_ALLCH14 = true;
}
}
}

protected final void initD_ALLCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ALLCH15 = false;
} else {
D_ALLCH15 = true;
}
}
}

protected final void initD_ALLCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_ALLCH16 = false;
} else {
D_ALLCH16 = true;
}
}
}

protected final void initD_AREA(String s) {
if (!s.trim().isEmpty()) {
D_AREA = Byte.parseByte(s);
} else {
D_AREA = Byte.MIN_VALUE;
}
}

protected final void initD_BASNSA(String s) {
if (!s.trim().isEmpty()) {
D_BASNSA = Byte.parseByte(s);
} else {
D_BASNSA = Byte.MIN_VALUE;
}
}

protected final void initD_BASRATE(String s) {
if (!s.trim().isEmpty()) {
D_BASRATE = Double.parseDouble(s);
} else {
D_BASRATE = Double.NaN;
}
}

protected final void initD_BASREST(String s) {
if (!s.trim().isEmpty()) {
D_BASREST = Byte.parseByte(s);
} else {
D_BASREST = Byte.MIN_VALUE;
}
}

protected final void initD_BENCB(String s) {
if (!s.trim().isEmpty()) {
D_BENCB = Byte.parseByte(s);
} else {
D_BENCB = Byte.MIN_VALUE;
}
}

protected final void initD_BENCTC(String s) {
if (!s.trim().isEmpty()) {
D_BENCTC = Byte.parseByte(s);
} else {
D_BENCTC = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS1(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS1 = Byte.parseByte(s);
} else {
D_BENDIS1 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS10(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS10 = Byte.parseByte(s);
} else {
D_BENDIS10 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS11(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS11 = Byte.parseByte(s);
} else {
D_BENDIS11 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS12(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS12 = Byte.parseByte(s);
} else {
D_BENDIS12 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS13(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS13 = Byte.parseByte(s);
} else {
D_BENDIS13 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS14(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS14 = Byte.parseByte(s);
} else {
D_BENDIS14 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS15(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS15 = Byte.parseByte(s);
} else {
D_BENDIS15 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS16(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS16 = Byte.parseByte(s);
} else {
D_BENDIS16 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS2(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS2 = Byte.parseByte(s);
} else {
D_BENDIS2 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS3(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS3 = Byte.parseByte(s);
} else {
D_BENDIS3 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS4(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS4 = Byte.parseByte(s);
} else {
D_BENDIS4 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS5(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS5 = Byte.parseByte(s);
} else {
D_BENDIS5 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS6(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS6 = Byte.parseByte(s);
} else {
D_BENDIS6 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS7(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS7 = Byte.parseByte(s);
} else {
D_BENDIS7 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS8(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS8 = Byte.parseByte(s);
} else {
D_BENDIS8 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS9(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS9 = Byte.parseByte(s);
} else {
D_BENDIS9 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS96(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS96 = Byte.parseByte(s);
} else {
D_BENDIS96 = Byte.MIN_VALUE;
}
}

protected final void initD_BENDIS97(String s) {
if (!s.trim().isEmpty()) {
D_BENDIS97 = Byte.parseByte(s);
} else {
D_BENDIS97 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM1(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM1 = Byte.parseByte(s);
} else {
D_BENFAM1 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM10(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM10 = Byte.parseByte(s);
} else {
D_BENFAM10 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM2(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM2 = Byte.parseByte(s);
} else {
D_BENFAM2 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM3(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM3 = Byte.parseByte(s);
} else {
D_BENFAM3 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM4(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM4 = Byte.parseByte(s);
} else {
D_BENFAM4 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM5(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM5 = Byte.parseByte(s);
} else {
D_BENFAM5 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM6(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM6 = Byte.parseByte(s);
} else {
D_BENFAM6 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM7(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM7 = Byte.parseByte(s);
} else {
D_BENFAM7 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM8(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM8 = Byte.parseByte(s);
} else {
D_BENFAM8 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM9(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM9 = Byte.parseByte(s);
} else {
D_BENFAM9 = Byte.MIN_VALUE;
}
}

protected final void initD_BENFAM96(String s) {
if (!s.trim().isEmpty()) {
D_BENFAM96 = Byte.parseByte(s);
} else {
D_BENFAM96 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU1(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU1 = Byte.parseByte(s);
} else {
D_BENHOU1 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU2(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU2 = Byte.parseByte(s);
} else {
D_BENHOU2 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU3(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU3 = Byte.parseByte(s);
} else {
D_BENHOU3 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU4(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU4 = Byte.parseByte(s);
} else {
D_BENHOU4 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU5(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU5 = Byte.parseByte(s);
} else {
D_BENHOU5 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU6(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU6 = Byte.parseByte(s);
} else {
D_BENHOU6 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU7(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU7 = Byte.parseByte(s);
} else {
D_BENHOU7 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU8(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU8 = Byte.parseByte(s);
} else {
D_BENHOU8 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU9(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU9 = Byte.parseByte(s);
} else {
D_BENHOU9 = Byte.MIN_VALUE;
}
}

protected final void initD_BENHOU96(String s) {
if (!s.trim().isEmpty()) {
D_BENHOU96 = Byte.parseByte(s);
} else {
D_BENHOU96 = Byte.MIN_VALUE;
}
}

protected final void initD_BENLINK(String s) {
if (!s.trim().isEmpty()) {
D_BENLINK = Byte.parseByte(s);
} else {
D_BENLINK = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN1(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN1 = Byte.parseByte(s);
} else {
D_BENPEN1 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN10(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN10 = Byte.parseByte(s);
} else {
D_BENPEN10 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN11(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN11 = Byte.parseByte(s);
} else {
D_BENPEN11 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN12(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN12 = Byte.parseByte(s);
} else {
D_BENPEN12 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN13(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN13 = Byte.parseByte(s);
} else {
D_BENPEN13 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN2(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN2 = Byte.parseByte(s);
} else {
D_BENPEN2 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN3(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN3 = Byte.parseByte(s);
} else {
D_BENPEN3 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN4(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN4 = Byte.parseByte(s);
} else {
D_BENPEN4 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN5(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN5 = Byte.parseByte(s);
} else {
D_BENPEN5 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN6(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN6 = Byte.parseByte(s);
} else {
D_BENPEN6 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN7(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN7 = Byte.parseByte(s);
} else {
D_BENPEN7 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN8(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN8 = Byte.parseByte(s);
} else {
D_BENPEN8 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN9(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN9 = Byte.parseByte(s);
} else {
D_BENPEN9 = Byte.MIN_VALUE;
}
}

protected final void initD_BENPEN96(String s) {
if (!s.trim().isEmpty()) {
D_BENPEN96 = Byte.parseByte(s);
} else {
D_BENPEN96 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA1(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA1 = Byte.parseByte(s);
} else {
D_BENSTA1 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA10(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA10 = Byte.parseByte(s);
} else {
D_BENSTA10 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA11(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA11 = Byte.parseByte(s);
} else {
D_BENSTA11 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA12(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA12 = Byte.parseByte(s);
} else {
D_BENSTA12 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA13(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA13 = Byte.parseByte(s);
} else {
D_BENSTA13 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA2(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA2 = Byte.parseByte(s);
} else {
D_BENSTA2 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA3(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA3 = Byte.parseByte(s);
} else {
D_BENSTA3 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA4(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA4 = Byte.parseByte(s);
} else {
D_BENSTA4 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA5(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA5 = Byte.parseByte(s);
} else {
D_BENSTA5 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA6(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA6 = Byte.parseByte(s);
} else {
D_BENSTA6 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA7(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA7 = Byte.parseByte(s);
} else {
D_BENSTA7 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA9(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA9 = Byte.parseByte(s);
} else {
D_BENSTA9 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA96(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA96 = Byte.parseByte(s);
} else {
D_BENSTA96 = Byte.MIN_VALUE;
}
}

protected final void initD_BENSTA97(String s) {
if (!s.trim().isEmpty()) {
D_BENSTA97 = Byte.parseByte(s);
} else {
D_BENSTA97 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX1(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX1 = Byte.parseByte(s);
} else {
D_BENTAX1 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX10(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX10 = Byte.parseByte(s);
} else {
D_BENTAX10 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX2(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX2 = Byte.parseByte(s);
} else {
D_BENTAX2 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX3(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX3 = Byte.parseByte(s);
} else {
D_BENTAX3 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX4(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX4 = Byte.parseByte(s);
} else {
D_BENTAX4 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX5(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX5 = Byte.parseByte(s);
} else {
D_BENTAX5 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX6(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX6 = Byte.parseByte(s);
} else {
D_BENTAX6 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX7(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX7 = Byte.parseByte(s);
} else {
D_BENTAX7 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX8(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX8 = Byte.parseByte(s);
} else {
D_BENTAX8 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX9(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX9 = Byte.parseByte(s);
} else {
D_BENTAX9 = Byte.MIN_VALUE;
}
}

protected final void initD_BENTAX96(String s) {
if (!s.trim().isEmpty()) {
D_BENTAX96 = Byte.parseByte(s);
} else {
D_BENTAX96 = Byte.MIN_VALUE;
}
}

protected final void initD_BENUNEMP1(String s) {
if (!s.trim().isEmpty()) {
D_BENUNEMP1 = Byte.parseByte(s);
} else {
D_BENUNEMP1 = Byte.MIN_VALUE;
}
}

protected final void initD_BENUNEMP2(String s) {
if (!s.trim().isEmpty()) {
D_BENUNEMP2 = Byte.parseByte(s);
} else {
D_BENUNEMP2 = Byte.MIN_VALUE;
}
}

protected final void initD_BENUNEMP3(String s) {
if (!s.trim().isEmpty()) {
D_BENUNEMP3 = Byte.parseByte(s);
} else {
D_BENUNEMP3 = Byte.MIN_VALUE;
}
}

protected final void initD_BENUNEMP4(String s) {
if (!s.trim().isEmpty()) {
D_BENUNEMP4 = Byte.parseByte(s);
} else {
D_BENUNEMP4 = Byte.MIN_VALUE;
}
}

protected final void initD_BENUNEMP5(String s) {
if (!s.trim().isEmpty()) {
D_BENUNEMP5 = Byte.parseByte(s);
} else {
D_BENUNEMP5 = Byte.MIN_VALUE;
}
}

protected final void initD_BENUNEMP6(String s) {
if (!s.trim().isEmpty()) {
D_BENUNEMP6 = Byte.parseByte(s);
} else {
D_BENUNEMP6 = Byte.MIN_VALUE;
}
}

protected final void initD_BENUNEMP7(String s) {
if (!s.trim().isEmpty()) {
D_BENUNEMP7 = Byte.parseByte(s);
} else {
D_BENUNEMP7 = Byte.MIN_VALUE;
}
}

protected final void initD_BENUNEMP96(String s) {
if (!s.trim().isEmpty()) {
D_BENUNEMP96 = Byte.parseByte(s);
} else {
D_BENUNEMP96 = Byte.MIN_VALUE;
}
}

protected final void initD_BIRTHY(String s) {
if (!s.trim().isEmpty()) {
D_BIRTHY = Short.parseShort(s);
} else {
D_BIRTHY = Short.MIN_VALUE;
}
}

protected final void initD_BRLOOP(String s) {
if (!s.trim().isEmpty()) {
D_BRLOOP = Byte.parseByte(s);
} else {
D_BRLOOP = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE1(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE1 = Byte.parseByte(s);
} else {
D_BTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE10(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE10 = Byte.parseByte(s);
} else {
D_BTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE11(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE11 = Byte.parseByte(s);
} else {
D_BTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE12(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE12 = Byte.parseByte(s);
} else {
D_BTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE13(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE13 = Byte.parseByte(s);
} else {
D_BTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE14(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE14 = Byte.parseByte(s);
} else {
D_BTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE2(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE2 = Byte.parseByte(s);
} else {
D_BTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE3(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE3 = Byte.parseByte(s);
} else {
D_BTYPE3 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE4(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE4 = Byte.parseByte(s);
} else {
D_BTYPE4 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE5(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE5 = Byte.parseByte(s);
} else {
D_BTYPE5 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE6(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE6 = Byte.parseByte(s);
} else {
D_BTYPE6 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE7(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE7 = Byte.parseByte(s);
} else {
D_BTYPE7 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE8(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE8 = Byte.parseByte(s);
} else {
D_BTYPE8 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE9(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE9 = Byte.parseByte(s);
} else {
D_BTYPE9 = Byte.MIN_VALUE;
}
}

protected final void initD_BTYPE96(String s) {
if (!s.trim().isEmpty()) {
D_BTYPE96 = Byte.parseByte(s);
} else {
D_BTYPE96 = Byte.MIN_VALUE;
}
}

protected final void initD_BUNO_DV(String s) {
if (!s.trim().isEmpty()) {
D_BUNO_DV = Byte.parseByte(s);
} else {
D_BUNO_DV = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY1(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY1 = Byte.parseByte(s);
} else {
D_CARBUY1 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY10(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY10 = Byte.parseByte(s);
} else {
D_CARBUY10 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY11(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY11 = Byte.parseByte(s);
} else {
D_CARBUY11 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY12(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY12 = Byte.parseByte(s);
} else {
D_CARBUY12 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY2(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY2 = Byte.parseByte(s);
} else {
D_CARBUY2 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY3(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY3 = Byte.parseByte(s);
} else {
D_CARBUY3 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY4(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY4 = Byte.parseByte(s);
} else {
D_CARBUY4 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY5(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY5 = Byte.parseByte(s);
} else {
D_CARBUY5 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY6(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY6 = Byte.parseByte(s);
} else {
D_CARBUY6 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY7(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY7 = Byte.parseByte(s);
} else {
D_CARBUY7 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY8(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY8 = Byte.parseByte(s);
} else {
D_CARBUY8 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY9(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY9 = Byte.parseByte(s);
} else {
D_CARBUY9 = Byte.MIN_VALUE;
}
}

protected final void initD_CARBUY97(String s) {
if (!s.trim().isEmpty()) {
D_CARBUY97 = Byte.parseByte(s);
} else {
D_CARBUY97 = Byte.MIN_VALUE;
}
}

protected final void initD_CARMILES(String s) {
if (!s.trim().isEmpty()) {
D_CARMILES = Integer.parseInt(s);
} else {
D_CARMILES = Integer.MIN_VALUE;
}
}

protected final void initD_CARSRV1(String s) {
if (!s.trim().isEmpty()) {
D_CARSRV1 = Byte.parseByte(s);
} else {
D_CARSRV1 = Byte.MIN_VALUE;
}
}

protected final void initD_CARSRV2(String s) {
if (!s.trim().isEmpty()) {
D_CARSRV2 = Byte.parseByte(s);
} else {
D_CARSRV2 = Byte.MIN_VALUE;
}
}

protected final void initD_CARSRV3(String s) {
if (!s.trim().isEmpty()) {
D_CARSRV3 = Byte.parseByte(s);
} else {
D_CARSRV3 = Byte.MIN_VALUE;
}
}

protected final void initD_CARUSE(String s) {
if (!s.trim().isEmpty()) {
D_CARUSE = Byte.parseByte(s);
} else {
D_CARUSE = Byte.MIN_VALUE;
}
}

protected final void initD_CASIEND(String s) {
if (!s.trim().isEmpty()) {
D_CASIEND = Byte.parseByte(s);
} else {
D_CASIEND = Byte.MIN_VALUE;
}
}

protected final void initD_CCAMTJT(String s) {
if (!s.trim().isEmpty()) {
D_CCAMTJT = Integer.parseInt(s);
} else {
D_CCAMTJT = Integer.MIN_VALUE;
}
}

protected final void initD_CCAMTSOLE(String s) {
if (!s.trim().isEmpty()) {
D_CCAMTSOLE = Integer.parseInt(s);
} else {
D_CCAMTSOLE = Integer.MIN_VALUE;
}
}

protected final void initD_CCARE(String s) {
if (!s.trim().isEmpty()) {
D_CCARE = Byte.parseByte(s);
} else {
D_CCARE = Byte.MIN_VALUE;
}
}

protected final void initD_CCBILLJT(String s) {
if (!s.trim().isEmpty()) {
D_CCBILLJT = Byte.parseByte(s);
} else {
D_CCBILLJT = Byte.MIN_VALUE;
}
}

protected final void initD_CCBILLSOLE(String s) {
if (!s.trim().isEmpty()) {
D_CCBILLSOLE = Byte.parseByte(s);
} else {
D_CCBILLSOLE = Byte.MIN_VALUE;
}
}

protected final void initD_CCJT(String s) {
if (!s.trim().isEmpty()) {
D_CCJT = Byte.parseByte(s);
} else {
D_CCJT = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP0(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP0 = Byte.parseByte(s);
} else {
D_CCJTP0 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP1(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP1 = Byte.parseByte(s);
} else {
D_CCJTP1 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP10(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP10 = Byte.parseByte(s);
} else {
D_CCJTP10 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP11(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP11 = Byte.parseByte(s);
} else {
D_CCJTP11 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP12(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP12 = Byte.parseByte(s);
} else {
D_CCJTP12 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP13(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP13 = Byte.parseByte(s);
} else {
D_CCJTP13 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP14(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP14 = Byte.parseByte(s);
} else {
D_CCJTP14 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP15(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP15 = Byte.parseByte(s);
} else {
D_CCJTP15 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP16(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP16 = Byte.parseByte(s);
} else {
D_CCJTP16 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP2(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP2 = Byte.parseByte(s);
} else {
D_CCJTP2 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP3(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP3 = Byte.parseByte(s);
} else {
D_CCJTP3 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP4(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP4 = Byte.parseByte(s);
} else {
D_CCJTP4 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP5(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP5 = Byte.parseByte(s);
} else {
D_CCJTP5 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP6(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP6 = Byte.parseByte(s);
} else {
D_CCJTP6 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP7(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP7 = Byte.parseByte(s);
} else {
D_CCJTP7 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP8(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP8 = Byte.parseByte(s);
} else {
D_CCJTP8 = Byte.MIN_VALUE;
}
}

protected final void initD_CCJTP9(String s) {
if (!s.trim().isEmpty()) {
D_CCJTP9 = Byte.parseByte(s);
} else {
D_CCJTP9 = Byte.MIN_VALUE;
}
}

protected final void initD_CCSOLE(String s) {
if (!s.trim().isEmpty()) {
D_CCSOLE = Byte.parseByte(s);
} else {
D_CCSOLE = Byte.MIN_VALUE;
}
}

protected final void initD_CCWORK(String s) {
if (!s.trim().isEmpty()) {
D_CCWORK = Byte.parseByte(s);
} else {
D_CCWORK = Byte.MIN_VALUE;
}
}

protected final void initD_CH1BY4(String s) {
if (!s.trim().isEmpty()) {
D_CH1BY4 = Short.parseShort(s);
} else {
D_CH1BY4 = Short.MIN_VALUE;
}
}

protected final void initD_CHARAM(String s) {
if (!s.trim().isEmpty()) {
D_CHARAM = Short.parseShort(s);
} else {
D_CHARAM = Short.MIN_VALUE;
}
}

protected final void initD_CHARFREQ(String s) {
if (!s.trim().isEmpty()) {
D_CHARFREQ = Byte.parseByte(s);
} else {
D_CHARFREQ = Byte.MIN_VALUE;
}
}

protected final void initD_CHARGV(String s) {
if (!s.trim().isEmpty()) {
D_CHARGV = Byte.parseByte(s);
} else {
D_CHARGV = Byte.MIN_VALUE;
}
}

protected final void initD_CHBRFED01(String s) {
if (!s.trim().isEmpty()) {
D_CHBRFED01 = Byte.parseByte(s);
} else {
D_CHBRFED01 = Byte.MIN_VALUE;
}
}

protected final void initD_CHBRFED02(String s) {
if (!s.trim().isEmpty()) {
D_CHBRFED02 = Byte.parseByte(s);
} else {
D_CHBRFED02 = Byte.MIN_VALUE;
}
}

protected final void initD_CHBRFED03(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED03 = false;
} else {
D_CHBRFED03 = true;
}
}
}

protected final void initD_CHBRFED04(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED04 = false;
} else {
D_CHBRFED04 = true;
}
}
}

protected final void initD_CHBRFED05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED05 = false;
} else {
D_CHBRFED05 = true;
}
}
}

protected final void initD_CHBRFED06(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED06 = false;
} else {
D_CHBRFED06 = true;
}
}
}

protected final void initD_CHBRFED07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED07 = false;
} else {
D_CHBRFED07 = true;
}
}
}

protected final void initD_CHBRFED08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED08 = false;
} else {
D_CHBRFED08 = true;
}
}
}

protected final void initD_CHBRFED09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED09 = false;
} else {
D_CHBRFED09 = true;
}
}
}

protected final void initD_CHBRFED10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED10 = false;
} else {
D_CHBRFED10 = true;
}
}
}

protected final void initD_CHBRFED11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED11 = false;
} else {
D_CHBRFED11 = true;
}
}
}

protected final void initD_CHBRFED12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED12 = false;
} else {
D_CHBRFED12 = true;
}
}
}

protected final void initD_CHBRFED13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED13 = false;
} else {
D_CHBRFED13 = true;
}
}
}

protected final void initD_CHBRFED14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED14 = false;
} else {
D_CHBRFED14 = true;
}
}
}

protected final void initD_CHBRFED15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED15 = false;
} else {
D_CHBRFED15 = true;
}
}
}

protected final void initD_CHBRFED16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
D_CHBRFED16 = false;
} else {
D_CHBRFED16 = true;
}
}
}

protected final void initD_CHILDPNO(String s) {
if (!s.trim().isEmpty()) {
D_CHILDPNO = Byte.parseByte(s);
} else {
D_CHILDPNO = Byte.MIN_VALUE;
}
}

protected final void initD_CHKRESP(String s) {
if (!s.trim().isEmpty()) {
D_CHKRESP = Byte.parseByte(s);
} else {
D_CHKRESP = Byte.MIN_VALUE;
}
}

protected final void initD_CINDTIME(String s) {
if (!s.trim().isEmpty()) {
D_CINDTIME = Integer.parseInt(s);
} else {
D_CINDTIME = Integer.MIN_VALUE;
}
}

protected final void initD_CITZN1(String s) {
if (!s.trim().isEmpty()) {
D_CITZN1 = Byte.parseByte(s);
} else {
D_CITZN1 = Byte.MIN_VALUE;
}
}

protected final void initD_CITZN2(String s) {
if (!s.trim().isEmpty()) {
D_CITZN2 = Byte.parseByte(s);
} else {
D_CITZN2 = Byte.MIN_VALUE;
}
}

protected final void initD_CITZN3(String s) {
if (!s.trim().isEmpty()) {
D_CITZN3 = Byte.parseByte(s);
} else {
D_CITZN3 = Byte.MIN_VALUE;
}
}

protected final void initD_CJBATT(String s) {
if (!s.trim().isEmpty()) {
D_CJBATT = Byte.parseByte(s);
} else {
D_CJBATT = Byte.MIN_VALUE;
}
}

protected final void initD_CJOB(String s) {
if (!s.trim().isEmpty()) {
D_CJOB = Byte.parseByte(s);
} else {
D_CJOB = Byte.MIN_VALUE;
}
}

protected final void initD_CMLSTAT1(String s) {
if (!s.trim().isEmpty()) {
D_CMLSTAT1 = Byte.parseByte(s);
} else {
D_CMLSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initD_CMLSTAT2(String s) {
if (!s.trim().isEmpty()) {
D_CMLSTAT2 = Byte.parseByte(s);
} else {
D_CMLSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initD_CMLSTAT3(String s) {
if (!s.trim().isEmpty()) {
D_CMLSTAT3 = Byte.parseByte(s);
} else {
D_CMLSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initD_COH1BM(String s) {
if (!s.trim().isEmpty()) {
D_COH1BM = Byte.parseByte(s);
} else {
D_COH1BM = Byte.MIN_VALUE;
}
}

protected final void initD_COH1BY(String s) {
if (!s.trim().isEmpty()) {
D_COH1BY = Short.parseShort(s);
} else {
D_COH1BY = Short.MIN_VALUE;
}
}

protected final void initD_COH1EM(String s) {
if (!s.trim().isEmpty()) {
D_COH1EM = Byte.parseByte(s);
} else {
D_COH1EM = Byte.MIN_VALUE;
}
}

protected final void initD_COH1EY(String s) {
if (!s.trim().isEmpty()) {
D_COH1EY = Short.parseShort(s);
} else {
D_COH1EY = Short.MIN_VALUE;
}
}

protected final void initD_COH1MR(String s) {
if (!s.trim().isEmpty()) {
D_COH1MR = Byte.parseByte(s);
} else {
D_COH1MR = Byte.MIN_VALUE;
}
}

protected final void initD_COHAB(String s) {
if (!s.trim().isEmpty()) {
D_COHAB = Byte.parseByte(s);
} else {
D_COHAB = Byte.MIN_VALUE;
}
}

protected final void initD_COHABN(String s) {
if (!s.trim().isEmpty()) {
D_COHABN = Byte.parseByte(s);
} else {
D_COHABN = Byte.MIN_VALUE;
}
}

protected final void initD_COHAB_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_COHAB_DV = false;
} else {
D_COHAB_DV = true;
}
}
}

protected final void initD_CONTFT(String s) {
if (!s.trim().isEmpty()) {
D_CONTFT = Byte.parseByte(s);
} else {
D_CONTFT = Byte.MIN_VALUE;
}
}

protected final void initD_COUNTRY(String s) {
if (!s.trim().isEmpty()) {
D_COUNTRY = Byte.parseByte(s);
} else {
D_COUNTRY = Byte.MIN_VALUE;
}
}

protected final void initD_CREDAMT(String s) {
if (!s.trim().isEmpty()) {
D_CREDAMT = Integer.parseInt(s);
} else {
D_CREDAMT = Integer.MIN_VALUE;
}
}

protected final void initD_CREDITOR(String s) {
if (!s.trim().isEmpty()) {
D_CREDITOR = Byte.parseByte(s);
} else {
D_CREDITOR = Byte.MIN_VALUE;
}
}

protected final void initD_CREDJT(String s) {
if (!s.trim().isEmpty()) {
D_CREDJT = Integer.parseInt(s);
} else {
D_CREDJT = Integer.MIN_VALUE;
}
}

protected final void initD_CREDSOLE(String s) {
if (!s.trim().isEmpty()) {
D_CREDSOLE = Integer.parseInt(s);
} else {
D_CREDSOLE = Integer.MIN_VALUE;
}
}

protected final void initD_CSTAT(String s) {
if (!s.trim().isEmpty()) {
D_CSTAT = Byte.parseByte(s);
} else {
D_CSTAT = Byte.MIN_VALUE;
}
}

protected final void initD_CTADD1_CODE(String s) {
if (!s.trim().isEmpty()) {
D_CTADD1_CODE = Byte.parseByte(s);
} else {
D_CTADD1_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_CTADD2_CODE(String s) {
if (!s.trim().isEmpty()) {
D_CTADD2_CODE = Byte.parseByte(s);
} else {
D_CTADD2_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_CTCNTY_CODE(String s) {
if (!s.trim().isEmpty()) {
D_CTCNTY_CODE = Byte.parseByte(s);
} else {
D_CTCNTY_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONS(String s) {
if (!s.trim().isEmpty()) {
D_CTCONS = Byte.parseByte(s);
} else {
D_CTCONS = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONSCONF1(String s) {
if (!s.trim().isEmpty()) {
D_CTCONSCONF1 = Byte.parseByte(s);
} else {
D_CTCONSCONF1 = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONSCONF2(String s) {
if (!s.trim().isEmpty()) {
D_CTCONSCONF2 = Byte.parseByte(s);
} else {
D_CTCONSCONF2 = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONSCONF3(String s) {
if (!s.trim().isEmpty()) {
D_CTCONSCONF3 = Byte.parseByte(s);
} else {
D_CTCONSCONF3 = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONSCONF4(String s) {
if (!s.trim().isEmpty()) {
D_CTCONSCONF4 = Byte.parseByte(s);
} else {
D_CTCONSCONF4 = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONSCONF5(String s) {
if (!s.trim().isEmpty()) {
D_CTCONSCONF5 = Byte.parseByte(s);
} else {
D_CTCONSCONF5 = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONSCONF6(String s) {
if (!s.trim().isEmpty()) {
D_CTCONSCONF6 = Byte.parseByte(s);
} else {
D_CTCONSCONF6 = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONSCONF7(String s) {
if (!s.trim().isEmpty()) {
D_CTCONSCONF7 = Byte.parseByte(s);
} else {
D_CTCONSCONF7 = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONSCONF8(String s) {
if (!s.trim().isEmpty()) {
D_CTCONSCONF8 = Byte.parseByte(s);
} else {
D_CTCONSCONF8 = Byte.MIN_VALUE;
}
}

protected final void initD_CTCONSCONF94(String s) {
if (!s.trim().isEmpty()) {
D_CTCONSCONF94 = Byte.parseByte(s);
} else {
D_CTCONSCONF94 = Byte.MIN_VALUE;
}
}

protected final void initD_CTEMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
D_CTEMAIL_CODE = Byte.parseByte(s);
} else {
D_CTEMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_CTPCODE_CODE(String s) {
if (!s.trim().isEmpty()) {
D_CTPCODE_CODE = Byte.parseByte(s);
} else {
D_CTPCODE_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_CTREL(String s) {
if (!s.trim().isEmpty()) {
D_CTREL = Byte.parseByte(s);
} else {
D_CTREL = Byte.MIN_VALUE;
}
}

protected final void initD_CTTEL1_CODE(String s) {
if (!s.trim().isEmpty()) {
D_CTTEL1_CODE = Byte.parseByte(s);
} else {
D_CTTEL1_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_CTTEL2_CODE(String s) {
if (!s.trim().isEmpty()) {
D_CTTEL2_CODE = Byte.parseByte(s);
} else {
D_CTTEL2_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_CTTOWN_CODE(String s) {
if (!s.trim().isEmpty()) {
D_CTTOWN_CODE = Byte.parseByte(s);
} else {
D_CTTOWN_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_CURRJOB1(String s) {
if (!s.trim().isEmpty()) {
D_CURRJOB1 = Byte.parseByte(s);
} else {
D_CURRJOB1 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRJOB2(String s) {
if (!s.trim().isEmpty()) {
D_CURRJOB2 = Byte.parseByte(s);
} else {
D_CURRJOB2 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRJOB3(String s) {
if (!s.trim().isEmpty()) {
D_CURRJOB3 = Byte.parseByte(s);
} else {
D_CURRJOB3 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRJOB4(String s) {
if (!s.trim().isEmpty()) {
D_CURRJOB4 = Byte.parseByte(s);
} else {
D_CURRJOB4 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRJOB5(String s) {
if (!s.trim().isEmpty()) {
D_CURRJOB5 = Byte.parseByte(s);
} else {
D_CURRJOB5 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRJOB6(String s) {
if (!s.trim().isEmpty()) {
D_CURRJOB6 = Byte.parseByte(s);
} else {
D_CURRJOB6 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRPART1(String s) {
if (!s.trim().isEmpty()) {
D_CURRPART1 = Byte.parseByte(s);
} else {
D_CURRPART1 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRPART2(String s) {
if (!s.trim().isEmpty()) {
D_CURRPART2 = Byte.parseByte(s);
} else {
D_CURRPART2 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRSTAT1(String s) {
if (!s.trim().isEmpty()) {
D_CURRSTAT1 = Byte.parseByte(s);
} else {
D_CURRSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRSTAT2(String s) {
if (!s.trim().isEmpty()) {
D_CURRSTAT2 = Byte.parseByte(s);
} else {
D_CURRSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRSTAT3(String s) {
if (!s.trim().isEmpty()) {
D_CURRSTAT3 = Byte.parseByte(s);
} else {
D_CURRSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRSTAT4(String s) {
if (!s.trim().isEmpty()) {
D_CURRSTAT4 = Byte.parseByte(s);
} else {
D_CURRSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRSTAT5(String s) {
if (!s.trim().isEmpty()) {
D_CURRSTAT5 = Byte.parseByte(s);
} else {
D_CURRSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRSTAT6(String s) {
if (!s.trim().isEmpty()) {
D_CURRSTAT6 = Byte.parseByte(s);
} else {
D_CURRSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT1(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT1 = Byte.parseByte(s);
} else {
D_CURRYNOT1 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT2(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT2 = Byte.parseByte(s);
} else {
D_CURRYNOT2 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT3(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT3 = Byte.parseByte(s);
} else {
D_CURRYNOT3 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT4(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT4 = Byte.parseByte(s);
} else {
D_CURRYNOT4 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT5(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT5 = Byte.parseByte(s);
} else {
D_CURRYNOT5 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT6(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT6 = Byte.parseByte(s);
} else {
D_CURRYNOT6 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT7(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT7 = Byte.parseByte(s);
} else {
D_CURRYNOT7 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT8(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT8 = Byte.parseByte(s);
} else {
D_CURRYNOT8 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT96(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT96 = Byte.parseByte(s);
} else {
D_CURRYNOT96 = Byte.MIN_VALUE;
}
}

protected final void initD_CURRYNOT97(String s) {
if (!s.trim().isEmpty()) {
D_CURRYNOT97 = Byte.parseByte(s);
} else {
D_CURRYNOT97 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBT1(String s) {
if (!s.trim().isEmpty()) {
D_DEBT1 = Byte.parseByte(s);
} else {
D_DEBT1 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBT2(String s) {
if (!s.trim().isEmpty()) {
D_DEBT2 = Byte.parseByte(s);
} else {
D_DEBT2 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBT4(String s) {
if (!s.trim().isEmpty()) {
D_DEBT4 = Byte.parseByte(s);
} else {
D_DEBT4 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBT5(String s) {
if (!s.trim().isEmpty()) {
D_DEBT5 = Byte.parseByte(s);
} else {
D_DEBT5 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBT6(String s) {
if (!s.trim().isEmpty()) {
D_DEBT6 = Byte.parseByte(s);
} else {
D_DEBT6 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBT7(String s) {
if (!s.trim().isEmpty()) {
D_DEBT7 = Byte.parseByte(s);
} else {
D_DEBT7 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBT8(String s) {
if (!s.trim().isEmpty()) {
D_DEBT8 = Byte.parseByte(s);
} else {
D_DEBT8 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBT96(String s) {
if (!s.trim().isEmpty()) {
D_DEBT96 = Byte.parseByte(s);
} else {
D_DEBT96 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBT97(String s) {
if (!s.trim().isEmpty()) {
D_DEBT97 = Byte.parseByte(s);
} else {
D_DEBT97 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTC1(String s) {
if (!s.trim().isEmpty()) {
D_DEBTC1 = Byte.parseByte(s);
} else {
D_DEBTC1 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTC2(String s) {
if (!s.trim().isEmpty()) {
D_DEBTC2 = Byte.parseByte(s);
} else {
D_DEBTC2 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTC3(String s) {
if (!s.trim().isEmpty()) {
D_DEBTC3 = Byte.parseByte(s);
} else {
D_DEBTC3 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTC4(String s) {
if (!s.trim().isEmpty()) {
D_DEBTC4 = Byte.parseByte(s);
} else {
D_DEBTC4 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTC5(String s) {
if (!s.trim().isEmpty()) {
D_DEBTC5 = Byte.parseByte(s);
} else {
D_DEBTC5 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO1(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO1 = Byte.parseByte(s);
} else {
D_DEBTINFO1 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO10(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO10 = Byte.parseByte(s);
} else {
D_DEBTINFO10 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO11(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO11 = Byte.parseByte(s);
} else {
D_DEBTINFO11 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO2(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO2 = Byte.parseByte(s);
} else {
D_DEBTINFO2 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO3(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO3 = Byte.parseByte(s);
} else {
D_DEBTINFO3 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO4(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO4 = Byte.parseByte(s);
} else {
D_DEBTINFO4 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO5(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO5 = Byte.parseByte(s);
} else {
D_DEBTINFO5 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO6(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO6 = Byte.parseByte(s);
} else {
D_DEBTINFO6 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO7(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO7 = Byte.parseByte(s);
} else {
D_DEBTINFO7 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO8(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO8 = Byte.parseByte(s);
} else {
D_DEBTINFO8 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO9(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO9 = Byte.parseByte(s);
} else {
D_DEBTINFO9 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTINFO97(String s) {
if (!s.trim().isEmpty()) {
D_DEBTINFO97 = Byte.parseByte(s);
} else {
D_DEBTINFO97 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTOTH1(String s) {
if (!s.trim().isEmpty()) {
D_DEBTOTH1 = Byte.parseByte(s);
} else {
D_DEBTOTH1 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTOTH2(String s) {
if (!s.trim().isEmpty()) {
D_DEBTOTH2 = Byte.parseByte(s);
} else {
D_DEBTOTH2 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTOTH3(String s) {
if (!s.trim().isEmpty()) {
D_DEBTOTH3 = Byte.parseByte(s);
} else {
D_DEBTOTH3 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTOTH4(String s) {
if (!s.trim().isEmpty()) {
D_DEBTOTH4 = Byte.parseByte(s);
} else {
D_DEBTOTH4 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTOTH96(String s) {
if (!s.trim().isEmpty()) {
D_DEBTOTH96 = Byte.parseByte(s);
} else {
D_DEBTOTH96 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN0(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN0 = Byte.parseByte(s);
} else {
D_DEBTPN0 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN1(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN1 = Byte.parseByte(s);
} else {
D_DEBTPN1 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN10(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN10 = Byte.parseByte(s);
} else {
D_DEBTPN10 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN11(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN11 = Byte.parseByte(s);
} else {
D_DEBTPN11 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN12(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN12 = Byte.parseByte(s);
} else {
D_DEBTPN12 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN13(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN13 = Byte.parseByte(s);
} else {
D_DEBTPN13 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN14(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN14 = Byte.parseByte(s);
} else {
D_DEBTPN14 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN15(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN15 = Byte.parseByte(s);
} else {
D_DEBTPN15 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN16(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN16 = Byte.parseByte(s);
} else {
D_DEBTPN16 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN2(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN2 = Byte.parseByte(s);
} else {
D_DEBTPN2 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN3(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN3 = Byte.parseByte(s);
} else {
D_DEBTPN3 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN4(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN4 = Byte.parseByte(s);
} else {
D_DEBTPN4 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN5(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN5 = Byte.parseByte(s);
} else {
D_DEBTPN5 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN6(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN6 = Byte.parseByte(s);
} else {
D_DEBTPN6 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN7(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN7 = Byte.parseByte(s);
} else {
D_DEBTPN7 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN8(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN8 = Byte.parseByte(s);
} else {
D_DEBTPN8 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTPN9(String s) {
if (!s.trim().isEmpty()) {
D_DEBTPN9 = Byte.parseByte(s);
} else {
D_DEBTPN9 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTSJ(String s) {
if (!s.trim().isEmpty()) {
D_DEBTSJ = Byte.parseByte(s);
} else {
D_DEBTSJ = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTSK(String s) {
if (!s.trim().isEmpty()) {
D_DEBTSK = Integer.parseInt(s);
} else {
D_DEBTSK = Integer.MIN_VALUE;
}
}

protected final void initD_DEBTWHO1(String s) {
if (!s.trim().isEmpty()) {
D_DEBTWHO1 = Byte.parseByte(s);
} else {
D_DEBTWHO1 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTWHO2(String s) {
if (!s.trim().isEmpty()) {
D_DEBTWHO2 = Byte.parseByte(s);
} else {
D_DEBTWHO2 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTWHO3(String s) {
if (!s.trim().isEmpty()) {
D_DEBTWHO3 = Byte.parseByte(s);
} else {
D_DEBTWHO3 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTWHO4(String s) {
if (!s.trim().isEmpty()) {
D_DEBTWHO4 = Byte.parseByte(s);
} else {
D_DEBTWHO4 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTWHO97(String s) {
if (!s.trim().isEmpty()) {
D_DEBTWHO97 = Byte.parseByte(s);
} else {
D_DEBTWHO97 = Byte.MIN_VALUE;
}
}

protected final void initD_DEBTY(String s) {
if (!s.trim().isEmpty()) {
D_DEBTY = Integer.parseInt(s);
} else {
D_DEBTY = Integer.MIN_VALUE;
}
}

protected final void initD_DEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_DEPCHL_DV = false;
} else {
D_DEPCHL_DV = true;
}
}
}

protected final void initD_DEPENTH1(String s) {
if (!s.trim().isEmpty()) {
D_DEPENTH1 = Byte.parseByte(s);
} else {
D_DEPENTH1 = Byte.MIN_VALUE;
}
}

protected final void initD_DEPENTH2(String s) {
if (!s.trim().isEmpty()) {
D_DEPENTH2 = Byte.parseByte(s);
} else {
D_DEPENTH2 = Byte.MIN_VALUE;
}
}

protected final void initD_DEPENTH3(String s) {
if (!s.trim().isEmpty()) {
D_DEPENTH3 = Byte.parseByte(s);
} else {
D_DEPENTH3 = Byte.MIN_VALUE;
}
}

protected final void initD_DEPENTH4(String s) {
if (!s.trim().isEmpty()) {
D_DEPENTH4 = Byte.parseByte(s);
} else {
D_DEPENTH4 = Byte.MIN_VALUE;
}
}

protected final void initD_DEPENTH5(String s) {
if (!s.trim().isEmpty()) {
D_DEPENTH5 = Byte.parseByte(s);
} else {
D_DEPENTH5 = Byte.MIN_VALUE;
}
}

protected final void initD_DEPENTH6(String s) {
if (!s.trim().isEmpty()) {
D_DEPENTH6 = Byte.parseByte(s);
} else {
D_DEPENTH6 = Byte.MIN_VALUE;
}
}

protected final void initD_DETINC1(String s) {
if (!s.trim().isEmpty()) {
D_DETINC1 = Byte.parseByte(s);
} else {
D_DETINC1 = Byte.MIN_VALUE;
}
}

protected final void initD_DETINC2(String s) {
if (!s.trim().isEmpty()) {
D_DETINC2 = Byte.parseByte(s);
} else {
D_DETINC2 = Byte.MIN_VALUE;
}
}

protected final void initD_DETINC3(String s) {
if (!s.trim().isEmpty()) {
D_DETINC3 = Byte.parseByte(s);
} else {
D_DETINC3 = Byte.MIN_VALUE;
}
}

protected final void initD_DETINC4(String s) {
if (!s.trim().isEmpty()) {
D_DETINC4 = Byte.parseByte(s);
} else {
D_DETINC4 = Byte.MIN_VALUE;
}
}

protected final void initD_DETINC5(String s) {
if (!s.trim().isEmpty()) {
D_DETINC5 = Byte.parseByte(s);
} else {
D_DETINC5 = Byte.MIN_VALUE;
}
}

protected final void initD_DETINC6(String s) {
if (!s.trim().isEmpty()) {
D_DETINC6 = Byte.parseByte(s);
} else {
D_DETINC6 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF1(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF1 = Byte.parseByte(s);
} else {
D_DISDIF1 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF10(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF10 = Byte.parseByte(s);
} else {
D_DISDIF10 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF11(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF11 = Byte.parseByte(s);
} else {
D_DISDIF11 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF12(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF12 = Byte.parseByte(s);
} else {
D_DISDIF12 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF2(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF2 = Byte.parseByte(s);
} else {
D_DISDIF2 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF3(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF3 = Byte.parseByte(s);
} else {
D_DISDIF3 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF4(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF4 = Byte.parseByte(s);
} else {
D_DISDIF4 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF5(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF5 = Byte.parseByte(s);
} else {
D_DISDIF5 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF6(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF6 = Byte.parseByte(s);
} else {
D_DISDIF6 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF7(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF7 = Byte.parseByte(s);
} else {
D_DISDIF7 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF8(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF8 = Byte.parseByte(s);
} else {
D_DISDIF8 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF9(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF9 = Byte.parseByte(s);
} else {
D_DISDIF9 = Byte.MIN_VALUE;
}
}

protected final void initD_DISDIF96(String s) {
if (!s.trim().isEmpty()) {
D_DISDIF96 = Byte.parseByte(s);
} else {
D_DISDIF96 = Byte.MIN_VALUE;
}
}

protected final void initD_DIVCHK1(String s) {
if (!s.trim().isEmpty()) {
D_DIVCHK1 = Byte.parseByte(s);
} else {
D_DIVCHK1 = Byte.MIN_VALUE;
}
}

protected final void initD_DIVCHK2(String s) {
if (!s.trim().isEmpty()) {
D_DIVCHK2 = Byte.parseByte(s);
} else {
D_DIVCHK2 = Byte.MIN_VALUE;
}
}

protected final void initD_DIVCHK3(String s) {
if (!s.trim().isEmpty()) {
D_DIVCHK3 = Byte.parseByte(s);
} else {
D_DIVCHK3 = Byte.MIN_VALUE;
}
}

protected final void initD_DIVFIN1(String s) {
if (!s.trim().isEmpty()) {
D_DIVFIN1 = Byte.parseByte(s);
} else {
D_DIVFIN1 = Byte.MIN_VALUE;
}
}

protected final void initD_DIVFIN2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_DIVFIN2 = false;
} else {
D_DIVFIN2 = true;
}
}
}

protected final void initD_DIVFIN3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_DIVFIN3 = false;
} else {
D_DIVFIN3 = true;
}
}
}

protected final void initD_DKLM(String s) {
if (!s.trim().isEmpty()) {
D_DKLM = Byte.parseByte(s);
} else {
D_DKLM = Byte.MIN_VALUE;
}
}

protected final void initD_DOBY_DV(String s) {
if (!s.trim().isEmpty()) {
D_DOBY_DV = Short.parseShort(s);
} else {
D_DOBY_DV = Short.MIN_VALUE;
}
}

protected final void initD_DONEPROXY(String s) {
if (!s.trim().isEmpty()) {
D_DONEPROXY = Byte.parseByte(s);
} else {
D_DONEPROXY = Byte.MIN_VALUE;
}
}

protected final void initD_DRGMJ(String s) {
if (!s.trim().isEmpty()) {
D_DRGMJ = Byte.parseByte(s);
} else {
D_DRGMJ = Byte.MIN_VALUE;
}
}

protected final void initD_DRGOTH(String s) {
if (!s.trim().isEmpty()) {
D_DRGOTH = Byte.parseByte(s);
} else {
D_DRGOTH = Byte.MIN_VALUE;
}
}

protected final void initD_DRGSOL(String s) {
if (!s.trim().isEmpty()) {
D_DRGSOL = Byte.parseByte(s);
} else {
D_DRGSOL = Byte.MIN_VALUE;
}
}

protected final void initD_DRIVE(String s) {
if (!s.trim().isEmpty()) {
D_DRIVE = Byte.parseByte(s);
} else {
D_DRIVE = Byte.MIN_VALUE;
}
}

protected final void initD_DRNK4W(String s) {
if (!s.trim().isEmpty()) {
D_DRNK4W = Byte.parseByte(s);
} else {
D_DRNK4W = Byte.MIN_VALUE;
}
}

protected final void initD_DVAGE(String s) {
if (!s.trim().isEmpty()) {
D_DVAGE = Byte.parseByte(s);
} else {
D_DVAGE = Byte.MIN_VALUE;
}
}

protected final void initD_DVM1(String s) {
if (!s.trim().isEmpty()) {
D_DVM1 = Byte.parseByte(s);
} else {
D_DVM1 = Byte.MIN_VALUE;
}
}

protected final void initD_DVM2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_DVM2 = false;
} else {
D_DVM2 = true;
}
}
}

protected final void initD_DVM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_DVM3 = false;
} else {
D_DVM3 = true;
}
}
}

protected final void initD_DVY41(String s) {
if (!s.trim().isEmpty()) {
D_DVY41 = Short.parseShort(s);
} else {
D_DVY41 = Short.MIN_VALUE;
}
}

protected final void initD_DVY42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_DVY42 = false;
} else {
D_DVY42 = true;
}
}
}

protected final void initD_DVY43(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_DVY43 = false;
} else {
D_DVY43 = true;
}
}
}

protected final void initD_EATLIVU(String s) {
if (!s.trim().isEmpty()) {
D_EATLIVU = Byte.parseByte(s);
} else {
D_EATLIVU = Byte.MIN_VALUE;
}
}

protected final void initD_EDASP(String s) {
if (!s.trim().isEmpty()) {
D_EDASP = Byte.parseByte(s);
} else {
D_EDASP = Byte.MIN_VALUE;
}
}

protected final void initD_EDLINK(String s) {
if (!s.trim().isEmpty()) {
D_EDLINK = Byte.parseByte(s);
} else {
D_EDLINK = Byte.MIN_VALUE;
}
}

protected final void initD_EDLINKCONF(String s) {
if (!s.trim().isEmpty()) {
D_EDLINKCONF = Byte.parseByte(s);
} else {
D_EDLINKCONF = Byte.MIN_VALUE;
}
}

protected final void initD_EDLINKCONFB(String s) {
if (!s.trim().isEmpty()) {
D_EDLINKCONFB = Byte.parseByte(s);
} else {
D_EDLINKCONFB = Byte.MIN_VALUE;
}
}

protected final void initD_EDLINKKIDE(String s) {
if (!s.trim().isEmpty()) {
D_EDLINKKIDE = Byte.parseByte(s);
} else {
D_EDLINKKIDE = Byte.MIN_VALUE;
}
}

protected final void initD_EDLINKKIDSWN(String s) {
if (!s.trim().isEmpty()) {
D_EDLINKKIDSWN = Byte.parseByte(s);
} else {
D_EDLINKKIDSWN = Byte.MIN_VALUE;
}
}

protected final void initD_EDTYPE(String s) {
if (!s.trim().isEmpty()) {
D_EDTYPE = Byte.parseByte(s);
} else {
D_EDTYPE = Byte.MIN_VALUE;
}
}

protected final void initD_EDUCATION(String s) {
if (!s.trim().isEmpty()) {
D_EDUCATION = Byte.parseByte(s);
} else {
D_EDUCATION = Byte.MIN_VALUE;
}
}

protected final void initD_EDUCISGN(String s) {
if (!s.trim().isEmpty()) {
D_EDUCISGN = Byte.parseByte(s);
} else {
D_EDUCISGN = Byte.MIN_VALUE;
}
}

protected final void initD_EDUCLINKB1(String s) {
if (!s.trim().isEmpty()) {
D_EDUCLINKB1 = Byte.parseByte(s);
} else {
D_EDUCLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initD_EDUCLINKB2(String s) {
if (!s.trim().isEmpty()) {
D_EDUCLINKB2 = Byte.parseByte(s);
} else {
D_EDUCLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initD_EDUCLINKB3(String s) {
if (!s.trim().isEmpty()) {
D_EDUCLINKB3 = Byte.parseByte(s);
} else {
D_EDUCLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initD_EDUCRECD(String s) {
if (!s.trim().isEmpty()) {
D_EDUCRECD = Byte.parseByte(s);
} else {
D_EDUCRECD = Byte.MIN_VALUE;
}
}

protected final void initD_EDUCRSGN(String s) {
if (!s.trim().isEmpty()) {
D_EDUCRSGN = Byte.parseByte(s);
} else {
D_EDUCRSGN = Byte.MIN_VALUE;
}
}

protected final void initD_EDUCSN(String s) {
if (!s.trim().isEmpty()) {
D_EDUCSN = Byte.parseByte(s);
} else {
D_EDUCSN = Byte.MIN_VALUE;
}
}

protected final void initD_EMPCHK(String s) {
if (!s.trim().isEmpty()) {
D_EMPCHK = Byte.parseByte(s);
} else {
D_EMPCHK = Byte.MIN_VALUE;
}
}

protected final void initD_EMPLOY(String s) {
if (!s.trim().isEmpty()) {
D_EMPLOY = Byte.parseByte(s);
} else {
D_EMPLOY = Byte.MIN_VALUE;
}
}

protected final void initD_EMPSTENDD(String s) {
if (!s.trim().isEmpty()) {
D_EMPSTENDD = Byte.parseByte(s);
} else {
D_EMPSTENDD = Byte.MIN_VALUE;
}
}

protected final void initD_EMPSTENDM(String s) {
if (!s.trim().isEmpty()) {
D_EMPSTENDM = Byte.parseByte(s);
} else {
D_EMPSTENDM = Byte.MIN_VALUE;
}
}

protected final void initD_EMPSTENDY4(String s) {
if (!s.trim().isEmpty()) {
D_EMPSTENDY4 = Short.parseShort(s);
} else {
D_EMPSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initD_ENDMNTH1(String s) {
if (!s.trim().isEmpty()) {
D_ENDMNTH1 = Byte.parseByte(s);
} else {
D_ENDMNTH1 = Byte.MIN_VALUE;
}
}

protected final void initD_ENDMNTH2(String s) {
if (!s.trim().isEmpty()) {
D_ENDMNTH2 = Byte.parseByte(s);
} else {
D_ENDMNTH2 = Byte.MIN_VALUE;
}
}

protected final void initD_ENDMNTH3(String s) {
if (!s.trim().isEmpty()) {
D_ENDMNTH3 = Byte.parseByte(s);
} else {
D_ENDMNTH3 = Byte.MIN_VALUE;
}
}

protected final void initD_ENDMNTH4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_ENDMNTH4 = false;
} else {
D_ENDMNTH4 = true;
}
}
}

protected final void initD_ENVHABIT1(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT1 = Byte.parseByte(s);
} else {
D_ENVHABIT1 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT10(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT10 = Byte.parseByte(s);
} else {
D_ENVHABIT10 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT11(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT11 = Byte.parseByte(s);
} else {
D_ENVHABIT11 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT2(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT2 = Byte.parseByte(s);
} else {
D_ENVHABIT2 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT3(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT3 = Byte.parseByte(s);
} else {
D_ENVHABIT3 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT4(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT4 = Byte.parseByte(s);
} else {
D_ENVHABIT4 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT5(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT5 = Byte.parseByte(s);
} else {
D_ENVHABIT5 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT6(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT6 = Byte.parseByte(s);
} else {
D_ENVHABIT6 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT7(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT7 = Byte.parseByte(s);
} else {
D_ENVHABIT7 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT8(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT8 = Byte.parseByte(s);
} else {
D_ENVHABIT8 = Byte.MIN_VALUE;
}
}

protected final void initD_ENVHABIT9(String s) {
if (!s.trim().isEmpty()) {
D_ENVHABIT9 = Byte.parseByte(s);
} else {
D_ENVHABIT9 = Byte.MIN_VALUE;
}
}

protected final void initD_EPROSH(String s) {
if (!s.trim().isEmpty()) {
D_EPROSH = Byte.parseByte(s);
} else {
D_EPROSH = Byte.MIN_VALUE;
}
}

protected final void initD_ETHN_DV(String s) {
if (!s.trim().isEmpty()) {
D_ETHN_DV = Byte.parseByte(s);
} else {
D_ETHN_DV = Byte.MIN_VALUE;
}
}

protected final void initD_EVRALC(String s) {
if (!s.trim().isEmpty()) {
D_EVRALC = Byte.parseByte(s);
} else {
D_EVRALC = Byte.MIN_VALUE;
}
}

protected final void initD_EVRSMO(String s) {
if (!s.trim().isEmpty()) {
D_EVRSMO = Byte.parseByte(s);
} else {
D_EVRSMO = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE1(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE1 = Byte.parseByte(s);
} else {
D_EXPMANAGE1 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE10(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE10 = Byte.parseByte(s);
} else {
D_EXPMANAGE10 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE11(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE11 = Byte.parseByte(s);
} else {
D_EXPMANAGE11 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE2(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE2 = Byte.parseByte(s);
} else {
D_EXPMANAGE2 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE3(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE3 = Byte.parseByte(s);
} else {
D_EXPMANAGE3 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE4(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE4 = Byte.parseByte(s);
} else {
D_EXPMANAGE4 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE5(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE5 = Byte.parseByte(s);
} else {
D_EXPMANAGE5 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE6(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE6 = Byte.parseByte(s);
} else {
D_EXPMANAGE6 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE7(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE7 = Byte.parseByte(s);
} else {
D_EXPMANAGE7 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE8(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE8 = Byte.parseByte(s);
} else {
D_EXPMANAGE8 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE9(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE9 = Byte.parseByte(s);
} else {
D_EXPMANAGE9 = Byte.MIN_VALUE;
}
}

protected final void initD_EXPMANAGE97(String s) {
if (!s.trim().isEmpty()) {
D_EXPMANAGE97 = Byte.parseByte(s);
} else {
D_EXPMANAGE97 = Byte.MIN_VALUE;
}
}

protected final void initD_EXTNSA(String s) {
if (!s.trim().isEmpty()) {
D_EXTNSA = Byte.parseByte(s);
} else {
D_EXTNSA = Byte.MIN_VALUE;
}
}

protected final void initD_EXTRATE(String s) {
if (!s.trim().isEmpty()) {
D_EXTRATE = Double.parseDouble(s);
} else {
D_EXTRATE = Double.NaN;
}
}

protected final void initD_EXTREST(String s) {
if (!s.trim().isEmpty()) {
D_EXTREST = Byte.parseByte(s);
} else {
D_EXTREST = Byte.MIN_VALUE;
}
}

protected final void initD_FAMILY(String s) {
if (!s.trim().isEmpty()) {
D_FAMILY = Byte.parseByte(s);
} else {
D_FAMILY = Byte.MIN_VALUE;
}
}

protected final void initD_FAMSUP(String s) {
if (!s.trim().isEmpty()) {
D_FAMSUP = Byte.parseByte(s);
} else {
D_FAMSUP = Byte.MIN_VALUE;
}
}

protected final void initD_FATHER(String s) {
if (!s.trim().isEmpty()) {
D_FATHER = Byte.parseByte(s);
} else {
D_FATHER = Byte.MIN_VALUE;
}
}

protected final void initD_FEEND(String s) {
if (!s.trim().isEmpty()) {
D_FEEND = Byte.parseByte(s);
} else {
D_FEEND = Byte.MIN_VALUE;
}
}

protected final void initD_FENOW(String s) {
if (!s.trim().isEmpty()) {
D_FENOW = Byte.parseByte(s);
} else {
D_FENOW = Byte.MIN_VALUE;
}
}

protected final void initD_FFBRFEDLW(String s) {
if (!s.trim().isEmpty()) {
D_FFBRFEDLW = Byte.parseByte(s);
} else {
D_FFBRFEDLW = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE01(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE01 = Byte.parseByte(s);
} else {
D_FF_BENTYPE01 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE02(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE02 = Byte.parseByte(s);
} else {
D_FF_BENTYPE02 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE03(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE03 = Byte.parseByte(s);
} else {
D_FF_BENTYPE03 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE04(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE04 = Byte.parseByte(s);
} else {
D_FF_BENTYPE04 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE05(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE05 = Byte.parseByte(s);
} else {
D_FF_BENTYPE05 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE06(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE06 = Byte.parseByte(s);
} else {
D_FF_BENTYPE06 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE07(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE07 = Byte.parseByte(s);
} else {
D_FF_BENTYPE07 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE08(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE08 = Byte.parseByte(s);
} else {
D_FF_BENTYPE08 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE09(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE09 = Byte.parseByte(s);
} else {
D_FF_BENTYPE09 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE10(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE10 = Byte.parseByte(s);
} else {
D_FF_BENTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE11(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE11 = Byte.parseByte(s);
} else {
D_FF_BENTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE12(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE12 = Byte.parseByte(s);
} else {
D_FF_BENTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE13(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE13 = Byte.parseByte(s);
} else {
D_FF_BENTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE14(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE14 = Byte.parseByte(s);
} else {
D_FF_BENTYPE14 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE15(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE15 = Byte.parseByte(s);
} else {
D_FF_BENTYPE15 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE16(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE16 = Byte.parseByte(s);
} else {
D_FF_BENTYPE16 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE17(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE17 = Byte.parseByte(s);
} else {
D_FF_BENTYPE17 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE18(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE18 = Byte.parseByte(s);
} else {
D_FF_BENTYPE18 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE19(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE19 = Byte.parseByte(s);
} else {
D_FF_BENTYPE19 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE20(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE20 = Byte.parseByte(s);
} else {
D_FF_BENTYPE20 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE21(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE21 = Byte.parseByte(s);
} else {
D_FF_BENTYPE21 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE22(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE22 = Byte.parseByte(s);
} else {
D_FF_BENTYPE22 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE23(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE23 = Byte.parseByte(s);
} else {
D_FF_BENTYPE23 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE24(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE24 = Byte.parseByte(s);
} else {
D_FF_BENTYPE24 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE25(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE25 = Byte.parseByte(s);
} else {
D_FF_BENTYPE25 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE26(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE26 = Byte.parseByte(s);
} else {
D_FF_BENTYPE26 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE27(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE27 = Byte.parseByte(s);
} else {
D_FF_BENTYPE27 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE28(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE28 = Byte.parseByte(s);
} else {
D_FF_BENTYPE28 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE29(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE29 = Byte.parseByte(s);
} else {
D_FF_BENTYPE29 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE30(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE30 = Byte.parseByte(s);
} else {
D_FF_BENTYPE30 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE31(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE31 = Byte.parseByte(s);
} else {
D_FF_BENTYPE31 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE32(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE32 = Byte.parseByte(s);
} else {
D_FF_BENTYPE32 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE33(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE33 = Byte.parseByte(s);
} else {
D_FF_BENTYPE33 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE34(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE34 = Byte.parseByte(s);
} else {
D_FF_BENTYPE34 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE35(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE35 = Byte.parseByte(s);
} else {
D_FF_BENTYPE35 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE36(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE36 = Byte.parseByte(s);
} else {
D_FF_BENTYPE36 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE37(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE37 = Byte.parseByte(s);
} else {
D_FF_BENTYPE37 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE38(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE38 = Byte.parseByte(s);
} else {
D_FF_BENTYPE38 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_BENTYPE39(String s) {
if (!s.trim().isEmpty()) {
D_FF_BENTYPE39 = Byte.parseByte(s);
} else {
D_FF_BENTYPE39 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_EMPLW(String s) {
if (!s.trim().isEmpty()) {
D_FF_EMPLW = Byte.parseByte(s);
} else {
D_FF_EMPLW = Byte.MIN_VALUE;
}
}

protected final void initD_FF_EVERINT(String s) {
if (!s.trim().isEmpty()) {
D_FF_EVERINT = Byte.parseByte(s);
} else {
D_FF_EVERINT = Byte.MIN_VALUE;
}
}

protected final void initD_FF_IVINTLANG(String s) {
if (!s.trim().isEmpty()) {
D_FF_IVINTLANG = Byte.parseByte(s);
} else {
D_FF_IVINTLANG = Byte.MIN_VALUE;
}
}

protected final void initD_FF_IVLOLW(String s) {
if (!s.trim().isEmpty()) {
D_FF_IVLOLW = Byte.parseByte(s);
} else {
D_FF_IVLOLW = Byte.MIN_VALUE;
}
}

protected final void initD_FF_JBMNGR(String s) {
if (!s.trim().isEmpty()) {
D_FF_JBMNGR = Byte.parseByte(s);
} else {
D_FF_JBMNGR = Byte.MIN_VALUE;
}
}

protected final void initD_FF_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
D_FF_JBSEMP = Byte.parseByte(s);
} else {
D_FF_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initD_FF_JBSIZE(String s) {
if (!s.trim().isEmpty()) {
D_FF_JBSIZE = Byte.parseByte(s);
} else {
D_FF_JBSIZE = Byte.MIN_VALUE;
}
}

protected final void initD_FF_JBSTAT(String s) {
if (!s.trim().isEmpty()) {
D_FF_JBSTAT = Byte.parseByte(s);
} else {
D_FF_JBSTAT = Byte.MIN_VALUE;
}
}

protected final void initD_FF_OPRLG(String s) {
if (!s.trim().isEmpty()) {
D_FF_OPRLG = Byte.parseByte(s);
} else {
D_FF_OPRLG = Byte.MIN_VALUE;
}
}

protected final void initD_FF_OPRLG0(String s) {
if (!s.trim().isEmpty()) {
D_FF_OPRLG0 = Byte.parseByte(s);
} else {
D_FF_OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initD_FF_OPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
D_FF_OPRLG0NI = Byte.parseByte(s);
} else {
D_FF_OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initD_FF_TEL(String s) {
if (!s.trim().isEmpty()) {
D_FF_TEL = Byte.parseByte(s);
} else {
D_FF_TEL = Byte.MIN_VALUE;
}
}

protected final void initD_FF_UKBORN(String s) {
if (!s.trim().isEmpty()) {
D_FF_UKBORN = Byte.parseByte(s);
} else {
D_FF_UKBORN = Byte.MIN_VALUE;
}
}

protected final void initD_FF_YR2UK4(String s) {
if (!s.trim().isEmpty()) {
D_FF_YR2UK4 = Short.parseShort(s);
} else {
D_FF_YR2UK4 = Short.MIN_VALUE;
}
}

protected final void initD_FIBENOTHR_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIBENOTHR_DV = Double.parseDouble(s);
} else {
D_FIBENOTHR_DV = Double.NaN;
}
}

protected final void initD_FIBENOTHR_IF(String s) {
if (!s.trim().isEmpty()) {
D_FIBENOTHR_IF = Double.parseDouble(s);
} else {
D_FIBENOTHR_IF = Double.NaN;
}
}

protected final void initD_FIBENOTHR_TC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_FIBENOTHR_TC = false;
} else {
D_FIBENOTHR_TC = true;
}
}
}

protected final void initD_FIMNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIMNGRS_DV = Double.parseDouble(s);
} else {
D_FIMNGRS_DV = Double.NaN;
}
}

protected final void initD_FIMNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
D_FIMNGRS_IF = Double.parseDouble(s);
} else {
D_FIMNGRS_IF = Double.NaN;
}
}

protected final void initD_FIMNGRS_TC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_FIMNGRS_TC = false;
} else {
D_FIMNGRS_TC = true;
}
}
}

protected final void initD_FIMNINVNET_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIMNINVNET_DV = Double.parseDouble(s);
} else {
D_FIMNINVNET_DV = Double.NaN;
}
}

protected final void initD_FIMNLABGRS_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIMNLABGRS_DV = Double.parseDouble(s);
} else {
D_FIMNLABGRS_DV = Double.NaN;
}
}

protected final void initD_FIMNLABGRS_IF(String s) {
if (!s.trim().isEmpty()) {
D_FIMNLABGRS_IF = Double.parseDouble(s);
} else {
D_FIMNLABGRS_IF = Double.NaN;
}
}

protected final void initD_FIMNLABGRS_TC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_FIMNLABGRS_TC = false;
} else {
D_FIMNLABGRS_TC = true;
}
}
}

protected final void initD_FIMNLABNET_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIMNLABNET_DV = Double.parseDouble(s);
} else {
D_FIMNLABNET_DV = Double.NaN;
}
}

protected final void initD_FIMNLABNET_TC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_FIMNLABNET_TC = false;
} else {
D_FIMNLABNET_TC = true;
}
}
}

protected final void initD_FIMNMISC_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIMNMISC_DV = Double.parseDouble(s);
} else {
D_FIMNMISC_DV = Double.NaN;
}
}

protected final void initD_FIMNNET_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIMNNET_DV = Double.parseDouble(s);
} else {
D_FIMNNET_DV = Double.NaN;
}
}

protected final void initD_FIMNPEN_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIMNPEN_DV = Double.parseDouble(s);
} else {
D_FIMNPEN_DV = Double.NaN;
}
}

protected final void initD_FIMNPRBEN_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIMNPRBEN_DV = Double.parseDouble(s);
} else {
D_FIMNPRBEN_DV = Double.NaN;
}
}

protected final void initD_FIMNSBEN_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIMNSBEN_DV = Double.parseDouble(s);
} else {
D_FIMNSBEN_DV = Double.NaN;
}
}

protected final void initD_FINFUT(String s) {
if (!s.trim().isEmpty()) {
D_FINFUT = Byte.parseByte(s);
} else {
D_FINFUT = Byte.MIN_VALUE;
}
}

protected final void initD_FINNOW(String s) {
if (!s.trim().isEmpty()) {
D_FINNOW = Byte.parseByte(s);
} else {
D_FINNOW = Byte.MIN_VALUE;
}
}

protected final void initD_FIVEALCDR(String s) {
if (!s.trim().isEmpty()) {
D_FIVEALCDR = Byte.parseByte(s);
} else {
D_FIVEALCDR = Byte.MIN_VALUE;
}
}

protected final void initD_FIYRDB1(String s) {
if (!s.trim().isEmpty()) {
D_FIYRDB1 = Byte.parseByte(s);
} else {
D_FIYRDB1 = Byte.MIN_VALUE;
}
}

protected final void initD_FIYRDB2(String s) {
if (!s.trim().isEmpty()) {
D_FIYRDB2 = Byte.parseByte(s);
} else {
D_FIYRDB2 = Byte.MIN_VALUE;
}
}

protected final void initD_FIYRDB3(String s) {
if (!s.trim().isEmpty()) {
D_FIYRDB3 = Byte.parseByte(s);
} else {
D_FIYRDB3 = Byte.MIN_VALUE;
}
}

protected final void initD_FIYRDB4(String s) {
if (!s.trim().isEmpty()) {
D_FIYRDB4 = Byte.parseByte(s);
} else {
D_FIYRDB4 = Byte.MIN_VALUE;
}
}

protected final void initD_FIYRDB5(String s) {
if (!s.trim().isEmpty()) {
D_FIYRDB5 = Byte.parseByte(s);
} else {
D_FIYRDB5 = Byte.MIN_VALUE;
}
}

protected final void initD_FIYRDB6(String s) {
if (!s.trim().isEmpty()) {
D_FIYRDB6 = Byte.parseByte(s);
} else {
D_FIYRDB6 = Byte.MIN_VALUE;
}
}

protected final void initD_FIYRDIA(String s) {
if (!s.trim().isEmpty()) {
D_FIYRDIA = Integer.parseInt(s);
} else {
D_FIYRDIA = Integer.MIN_VALUE;
}
}

protected final void initD_FIYRINVINC_DV(String s) {
if (!s.trim().isEmpty()) {
D_FIYRINVINC_DV = Double.parseDouble(s);
} else {
D_FIYRINVINC_DV = Double.NaN;
}
}

protected final void initD_FIYRINVINC_IF(String s) {
if (!s.trim().isEmpty()) {
D_FIYRINVINC_IF = Byte.parseByte(s);
} else {
D_FIYRINVINC_IF = Byte.MIN_VALUE;
}
}

protected final void initD_FIYRINVINC_TC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_FIYRINVINC_TC = false;
} else {
D_FIYRINVINC_TC = true;
}
}
}

protected final void initD_FLAGLINKB1(String s) {
if (!s.trim().isEmpty()) {
D_FLAGLINKB1 = Byte.parseByte(s);
} else {
D_FLAGLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initD_FLAGLINKB2(String s) {
if (!s.trim().isEmpty()) {
D_FLAGLINKB2 = Byte.parseByte(s);
} else {
D_FLAGLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initD_FLAGLINKB3(String s) {
if (!s.trim().isEmpty()) {
D_FLAGLINKB3 = Byte.parseByte(s);
} else {
D_FLAGLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initD_FLYES1(String s) {
if (!s.trim().isEmpty()) {
D_FLYES1 = Byte.parseByte(s);
} else {
D_FLYES1 = Byte.MIN_VALUE;
}
}

protected final void initD_FLYES2(String s) {
if (!s.trim().isEmpty()) {
D_FLYES2 = Byte.parseByte(s);
} else {
D_FLYES2 = Byte.MIN_VALUE;
}
}

protected final void initD_FLYES3(String s) {
if (!s.trim().isEmpty()) {
D_FLYES3 = Byte.parseByte(s);
} else {
D_FLYES3 = Byte.MIN_VALUE;
}
}

protected final void initD_FLYES4(String s) {
if (!s.trim().isEmpty()) {
D_FLYES4 = Byte.parseByte(s);
} else {
D_FLYES4 = Byte.MIN_VALUE;
}
}

protected final void initD_FNPID(String s) {
if (!s.trim().isEmpty()) {
D_FNPID = Integer.parseInt(s);
} else {
D_FNPID = Integer.MIN_VALUE;
}
}

protected final void initD_FNPNO(String s) {
if (!s.trim().isEmpty()) {
D_FNPNO = Byte.parseByte(s);
} else {
D_FNPNO = Byte.MIN_VALUE;
}
}

protected final void initD_FNSPID(String s) {
if (!s.trim().isEmpty()) {
D_FNSPID = Integer.parseInt(s);
} else {
D_FNSPID = Integer.MIN_VALUE;
}
}

protected final void initD_FNSPNO(String s) {
if (!s.trim().isEmpty()) {
D_FNSPNO = Byte.parseByte(s);
} else {
D_FNSPNO = Byte.MIN_VALUE;
}
}

protected final void initD_FRDRG(String s) {
if (!s.trim().isEmpty()) {
D_FRDRG = Byte.parseByte(s);
} else {
D_FRDRG = Byte.MIN_VALUE;
}
}

protected final void initD_FT2ENDM1(String s) {
if (!s.trim().isEmpty()) {
D_FT2ENDM1 = Byte.parseByte(s);
} else {
D_FT2ENDM1 = Byte.MIN_VALUE;
}
}

protected final void initD_FT2ENDM2(String s) {
if (!s.trim().isEmpty()) {
D_FT2ENDM2 = Byte.parseByte(s);
} else {
D_FT2ENDM2 = Byte.MIN_VALUE;
}
}

protected final void initD_FT2ENDY41(String s) {
if (!s.trim().isEmpty()) {
D_FT2ENDY41 = Short.parseShort(s);
} else {
D_FT2ENDY41 = Short.MIN_VALUE;
}
}

protected final void initD_FT2ENDY42(String s) {
if (!s.trim().isEmpty()) {
D_FT2ENDY42 = Short.parseShort(s);
} else {
D_FT2ENDY42 = Short.MIN_VALUE;
}
}

protected final void initD_FTEDANY(String s) {
if (!s.trim().isEmpty()) {
D_FTEDANY = Byte.parseByte(s);
} else {
D_FTEDANY = Byte.MIN_VALUE;
}
}

protected final void initD_FTEDEND1(String s) {
if (!s.trim().isEmpty()) {
D_FTEDEND1 = Byte.parseByte(s);
} else {
D_FTEDEND1 = Byte.MIN_VALUE;
}
}

protected final void initD_FTEDEND2(String s) {
if (!s.trim().isEmpty()) {
D_FTEDEND2 = Byte.parseByte(s);
} else {
D_FTEDEND2 = Byte.MIN_VALUE;
}
}

protected final void initD_FTEDMOR1(String s) {
if (!s.trim().isEmpty()) {
D_FTEDMOR1 = Byte.parseByte(s);
} else {
D_FTEDMOR1 = Byte.MIN_VALUE;
}
}

protected final void initD_FTEDMOR2(String s) {
if (!s.trim().isEmpty()) {
D_FTEDMOR2 = Byte.parseByte(s);
} else {
D_FTEDMOR2 = Byte.MIN_VALUE;
}
}

protected final void initD_FTEDSTARTM1(String s) {
if (!s.trim().isEmpty()) {
D_FTEDSTARTM1 = Byte.parseByte(s);
} else {
D_FTEDSTARTM1 = Byte.MIN_VALUE;
}
}

protected final void initD_FTEDSTARTM2(String s) {
if (!s.trim().isEmpty()) {
D_FTEDSTARTM2 = Byte.parseByte(s);
} else {
D_FTEDSTARTM2 = Byte.MIN_VALUE;
}
}

protected final void initD_FTEDSTARTY41(String s) {
if (!s.trim().isEmpty()) {
D_FTEDSTARTY41 = Short.parseShort(s);
} else {
D_FTEDSTARTY41 = Short.MIN_VALUE;
}
}

protected final void initD_FTEDSTARTY42(String s) {
if (!s.trim().isEmpty()) {
D_FTEDSTARTY42 = Short.parseShort(s);
} else {
D_FTEDSTARTY42 = Short.MIN_VALUE;
}
}

protected final void initD_FTENDM(String s) {
if (!s.trim().isEmpty()) {
D_FTENDM = Byte.parseByte(s);
} else {
D_FTENDM = Byte.MIN_VALUE;
}
}

protected final void initD_FTENDY4(String s) {
if (!s.trim().isEmpty()) {
D_FTENDY4 = Short.parseShort(s);
} else {
D_FTENDY4 = Short.MIN_VALUE;
}
}

protected final void initD_FTQUALS(String s) {
if (!s.trim().isEmpty()) {
D_FTQUALS = Byte.parseByte(s);
} else {
D_FTQUALS = Byte.MIN_VALUE;
}
}

protected final void initD_GOR_DV(String s) {
if (!s.trim().isEmpty()) {
D_GOR_DV = Byte.parseByte(s);
} else {
D_GOR_DV = Byte.MIN_VALUE;
}
}

protected final void initD_GRFPID(String s) {
if (!s.trim().isEmpty()) {
D_GRFPID = Integer.parseInt(s);
} else {
D_GRFPID = Integer.MIN_VALUE;
}
}

protected final void initD_GRFPNO(String s) {
if (!s.trim().isEmpty()) {
D_GRFPNO = Byte.parseByte(s);
} else {
D_GRFPNO = Byte.MIN_VALUE;
}
}

protected final void initD_GRMPID(String s) {
if (!s.trim().isEmpty()) {
D_GRMPID = Integer.parseInt(s);
} else {
D_GRMPID = Integer.MIN_VALUE;
}
}

protected final void initD_GRMPNO(String s) {
if (!s.trim().isEmpty()) {
D_GRMPNO = Byte.parseByte(s);
} else {
D_GRMPNO = Byte.MIN_VALUE;
}
}

protected final void initD_HASCURR(String s) {
if (!s.trim().isEmpty()) {
D_HASCURR = Byte.parseByte(s);
} else {
D_HASCURR = Byte.MIN_VALUE;
}
}

protected final void initD_HASEMAIL(String s) {
if (!s.trim().isEmpty()) {
D_HASEMAIL = Byte.parseByte(s);
} else {
D_HASEMAIL = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND1(String s) {
if (!s.trim().isEmpty()) {
D_HCOND1 = Byte.parseByte(s);
} else {
D_HCOND1 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND10(String s) {
if (!s.trim().isEmpty()) {
D_HCOND10 = Byte.parseByte(s);
} else {
D_HCOND10 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND11(String s) {
if (!s.trim().isEmpty()) {
D_HCOND11 = Byte.parseByte(s);
} else {
D_HCOND11 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND12(String s) {
if (!s.trim().isEmpty()) {
D_HCOND12 = Byte.parseByte(s);
} else {
D_HCOND12 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND13(String s) {
if (!s.trim().isEmpty()) {
D_HCOND13 = Byte.parseByte(s);
} else {
D_HCOND13 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND14(String s) {
if (!s.trim().isEmpty()) {
D_HCOND14 = Byte.parseByte(s);
} else {
D_HCOND14 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND15(String s) {
if (!s.trim().isEmpty()) {
D_HCOND15 = Byte.parseByte(s);
} else {
D_HCOND15 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND16(String s) {
if (!s.trim().isEmpty()) {
D_HCOND16 = Byte.parseByte(s);
} else {
D_HCOND16 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND17(String s) {
if (!s.trim().isEmpty()) {
D_HCOND17 = Byte.parseByte(s);
} else {
D_HCOND17 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND2(String s) {
if (!s.trim().isEmpty()) {
D_HCOND2 = Byte.parseByte(s);
} else {
D_HCOND2 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND3(String s) {
if (!s.trim().isEmpty()) {
D_HCOND3 = Byte.parseByte(s);
} else {
D_HCOND3 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND4(String s) {
if (!s.trim().isEmpty()) {
D_HCOND4 = Byte.parseByte(s);
} else {
D_HCOND4 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND5(String s) {
if (!s.trim().isEmpty()) {
D_HCOND5 = Byte.parseByte(s);
} else {
D_HCOND5 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND6(String s) {
if (!s.trim().isEmpty()) {
D_HCOND6 = Byte.parseByte(s);
} else {
D_HCOND6 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND7(String s) {
if (!s.trim().isEmpty()) {
D_HCOND7 = Byte.parseByte(s);
} else {
D_HCOND7 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND8(String s) {
if (!s.trim().isEmpty()) {
D_HCOND8 = Byte.parseByte(s);
} else {
D_HCOND8 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND9(String s) {
if (!s.trim().isEmpty()) {
D_HCOND9 = Byte.parseByte(s);
} else {
D_HCOND9 = Byte.MIN_VALUE;
}
}

protected final void initD_HCOND96(String s) {
if (!s.trim().isEmpty()) {
D_HCOND96 = Byte.parseByte(s);
} else {
D_HCOND96 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA01(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA01 = Byte.parseByte(s);
} else {
D_HCONDA01 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA02(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA02 = Byte.parseByte(s);
} else {
D_HCONDA02 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA03(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA03 = Byte.parseByte(s);
} else {
D_HCONDA03 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA04(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA04 = Byte.parseByte(s);
} else {
D_HCONDA04 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA05(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA05 = Byte.parseByte(s);
} else {
D_HCONDA05 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA06(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA06 = Byte.parseByte(s);
} else {
D_HCONDA06 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA07(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA07 = Byte.parseByte(s);
} else {
D_HCONDA07 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA08(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA08 = Byte.parseByte(s);
} else {
D_HCONDA08 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA09(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA09 = Byte.parseByte(s);
} else {
D_HCONDA09 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA10(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA10 = Byte.parseByte(s);
} else {
D_HCONDA10 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA11(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA11 = Byte.parseByte(s);
} else {
D_HCONDA11 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA12(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA12 = Byte.parseByte(s);
} else {
D_HCONDA12 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA13(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA13 = Byte.parseByte(s);
} else {
D_HCONDA13 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA14(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA14 = Byte.parseByte(s);
} else {
D_HCONDA14 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA15(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA15 = Byte.parseByte(s);
} else {
D_HCONDA15 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA16(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA16 = Byte.parseByte(s);
} else {
D_HCONDA16 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDA17(String s) {
if (!s.trim().isEmpty()) {
D_HCONDA17 = Byte.parseByte(s);
} else {
D_HCONDA17 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN1(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN1 = Byte.parseByte(s);
} else {
D_HCONDN1 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN10(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN10 = Byte.parseByte(s);
} else {
D_HCONDN10 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN11(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN11 = Byte.parseByte(s);
} else {
D_HCONDN11 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN12(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN12 = Byte.parseByte(s);
} else {
D_HCONDN12 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN13(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN13 = Byte.parseByte(s);
} else {
D_HCONDN13 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN14(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN14 = Byte.parseByte(s);
} else {
D_HCONDN14 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN15(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN15 = Byte.parseByte(s);
} else {
D_HCONDN15 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN16(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN16 = Byte.parseByte(s);
} else {
D_HCONDN16 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN17(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN17 = Byte.parseByte(s);
} else {
D_HCONDN17 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN2(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN2 = Byte.parseByte(s);
} else {
D_HCONDN2 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN3(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN3 = Byte.parseByte(s);
} else {
D_HCONDN3 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN4(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN4 = Byte.parseByte(s);
} else {
D_HCONDN4 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN5(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN5 = Byte.parseByte(s);
} else {
D_HCONDN5 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN6(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN6 = Byte.parseByte(s);
} else {
D_HCONDN6 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN7(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN7 = Byte.parseByte(s);
} else {
D_HCONDN7 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN8(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN8 = Byte.parseByte(s);
} else {
D_HCONDN8 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN9(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN9 = Byte.parseByte(s);
} else {
D_HCONDN9 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDN96(String s) {
if (!s.trim().isEmpty()) {
D_HCONDN96 = Byte.parseByte(s);
} else {
D_HCONDN96 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO1(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO1 = Byte.parseByte(s);
} else {
D_HCONDNO1 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO10(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO10 = Byte.parseByte(s);
} else {
D_HCONDNO10 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO2(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO2 = Byte.parseByte(s);
} else {
D_HCONDNO2 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO3(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO3 = Byte.parseByte(s);
} else {
D_HCONDNO3 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO4(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO4 = Byte.parseByte(s);
} else {
D_HCONDNO4 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO5(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO5 = Byte.parseByte(s);
} else {
D_HCONDNO5 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO6(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO6 = Byte.parseByte(s);
} else {
D_HCONDNO6 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO7(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO7 = Byte.parseByte(s);
} else {
D_HCONDNO7 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO8(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO8 = Byte.parseByte(s);
} else {
D_HCONDNO8 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNO9(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNO9 = Byte.parseByte(s);
} else {
D_HCONDNO9 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS1(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS1 = Byte.parseByte(s);
} else {
D_HCONDNS1 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS10(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS10 = Byte.parseByte(s);
} else {
D_HCONDNS10 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS2(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS2 = Byte.parseByte(s);
} else {
D_HCONDNS2 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS3(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS3 = Byte.parseByte(s);
} else {
D_HCONDNS3 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS4(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS4 = Byte.parseByte(s);
} else {
D_HCONDNS4 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS5(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS5 = Byte.parseByte(s);
} else {
D_HCONDNS5 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS6(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS6 = Byte.parseByte(s);
} else {
D_HCONDNS6 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS7(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS7 = Byte.parseByte(s);
} else {
D_HCONDNS7 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS8(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS8 = Byte.parseByte(s);
} else {
D_HCONDNS8 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDNS9(String s) {
if (!s.trim().isEmpty()) {
D_HCONDNS9 = Byte.parseByte(s);
} else {
D_HCONDNS9 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS01(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS01 = Byte.parseByte(s);
} else {
D_HCONDS01 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS02(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS02 = Byte.parseByte(s);
} else {
D_HCONDS02 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS03(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS03 = Byte.parseByte(s);
} else {
D_HCONDS03 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS04(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS04 = Byte.parseByte(s);
} else {
D_HCONDS04 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS05(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS05 = Byte.parseByte(s);
} else {
D_HCONDS05 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS08(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS08 = Byte.parseByte(s);
} else {
D_HCONDS08 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS09(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS09 = Byte.parseByte(s);
} else {
D_HCONDS09 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS10(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS10 = Byte.parseByte(s);
} else {
D_HCONDS10 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS11(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS11 = Byte.parseByte(s);
} else {
D_HCONDS11 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS12(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS12 = Byte.parseByte(s);
} else {
D_HCONDS12 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS13(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS13 = Byte.parseByte(s);
} else {
D_HCONDS13 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS14(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS14 = Byte.parseByte(s);
} else {
D_HCONDS14 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS15(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS15 = Byte.parseByte(s);
} else {
D_HCONDS15 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS16(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS16 = Byte.parseByte(s);
} else {
D_HCONDS16 = Byte.MIN_VALUE;
}
}

protected final void initD_HCONDS17(String s) {
if (!s.trim().isEmpty()) {
D_HCONDS17 = Byte.parseByte(s);
} else {
D_HCONDS17 = Byte.MIN_VALUE;
}
}

protected final void initD_HEALTH(String s) {
if (!s.trim().isEmpty()) {
D_HEALTH = Byte.parseByte(s);
} else {
D_HEALTH = Byte.MIN_VALUE;
}
}

protected final void initD_HEALTHSN(String s) {
if (!s.trim().isEmpty()) {
D_HEALTHSN = Byte.parseByte(s);
} else {
D_HEALTHSN = Byte.MIN_VALUE;
}
}

protected final void initD_HEDLIK(String s) {
if (!s.trim().isEmpty()) {
D_HEDLIK = Byte.parseByte(s);
} else {
D_HEDLIK = Byte.MIN_VALUE;
}
}

protected final void initD_HEDNT(String s) {
if (!s.trim().isEmpty()) {
D_HEDNT = Byte.parseByte(s);
} else {
D_HEDNT = Byte.MIN_VALUE;
}
}

protected final void initD_HEDNTO_CODE(String s) {
if (!s.trim().isEmpty()) {
D_HEDNTO_CODE = Byte.parseByte(s);
} else {
D_HEDNTO_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_HGADOPTF(String s) {
if (!s.trim().isEmpty()) {
D_HGADOPTF = Byte.parseByte(s);
} else {
D_HGADOPTF = Byte.MIN_VALUE;
}
}

protected final void initD_HGADOPTM(String s) {
if (!s.trim().isEmpty()) {
D_HGADOPTM = Byte.parseByte(s);
} else {
D_HGADOPTM = Byte.MIN_VALUE;
}
}

protected final void initD_HGBIOF(String s) {
if (!s.trim().isEmpty()) {
D_HGBIOF = Byte.parseByte(s);
} else {
D_HGBIOF = Byte.MIN_VALUE;
}
}

protected final void initD_HGBIOM(String s) {
if (!s.trim().isEmpty()) {
D_HGBIOM = Byte.parseByte(s);
} else {
D_HGBIOM = Byte.MIN_VALUE;
}
}

protected final void initD_HGPART(String s) {
if (!s.trim().isEmpty()) {
D_HGPART = Byte.parseByte(s);
} else {
D_HGPART = Byte.MIN_VALUE;
}
}

protected final void initD_HHORIG(String s) {
if (!s.trim().isEmpty()) {
D_HHORIG = Byte.parseByte(s);
} else {
D_HHORIG = Byte.MIN_VALUE;
}
}

protected final void initD_HHRESP_DV(String s) {
if (!s.trim().isEmpty()) {
D_HHRESP_DV = Byte.parseByte(s);
} else {
D_HHRESP_DV = Byte.MIN_VALUE;
}
}

protected final void initD_HHTYPE_DV(String s) {
if (!s.trim().isEmpty()) {
D_HHTYPE_DV = Byte.parseByte(s);
} else {
D_HHTYPE_DV = Byte.MIN_VALUE;
}
}

protected final void initD_HIDP(String s) {
if (!s.trim().isEmpty()) {
D_HIDP = Integer.parseInt(s);
} else {
D_HIDP = Integer.MIN_VALUE;
}
}

protected final void initD_HIQUAL_DV(String s) {
if (!s.trim().isEmpty()) {
D_HIQUAL_DV = Byte.parseByte(s);
} else {
D_HIQUAL_DV = Byte.MIN_VALUE;
}
}

protected final void initD_HLTHISGN(String s) {
if (!s.trim().isEmpty()) {
D_HLTHISGN = Byte.parseByte(s);
} else {
D_HLTHISGN = Byte.MIN_VALUE;
}
}

protected final void initD_HLTHKIDLINK(String s) {
if (!s.trim().isEmpty()) {
D_HLTHKIDLINK = Byte.parseByte(s);
} else {
D_HLTHKIDLINK = Byte.MIN_VALUE;
}
}

protected final void initD_HLTHLINK(String s) {
if (!s.trim().isEmpty()) {
D_HLTHLINK = Byte.parseByte(s);
} else {
D_HLTHLINK = Byte.MIN_VALUE;
}
}

protected final void initD_HLTHLINKB1(String s) {
if (!s.trim().isEmpty()) {
D_HLTHLINKB1 = Byte.parseByte(s);
} else {
D_HLTHLINKB1 = Byte.MIN_VALUE;
}
}

protected final void initD_HLTHLINKB2(String s) {
if (!s.trim().isEmpty()) {
D_HLTHLINKB2 = Byte.parseByte(s);
} else {
D_HLTHLINKB2 = Byte.MIN_VALUE;
}
}

protected final void initD_HLTHLINKB3(String s) {
if (!s.trim().isEmpty()) {
D_HLTHLINKB3 = Byte.parseByte(s);
} else {
D_HLTHLINKB3 = Byte.MIN_VALUE;
}
}

protected final void initD_HLTHRECD(String s) {
if (!s.trim().isEmpty()) {
D_HLTHRECD = Byte.parseByte(s);
} else {
D_HLTHRECD = Byte.MIN_VALUE;
}
}

protected final void initD_HLTHRSGN(String s) {
if (!s.trim().isEmpty()) {
D_HLTHRSGN = Byte.parseByte(s);
} else {
D_HLTHRSGN = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC1(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC1 = Byte.parseByte(s);
} else {
D_HOSPC1 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC10(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC10 = Byte.parseByte(s);
} else {
D_HOSPC10 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC2(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC2 = Byte.parseByte(s);
} else {
D_HOSPC2 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC3(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC3 = Byte.parseByte(s);
} else {
D_HOSPC3 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC4(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC4 = Byte.parseByte(s);
} else {
D_HOSPC4 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC5(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC5 = Byte.parseByte(s);
} else {
D_HOSPC5 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC6(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC6 = Byte.parseByte(s);
} else {
D_HOSPC6 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC7(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC7 = Byte.parseByte(s);
} else {
D_HOSPC7 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC8(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC8 = Byte.parseByte(s);
} else {
D_HOSPC8 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPC9(String s) {
if (!s.trim().isEmpty()) {
D_HOSPC9 = Byte.parseByte(s);
} else {
D_HOSPC9 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPDC1(String s) {
if (!s.trim().isEmpty()) {
D_HOSPDC1 = Short.parseShort(s);
} else {
D_HOSPDC1 = Short.MIN_VALUE;
}
}

protected final void initD_HOSPDC10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_HOSPDC10 = false;
} else {
D_HOSPDC10 = true;
}
}
}

protected final void initD_HOSPDC2(String s) {
if (!s.trim().isEmpty()) {
D_HOSPDC2 = Byte.parseByte(s);
} else {
D_HOSPDC2 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPDC3(String s) {
if (!s.trim().isEmpty()) {
D_HOSPDC3 = Byte.parseByte(s);
} else {
D_HOSPDC3 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPDC4(String s) {
if (!s.trim().isEmpty()) {
D_HOSPDC4 = Byte.parseByte(s);
} else {
D_HOSPDC4 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPDC5(String s) {
if (!s.trim().isEmpty()) {
D_HOSPDC5 = Byte.parseByte(s);
} else {
D_HOSPDC5 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPDC6(String s) {
if (!s.trim().isEmpty()) {
D_HOSPDC6 = Byte.parseByte(s);
} else {
D_HOSPDC6 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPDC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_HOSPDC7 = false;
} else {
D_HOSPDC7 = true;
}
}
}

protected final void initD_HOSPDC8(String s) {
if (!s.trim().isEmpty()) {
D_HOSPDC8 = Byte.parseByte(s);
} else {
D_HOSPDC8 = Byte.MIN_VALUE;
}
}

protected final void initD_HOSPDC9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_HOSPDC9 = false;
} else {
D_HOSPDC9 = true;
}
}
}

protected final void initD_HOUSING(String s) {
if (!s.trim().isEmpty()) {
D_HOUSING = Byte.parseByte(s);
} else {
D_HOUSING = Byte.MIN_VALUE;
}
}

protected final void initD_HOWLNG(String s) {
if (!s.trim().isEmpty()) {
D_HOWLNG = Short.parseShort(s);
} else {
D_HOWLNG = Short.MIN_VALUE;
}
}

protected final void initD_HRPID(String s) {
if (!s.trim().isEmpty()) {
D_HRPID = Integer.parseInt(s);
} else {
D_HRPID = Integer.MIN_VALUE;
}
}

protected final void initD_HRPNO(String s) {
if (!s.trim().isEmpty()) {
D_HRPNO = Byte.parseByte(s);
} else {
D_HRPNO = Byte.MIN_VALUE;
}
}

protected final void initD_HRS_SLPH(String s) {
if (!s.trim().isEmpty()) {
D_HRS_SLPH = Byte.parseByte(s);
} else {
D_HRS_SLPH = Byte.MIN_VALUE;
}
}

protected final void initD_HRS_SLPM(String s) {
if (!s.trim().isEmpty()) {
D_HRS_SLPM = Byte.parseByte(s);
} else {
D_HRS_SLPM = Byte.MIN_VALUE;
}
}

protected final void initD_HUBOSS(String s) {
if (!s.trim().isEmpty()) {
D_HUBOSS = Byte.parseByte(s);
} else {
D_HUBOSS = Byte.MIN_VALUE;
}
}

protected final void initD_HUBUYS(String s) {
if (!s.trim().isEmpty()) {
D_HUBUYS = Byte.parseByte(s);
} else {
D_HUBUYS = Byte.MIN_VALUE;
}
}

protected final void initD_HUCAR(String s) {
if (!s.trim().isEmpty()) {
D_HUCAR = Byte.parseByte(s);
} else {
D_HUCAR = Byte.MIN_VALUE;
}
}

protected final void initD_HUDIY(String s) {
if (!s.trim().isEmpty()) {
D_HUDIY = Byte.parseByte(s);
} else {
D_HUDIY = Byte.MIN_VALUE;
}
}

protected final void initD_HUFRYS(String s) {
if (!s.trim().isEmpty()) {
D_HUFRYS = Byte.parseByte(s);
} else {
D_HUFRYS = Byte.MIN_VALUE;
}
}

protected final void initD_HUIRON(String s) {
if (!s.trim().isEmpty()) {
D_HUIRON = Byte.parseByte(s);
} else {
D_HUIRON = Byte.MIN_VALUE;
}
}

protected final void initD_HUMOPS(String s) {
if (!s.trim().isEmpty()) {
D_HUMOPS = Byte.parseByte(s);
} else {
D_HUMOPS = Byte.MIN_VALUE;
}
}

protected final void initD_HUPOTS(String s) {
if (!s.trim().isEmpty()) {
D_HUPOTS = Byte.parseByte(s);
} else {
D_HUPOTS = Byte.MIN_VALUE;
}
}

protected final void initD_HURUNS(String s) {
if (!s.trim().isEmpty()) {
D_HURUNS = Byte.parseByte(s);
} else {
D_HURUNS = Byte.MIN_VALUE;
}
}

protected final void initD_HUSITS(String s) {
if (!s.trim().isEmpty()) {
D_HUSITS = Byte.parseByte(s);
} else {
D_HUSITS = Byte.MIN_VALUE;
}
}

protected final void initD_IENDDATHH(String s) {
if (!s.trim().isEmpty()) {
D_IENDDATHH = Byte.parseByte(s);
} else {
D_IENDDATHH = Byte.MIN_VALUE;
}
}

protected final void initD_IENDDATMM(String s) {
if (!s.trim().isEmpty()) {
D_IENDDATMM = Byte.parseByte(s);
} else {
D_IENDDATMM = Byte.MIN_VALUE;
}
}

protected final void initD_IENDDATSS(String s) {
if (!s.trim().isEmpty()) {
D_IENDDATSS = Byte.parseByte(s);
} else {
D_IENDDATSS = Byte.MIN_VALUE;
}
}

protected final void initD_IND5MUS_LW(String s) {
if (!s.trim().isEmpty()) {
D_IND5MUS_LW = Double.parseDouble(s);
} else {
D_IND5MUS_LW = Double.NaN;
}
}

protected final void initD_IND5MUS_XW(String s) {
if (!s.trim().isEmpty()) {
D_IND5MUS_XW = Double.parseDouble(s);
} else {
D_IND5MUS_XW = Double.NaN;
}
}

protected final void initD_INDBD91_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDBD91_LW = Double.parseDouble(s);
} else {
D_INDBD91_LW = Double.NaN;
}
}

protected final void initD_INDBDUB_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDBDUB_LW = Double.parseDouble(s);
} else {
D_INDBDUB_LW = Double.NaN;
}
}

protected final void initD_INDIN01_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDIN01_LW = Double.parseDouble(s);
} else {
D_INDIN01_LW = Double.NaN;
}
}

protected final void initD_INDIN91_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDIN91_LW = Double.parseDouble(s);
} else {
D_INDIN91_LW = Double.NaN;
}
}

protected final void initD_INDINUB_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDINUB_LW = Double.parseDouble(s);
} else {
D_INDINUB_LW = Double.NaN;
}
}

protected final void initD_INDINUB_XW(String s) {
if (!s.trim().isEmpty()) {
D_INDINUB_XW = Double.parseDouble(s);
} else {
D_INDINUB_XW = Double.NaN;
}
}

protected final void initD_INDINUS_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDINUS_LW = Double.parseDouble(s);
} else {
D_INDINUS_LW = Double.NaN;
}
}

protected final void initD_INDMODE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_INDMODE = false;
} else {
D_INDMODE = true;
}
}
}

protected final void initD_INDNS91_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDNS91_LW = Double.parseDouble(s);
} else {
D_INDNS91_LW = Double.NaN;
}
}

protected final void initD_INDNSUB_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDNSUB_LW = Double.parseDouble(s);
} else {
D_INDNSUB_LW = Double.NaN;
}
}

protected final void initD_INDPXUB_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDPXUB_LW = Double.parseDouble(s);
} else {
D_INDPXUB_LW = Double.NaN;
}
}

protected final void initD_INDPXUB_XW(String s) {
if (!s.trim().isEmpty()) {
D_INDPXUB_XW = Double.parseDouble(s);
} else {
D_INDPXUB_XW = Double.NaN;
}
}

protected final void initD_INDPXUS_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDPXUS_LW = Double.parseDouble(s);
} else {
D_INDPXUS_LW = Double.NaN;
}
}

protected final void initD_INDSCUB_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDSCUB_LW = Double.parseDouble(s);
} else {
D_INDSCUB_LW = Double.NaN;
}
}

protected final void initD_INDSCUB_XW(String s) {
if (!s.trim().isEmpty()) {
D_INDSCUB_XW = Double.parseDouble(s);
} else {
D_INDSCUB_XW = Double.NaN;
}
}

protected final void initD_INDSCUS_LW(String s) {
if (!s.trim().isEmpty()) {
D_INDSCUS_LW = Double.parseDouble(s);
} else {
D_INDSCUS_LW = Double.NaN;
}
}

protected final void initD_INFSAVE1(String s) {
if (!s.trim().isEmpty()) {
D_INFSAVE1 = Byte.parseByte(s);
} else {
D_INFSAVE1 = Byte.MIN_VALUE;
}
}

protected final void initD_INFSAVE2(String s) {
if (!s.trim().isEmpty()) {
D_INFSAVE2 = Byte.parseByte(s);
} else {
D_INFSAVE2 = Byte.MIN_VALUE;
}
}

protected final void initD_INFSAVE3(String s) {
if (!s.trim().isEmpty()) {
D_INFSAVE3 = Byte.parseByte(s);
} else {
D_INFSAVE3 = Byte.MIN_VALUE;
}
}

protected final void initD_INFSAVE4(String s) {
if (!s.trim().isEmpty()) {
D_INFSAVE4 = Byte.parseByte(s);
} else {
D_INFSAVE4 = Byte.MIN_VALUE;
}
}

protected final void initD_INFSAVE5(String s) {
if (!s.trim().isEmpty()) {
D_INFSAVE5 = Byte.parseByte(s);
} else {
D_INFSAVE5 = Byte.MIN_VALUE;
}
}

protected final void initD_INFSAVE6(String s) {
if (!s.trim().isEmpty()) {
D_INFSAVE6 = Byte.parseByte(s);
} else {
D_INFSAVE6 = Byte.MIN_VALUE;
}
}

protected final void initD_INFSAVE96(String s) {
if (!s.trim().isEmpty()) {
D_INFSAVE96 = Byte.parseByte(s);
} else {
D_INFSAVE96 = Byte.MIN_VALUE;
}
}

protected final void initD_INOCONTACT(String s) {
if (!s.trim().isEmpty()) {
D_INOCONTACT = Byte.parseByte(s);
} else {
D_INOCONTACT = Byte.MIN_VALUE;
}
}

protected final void initD_INTCONTACT(String s) {
if (!s.trim().isEmpty()) {
D_INTCONTACT = Byte.parseByte(s);
} else {
D_INTCONTACT = Byte.MIN_VALUE;
}
}

protected final void initD_INTDATD_DV(String s) {
if (!s.trim().isEmpty()) {
D_INTDATD_DV = Byte.parseByte(s);
} else {
D_INTDATD_DV = Byte.MIN_VALUE;
}
}

protected final void initD_INTDATM_DV(String s) {
if (!s.trim().isEmpty()) {
D_INTDATM_DV = Byte.parseByte(s);
} else {
D_INTDATM_DV = Byte.MIN_VALUE;
}
}

protected final void initD_INTDATY_DV(String s) {
if (!s.trim().isEmpty()) {
D_INTDATY_DV = Short.parseShort(s);
} else {
D_INTDATY_DV = Short.MIN_VALUE;
}
}

protected final void initD_INTSIGNHEALTH(String s) {
if (!s.trim().isEmpty()) {
D_INTSIGNHEALTH = Byte.parseByte(s);
} else {
D_INTSIGNHEALTH = Byte.MIN_VALUE;
}
}

protected final void initD_INVITRO1(String s) {
if (!s.trim().isEmpty()) {
D_INVITRO1 = Byte.parseByte(s);
} else {
D_INVITRO1 = Byte.MIN_VALUE;
}
}

protected final void initD_INVITRO2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_INVITRO2 = false;
} else {
D_INVITRO2 = true;
}
}
}

protected final void initD_INVITRO3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_INVITRO3 = false;
} else {
D_INVITRO3 = true;
}
}
}

protected final void initD_INVITRO4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_INVITRO4 = false;
} else {
D_INVITRO4 = true;
}
}
}

protected final void initD_IOUTCOME(String s) {
if (!s.trim().isEmpty()) {
D_IOUTCOME = Byte.parseByte(s);
} else {
D_IOUTCOME = Byte.MIN_VALUE;
}
}

protected final void initD_ISTRTDATD(String s) {
if (!s.trim().isEmpty()) {
D_ISTRTDATD = Byte.parseByte(s);
} else {
D_ISTRTDATD = Byte.MIN_VALUE;
}
}

protected final void initD_ISTRTDATHH(String s) {
if (!s.trim().isEmpty()) {
D_ISTRTDATHH = Byte.parseByte(s);
} else {
D_ISTRTDATHH = Byte.MIN_VALUE;
}
}

protected final void initD_ISTRTDATM(String s) {
if (!s.trim().isEmpty()) {
D_ISTRTDATM = Byte.parseByte(s);
} else {
D_ISTRTDATM = Byte.MIN_VALUE;
}
}

protected final void initD_ISTRTDATMM(String s) {
if (!s.trim().isEmpty()) {
D_ISTRTDATMM = Byte.parseByte(s);
} else {
D_ISTRTDATMM = Byte.MIN_VALUE;
}
}

protected final void initD_ISTRTDATSS(String s) {
if (!s.trim().isEmpty()) {
D_ISTRTDATSS = Byte.parseByte(s);
} else {
D_ISTRTDATSS = Byte.MIN_VALUE;
}
}

protected final void initD_ISTRTDATY(String s) {
if (!s.trim().isEmpty()) {
D_ISTRTDATY = Short.parseShort(s);
} else {
D_ISTRTDATY = Short.MIN_VALUE;
}
}

protected final void initD_ISYEAR(String s) {
if (!s.trim().isEmpty()) {
D_ISYEAR = Short.parseShort(s);
} else {
D_ISYEAR = Short.MIN_VALUE;
}
}

protected final void initD_IVAFFCT11(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT11 = Byte.parseByte(s);
} else {
D_IVAFFCT11 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT12(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT12 = Byte.parseByte(s);
} else {
D_IVAFFCT12 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT13(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT13 = Byte.parseByte(s);
} else {
D_IVAFFCT13 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT14(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT14 = Byte.parseByte(s);
} else {
D_IVAFFCT14 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT15(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT15 = Byte.parseByte(s);
} else {
D_IVAFFCT15 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT17(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT17 = Byte.parseByte(s);
} else {
D_IVAFFCT17 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT21(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT21 = Byte.parseByte(s);
} else {
D_IVAFFCT21 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT22(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT22 = Byte.parseByte(s);
} else {
D_IVAFFCT22 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT23(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT23 = Byte.parseByte(s);
} else {
D_IVAFFCT23 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT27(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT27 = Byte.parseByte(s);
} else {
D_IVAFFCT27 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT30(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT30 = Byte.parseByte(s);
} else {
D_IVAFFCT30 = Byte.MIN_VALUE;
}
}

protected final void initD_IVAFFCT97(String s) {
if (!s.trim().isEmpty()) {
D_IVAFFCT97 = Byte.parseByte(s);
} else {
D_IVAFFCT97 = Byte.MIN_VALUE;
}
}

protected final void initD_IVCOOP(String s) {
if (!s.trim().isEmpty()) {
D_IVCOOP = Byte.parseByte(s);
} else {
D_IVCOOP = Byte.MIN_VALUE;
}
}

protected final void initD_IVFIO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_IVFIO = false;
} else {
D_IVFIO = true;
}
}
}

protected final void initD_IVINFNCE(String s) {
if (!s.trim().isEmpty()) {
D_IVINFNCE = Byte.parseByte(s);
} else {
D_IVINFNCE = Byte.MIN_VALUE;
}
}

protected final void initD_IVLIBAL(String s) {
if (!s.trim().isEmpty()) {
D_IVLIBAL = Byte.parseByte(s);
} else {
D_IVLIBAL = Byte.MIN_VALUE;
}
}

protected final void initD_IVLIENG(String s) {
if (!s.trim().isEmpty()) {
D_IVLIENG = Byte.parseByte(s);
} else {
D_IVLIENG = Byte.MIN_VALUE;
}
}

protected final void initD_IVLITRANS(String s) {
if (!s.trim().isEmpty()) {
D_IVLITRANS = Byte.parseByte(s);
} else {
D_IVLITRANS = Byte.MIN_VALUE;
}
}

protected final void initD_IVLIWHO(String s) {
if (!s.trim().isEmpty()) {
D_IVLIWHO = Byte.parseByte(s);
} else {
D_IVLIWHO = Byte.MIN_VALUE;
}
}

protected final void initD_IVPRSNT(String s) {
if (!s.trim().isEmpty()) {
D_IVPRSNT = Byte.parseByte(s);
} else {
D_IVPRSNT = Byte.MIN_VALUE;
}
}

protected final void initD_J1BOSS(String s) {
if (!s.trim().isEmpty()) {
D_J1BOSS = Byte.parseByte(s);
} else {
D_J1BOSS = Byte.MIN_VALUE;
}
}

protected final void initD_J1MNGR(String s) {
if (!s.trim().isEmpty()) {
D_J1MNGR = Byte.parseByte(s);
} else {
D_J1MNGR = Byte.MIN_VALUE;
}
}

protected final void initD_J1NONE(String s) {
if (!s.trim().isEmpty()) {
D_J1NONE = Byte.parseByte(s);
} else {
D_J1NONE = Byte.MIN_VALUE;
}
}

protected final void initD_J1NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
D_J1NSSEC5_DV = Byte.parseByte(s);
} else {
D_J1NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initD_J1SEMP(String s) {
if (!s.trim().isEmpty()) {
D_J1SEMP = Byte.parseByte(s);
} else {
D_J1SEMP = Byte.MIN_VALUE;
}
}

protected final void initD_J1SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
D_J1SOC00_CC = Short.parseShort(s);
} else {
D_J1SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initD_J1SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
D_J1SOC10_CC = Short.parseShort(s);
} else {
D_J1SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initD_J1SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
D_J1SOC90_CC = Byte.parseByte(s);
} else {
D_J1SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initD_J2HAS(String s) {
if (!s.trim().isEmpty()) {
D_J2HAS = Byte.parseByte(s);
} else {
D_J2HAS = Byte.MIN_VALUE;
}
}

protected final void initD_J2HRS(String s) {
if (!s.trim().isEmpty()) {
D_J2HRS = Short.parseShort(s);
} else {
D_J2HRS = Short.MIN_VALUE;
}
}

protected final void initD_J2NSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
D_J2NSSEC5_DV = Byte.parseByte(s);
} else {
D_J2NSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initD_J2PAY(String s) {
if (!s.trim().isEmpty()) {
D_J2PAY = Integer.parseInt(s);
} else {
D_J2PAY = Integer.MIN_VALUE;
}
}

protected final void initD_J2PAYNET_DV(String s) {
if (!s.trim().isEmpty()) {
D_J2PAYNET_DV = Double.parseDouble(s);
} else {
D_J2PAYNET_DV = Double.NaN;
}
}

protected final void initD_J2PAY_DV(String s) {
if (!s.trim().isEmpty()) {
D_J2PAY_DV = Double.parseDouble(s);
} else {
D_J2PAY_DV = Double.NaN;
}
}

protected final void initD_J2PAY_IF(String s) {
if (!s.trim().isEmpty()) {
D_J2PAY_IF = Byte.parseByte(s);
} else {
D_J2PAY_IF = Byte.MIN_VALUE;
}
}

protected final void initD_J2SEMP(String s) {
if (!s.trim().isEmpty()) {
D_J2SEMP = Byte.parseByte(s);
} else {
D_J2SEMP = Byte.MIN_VALUE;
}
}

protected final void initD_J2SOC00_CC(String s) {
if (!s.trim().isEmpty()) {
D_J2SOC00_CC = Short.parseShort(s);
} else {
D_J2SOC00_CC = Short.MIN_VALUE;
}
}

protected final void initD_J2SOC10_CC(String s) {
if (!s.trim().isEmpty()) {
D_J2SOC10_CC = Short.parseShort(s);
} else {
D_J2SOC10_CC = Short.MIN_VALUE;
}
}

protected final void initD_J2SOC90_CC(String s) {
if (!s.trim().isEmpty()) {
D_J2SOC90_CC = Byte.parseByte(s);
} else {
D_J2SOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initD_JBATT1(String s) {
if (!s.trim().isEmpty()) {
D_JBATT1 = Byte.parseByte(s);
} else {
D_JBATT1 = Byte.MIN_VALUE;
}
}

protected final void initD_JBATT2(String s) {
if (!s.trim().isEmpty()) {
D_JBATT2 = Byte.parseByte(s);
} else {
D_JBATT2 = Byte.MIN_VALUE;
}
}

protected final void initD_JBATT3(String s) {
if (!s.trim().isEmpty()) {
D_JBATT3 = Byte.parseByte(s);
} else {
D_JBATT3 = Byte.MIN_VALUE;
}
}

protected final void initD_JBATT4(String s) {
if (!s.trim().isEmpty()) {
D_JBATT4 = Byte.parseByte(s);
} else {
D_JBATT4 = Byte.MIN_VALUE;
}
}

protected final void initD_JBATT5(String s) {
if (!s.trim().isEmpty()) {
D_JBATT5 = Byte.parseByte(s);
} else {
D_JBATT5 = Byte.MIN_VALUE;
}
}

protected final void initD_JBATT6(String s) {
if (!s.trim().isEmpty()) {
D_JBATT6 = Byte.parseByte(s);
} else {
D_JBATT6 = Byte.MIN_VALUE;
}
}

protected final void initD_JBBGD(String s) {
if (!s.trim().isEmpty()) {
D_JBBGD = Byte.parseByte(s);
} else {
D_JBBGD = Byte.MIN_VALUE;
}
}

protected final void initD_JBBGDATD(String s) {
if (!s.trim().isEmpty()) {
D_JBBGDATD = Byte.parseByte(s);
} else {
D_JBBGDATD = Byte.MIN_VALUE;
}
}

protected final void initD_JBBGDATM(String s) {
if (!s.trim().isEmpty()) {
D_JBBGDATM = Byte.parseByte(s);
} else {
D_JBBGDATM = Byte.MIN_VALUE;
}
}

protected final void initD_JBBGDATY(String s) {
if (!s.trim().isEmpty()) {
D_JBBGDATY = Short.parseShort(s);
} else {
D_JBBGDATY = Short.MIN_VALUE;
}
}

protected final void initD_JBBGM(String s) {
if (!s.trim().isEmpty()) {
D_JBBGM = Byte.parseByte(s);
} else {
D_JBBGM = Byte.MIN_VALUE;
}
}

protected final void initD_JBBGY(String s) {
if (!s.trim().isEmpty()) {
D_JBBGY = Short.parseShort(s);
} else {
D_JBBGY = Short.MIN_VALUE;
}
}

protected final void initD_JBENDD(String s) {
if (!s.trim().isEmpty()) {
D_JBENDD = Byte.parseByte(s);
} else {
D_JBENDD = Byte.MIN_VALUE;
}
}

protected final void initD_JBENDM(String s) {
if (!s.trim().isEmpty()) {
D_JBENDM = Byte.parseByte(s);
} else {
D_JBENDM = Byte.MIN_VALUE;
}
}

protected final void initD_JBENDREAS(String s) {
if (!s.trim().isEmpty()) {
D_JBENDREAS = Byte.parseByte(s);
} else {
D_JBENDREAS = Byte.MIN_VALUE;
}
}

protected final void initD_JBENDY4(String s) {
if (!s.trim().isEmpty()) {
D_JBENDY4 = Short.parseShort(s);
} else {
D_JBENDY4 = Short.MIN_VALUE;
}
}

protected final void initD_JBES2000(String s) {
if (!s.trim().isEmpty()) {
D_JBES2000 = Byte.parseByte(s);
} else {
D_JBES2000 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFLEX1(String s) {
if (!s.trim().isEmpty()) {
D_JBFLEX1 = Byte.parseByte(s);
} else {
D_JBFLEX1 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFLEX2(String s) {
if (!s.trim().isEmpty()) {
D_JBFLEX2 = Byte.parseByte(s);
} else {
D_JBFLEX2 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFLEX3(String s) {
if (!s.trim().isEmpty()) {
D_JBFLEX3 = Byte.parseByte(s);
} else {
D_JBFLEX3 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFLEX4(String s) {
if (!s.trim().isEmpty()) {
D_JBFLEX4 = Byte.parseByte(s);
} else {
D_JBFLEX4 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFLEX5(String s) {
if (!s.trim().isEmpty()) {
D_JBFLEX5 = Byte.parseByte(s);
} else {
D_JBFLEX5 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFLEX6(String s) {
if (!s.trim().isEmpty()) {
D_JBFLEX6 = Byte.parseByte(s);
} else {
D_JBFLEX6 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFLEX7(String s) {
if (!s.trim().isEmpty()) {
D_JBFLEX7 = Byte.parseByte(s);
} else {
D_JBFLEX7 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFLEX8(String s) {
if (!s.trim().isEmpty()) {
D_JBFLEX8 = Byte.parseByte(s);
} else {
D_JBFLEX8 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFLEX96(String s) {
if (!s.trim().isEmpty()) {
D_JBFLEX96 = Byte.parseByte(s);
} else {
D_JBFLEX96 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFT_DV(String s) {
if (!s.trim().isEmpty()) {
D_JBFT_DV = Byte.parseByte(s);
} else {
D_JBFT_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXINF(String s) {
if (!s.trim().isEmpty()) {
D_JBFXINF = Byte.parseByte(s);
} else {
D_JBFXINF = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXUSE1(String s) {
if (!s.trim().isEmpty()) {
D_JBFXUSE1 = Byte.parseByte(s);
} else {
D_JBFXUSE1 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXUSE2(String s) {
if (!s.trim().isEmpty()) {
D_JBFXUSE2 = Byte.parseByte(s);
} else {
D_JBFXUSE2 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXUSE3(String s) {
if (!s.trim().isEmpty()) {
D_JBFXUSE3 = Byte.parseByte(s);
} else {
D_JBFXUSE3 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXUSE4(String s) {
if (!s.trim().isEmpty()) {
D_JBFXUSE4 = Byte.parseByte(s);
} else {
D_JBFXUSE4 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXUSE5(String s) {
if (!s.trim().isEmpty()) {
D_JBFXUSE5 = Byte.parseByte(s);
} else {
D_JBFXUSE5 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXUSE6(String s) {
if (!s.trim().isEmpty()) {
D_JBFXUSE6 = Byte.parseByte(s);
} else {
D_JBFXUSE6 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXUSE7(String s) {
if (!s.trim().isEmpty()) {
D_JBFXUSE7 = Byte.parseByte(s);
} else {
D_JBFXUSE7 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXUSE8(String s) {
if (!s.trim().isEmpty()) {
D_JBFXUSE8 = Byte.parseByte(s);
} else {
D_JBFXUSE8 = Byte.MIN_VALUE;
}
}

protected final void initD_JBFXUSE96(String s) {
if (!s.trim().isEmpty()) {
D_JBFXUSE96 = Byte.parseByte(s);
} else {
D_JBFXUSE96 = Byte.MIN_VALUE;
}
}

protected final void initD_JBHAD(String s) {
if (!s.trim().isEmpty()) {
D_JBHAD = Byte.parseByte(s);
} else {
D_JBHAD = Byte.MIN_VALUE;
}
}

protected final void initD_JBHAS(String s) {
if (!s.trim().isEmpty()) {
D_JBHAS = Byte.parseByte(s);
} else {
D_JBHAS = Byte.MIN_VALUE;
}
}

protected final void initD_JBHRS(String s) {
if (!s.trim().isEmpty()) {
D_JBHRS = Double.parseDouble(s);
} else {
D_JBHRS = Double.NaN;
}
}

protected final void initD_JBIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
D_JBIINDB_DV = Byte.parseByte(s);
} else {
D_JBIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JBISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
D_JBISCO88_CC = Short.parseShort(s);
} else {
D_JBISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initD_JBLKCHA(String s) {
if (!s.trim().isEmpty()) {
D_JBLKCHA = Byte.parseByte(s);
} else {
D_JBLKCHA = Byte.MIN_VALUE;
}
}

protected final void initD_JBLKCHB(String s) {
if (!s.trim().isEmpty()) {
D_JBLKCHB = Byte.parseByte(s);
} else {
D_JBLKCHB = Byte.MIN_VALUE;
}
}

protected final void initD_JBLKCHC(String s) {
if (!s.trim().isEmpty()) {
D_JBLKCHC = Byte.parseByte(s);
} else {
D_JBLKCHC = Byte.MIN_VALUE;
}
}

protected final void initD_JBLKCHD(String s) {
if (!s.trim().isEmpty()) {
D_JBLKCHD = Byte.parseByte(s);
} else {
D_JBLKCHD = Byte.MIN_VALUE;
}
}

protected final void initD_JBLKCHE(String s) {
if (!s.trim().isEmpty()) {
D_JBLKCHE = Byte.parseByte(s);
} else {
D_JBLKCHE = Byte.MIN_VALUE;
}
}

protected final void initD_JBMNGR(String s) {
if (!s.trim().isEmpty()) {
D_JBMNGR = Byte.parseByte(s);
} else {
D_JBMNGR = Byte.MIN_VALUE;
}
}

protected final void initD_JBMNGRCHK(String s) {
if (!s.trim().isEmpty()) {
D_JBMNGRCHK = Byte.parseByte(s);
} else {
D_JBMNGRCHK = Byte.MIN_VALUE;
}
}

protected final void initD_JBNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
D_JBNSSEC3_DV = Byte.parseByte(s);
} else {
D_JBNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JBNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
D_JBNSSEC5_DV = Byte.parseByte(s);
} else {
D_JBNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JBNSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
D_JBNSSEC8_DV = Byte.parseByte(s);
} else {
D_JBNSSEC8_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JBNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
D_JBNSSEC_DV = Byte.parseByte(s);
} else {
D_JBNSSEC_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JBOFF(String s) {
if (!s.trim().isEmpty()) {
D_JBOFF = Byte.parseByte(s);
} else {
D_JBOFF = Byte.MIN_VALUE;
}
}

protected final void initD_JBOFFY(String s) {
if (!s.trim().isEmpty()) {
D_JBOFFY = Byte.parseByte(s);
} else {
D_JBOFFY = Byte.MIN_VALUE;
}
}

protected final void initD_JBONUS(String s) {
if (!s.trim().isEmpty()) {
D_JBONUS = Byte.parseByte(s);
} else {
D_JBONUS = Byte.MIN_VALUE;
}
}

protected final void initD_JBOT(String s) {
if (!s.trim().isEmpty()) {
D_JBOT = Byte.parseByte(s);
} else {
D_JBOT = Byte.MIN_VALUE;
}
}

protected final void initD_JBOTPD(String s) {
if (!s.trim().isEmpty()) {
D_JBOTPD = Byte.parseByte(s);
} else {
D_JBOTPD = Byte.MIN_VALUE;
}
}

protected final void initD_JBPEN(String s) {
if (!s.trim().isEmpty()) {
D_JBPEN = Byte.parseByte(s);
} else {
D_JBPEN = Byte.MIN_VALUE;
}
}

protected final void initD_JBPENM(String s) {
if (!s.trim().isEmpty()) {
D_JBPENM = Byte.parseByte(s);
} else {
D_JBPENM = Byte.MIN_VALUE;
}
}

protected final void initD_JBPENY4(String s) {
if (!s.trim().isEmpty()) {
D_JBPENY4 = Short.parseShort(s);
} else {
D_JBPENY4 = Short.MIN_VALUE;
}
}

protected final void initD_JBPERFP(String s) {
if (!s.trim().isEmpty()) {
D_JBPERFP = Byte.parseByte(s);
} else {
D_JBPERFP = Byte.MIN_VALUE;
}
}

protected final void initD_JBPL(String s) {
if (!s.trim().isEmpty()) {
D_JBPL = Byte.parseByte(s);
} else {
D_JBPL = Byte.MIN_VALUE;
}
}

protected final void initD_JBRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
D_JBRGSC_DV = Byte.parseByte(s);
} else {
D_JBRGSC_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JBRISE(String s) {
if (!s.trim().isEmpty()) {
D_JBRISE = Byte.parseByte(s);
} else {
D_JBRISE = Byte.MIN_VALUE;
}
}

protected final void initD_JBSAMR(String s) {
if (!s.trim().isEmpty()) {
D_JBSAMR = Byte.parseByte(s);
} else {
D_JBSAMR = Byte.MIN_VALUE;
}
}

protected final void initD_JBSAT(String s) {
if (!s.trim().isEmpty()) {
D_JBSAT = Byte.parseByte(s);
} else {
D_JBSAT = Byte.MIN_VALUE;
}
}

protected final void initD_JBSEC(String s) {
if (!s.trim().isEmpty()) {
D_JBSEC = Byte.parseByte(s);
} else {
D_JBSEC = Byte.MIN_VALUE;
}
}

protected final void initD_JBSECT(String s) {
if (!s.trim().isEmpty()) {
D_JBSECT = Byte.parseByte(s);
} else {
D_JBSECT = Byte.MIN_VALUE;
}
}

protected final void initD_JBSECTPUB(String s) {
if (!s.trim().isEmpty()) {
D_JBSECTPUB = Byte.parseByte(s);
} else {
D_JBSECTPUB = Byte.MIN_VALUE;
}
}

protected final void initD_JBSEG_DV(String s) {
if (!s.trim().isEmpty()) {
D_JBSEG_DV = Byte.parseByte(s);
} else {
D_JBSEG_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
D_JBSEMP = Byte.parseByte(s);
} else {
D_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initD_JBSEMPCHK(String s) {
if (!s.trim().isEmpty()) {
D_JBSEMPCHK = Byte.parseByte(s);
} else {
D_JBSEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initD_JBSIC07CHK(String s) {
if (!s.trim().isEmpty()) {
D_JBSIC07CHK = Byte.parseByte(s);
} else {
D_JBSIC07CHK = Byte.MIN_VALUE;
}
}

protected final void initD_JBSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
D_JBSIC07_CC = Byte.parseByte(s);
} else {
D_JBSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initD_JBSIZE(String s) {
if (!s.trim().isEmpty()) {
D_JBSIZE = Byte.parseByte(s);
} else {
D_JBSIZE = Byte.MIN_VALUE;
}
}

protected final void initD_JBSIZECHK(String s) {
if (!s.trim().isEmpty()) {
D_JBSIZECHK = Byte.parseByte(s);
} else {
D_JBSIZECHK = Byte.MIN_VALUE;
}
}

protected final void initD_JBSOC00CHK(String s) {
if (!s.trim().isEmpty()) {
D_JBSOC00CHK = Byte.parseByte(s);
} else {
D_JBSOC00CHK = Byte.MIN_VALUE;
}
}

protected final void initD_JBSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
D_JBSOC00_CC = Short.parseShort(s);
} else {
D_JBSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initD_JBSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
D_JBSOC10_CC = Short.parseShort(s);
} else {
D_JBSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initD_JBSOCGR_DV(String s) {
if (!s.trim().isEmpty()) {
D_JBSOCGR_DV = Byte.parseByte(s);
} else {
D_JBSOCGR_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JBSTAT(String s) {
if (!s.trim().isEmpty()) {
D_JBSTAT = Byte.parseByte(s);
} else {
D_JBSTAT = Byte.MIN_VALUE;
}
}

protected final void initD_JBTERM1(String s) {
if (!s.trim().isEmpty()) {
D_JBTERM1 = Byte.parseByte(s);
} else {
D_JBTERM1 = Byte.MIN_VALUE;
}
}

protected final void initD_JBTERM2(String s) {
if (!s.trim().isEmpty()) {
D_JBTERM2 = Byte.parseByte(s);
} else {
D_JBTERM2 = Byte.MIN_VALUE;
}
}

protected final void initD_JBTTWT(String s) {
if (!s.trim().isEmpty()) {
D_JBTTWT = Short.parseShort(s);
} else {
D_JBTTWT = Short.MIN_VALUE;
}
}

protected final void initD_JBXPCHA(String s) {
if (!s.trim().isEmpty()) {
D_JBXPCHA = Byte.parseByte(s);
} else {
D_JBXPCHA = Byte.MIN_VALUE;
}
}

protected final void initD_JBXPCHB(String s) {
if (!s.trim().isEmpty()) {
D_JBXPCHB = Byte.parseByte(s);
} else {
D_JBXPCHB = Byte.MIN_VALUE;
}
}

protected final void initD_JBXPCHC(String s) {
if (!s.trim().isEmpty()) {
D_JBXPCHC = Byte.parseByte(s);
} else {
D_JBXPCHC = Byte.MIN_VALUE;
}
}

protected final void initD_JBXPCHD(String s) {
if (!s.trim().isEmpty()) {
D_JBXPCHD = Byte.parseByte(s);
} else {
D_JBXPCHD = Byte.MIN_VALUE;
}
}

protected final void initD_JBXPCHE(String s) {
if (!s.trim().isEmpty()) {
D_JBXPCHE = Byte.parseByte(s);
} else {
D_JBXPCHE = Byte.MIN_VALUE;
}
}

protected final void initD_JLBOSS(String s) {
if (!s.trim().isEmpty()) {
D_JLBOSS = Byte.parseByte(s);
} else {
D_JLBOSS = Byte.MIN_VALUE;
}
}

protected final void initD_JLENDM(String s) {
if (!s.trim().isEmpty()) {
D_JLENDM = Byte.parseByte(s);
} else {
D_JLENDM = Byte.MIN_VALUE;
}
}

protected final void initD_JLENDY(String s) {
if (!s.trim().isEmpty()) {
D_JLENDY = Short.parseShort(s);
} else {
D_JLENDY = Short.MIN_VALUE;
}
}

protected final void initD_JLES2000(String s) {
if (!s.trim().isEmpty()) {
D_JLES2000 = Byte.parseByte(s);
} else {
D_JLES2000 = Byte.MIN_VALUE;
}
}

protected final void initD_JLIINDB_DV(String s) {
if (!s.trim().isEmpty()) {
D_JLIINDB_DV = Byte.parseByte(s);
} else {
D_JLIINDB_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JLISCO88_CC(String s) {
if (!s.trim().isEmpty()) {
D_JLISCO88_CC = Short.parseShort(s);
} else {
D_JLISCO88_CC = Short.MIN_VALUE;
}
}

protected final void initD_JLMNGR(String s) {
if (!s.trim().isEmpty()) {
D_JLMNGR = Byte.parseByte(s);
} else {
D_JLMNGR = Byte.MIN_VALUE;
}
}

protected final void initD_JLNSSEC3_DV(String s) {
if (!s.trim().isEmpty()) {
D_JLNSSEC3_DV = Byte.parseByte(s);
} else {
D_JLNSSEC3_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JLNSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
D_JLNSSEC5_DV = Byte.parseByte(s);
} else {
D_JLNSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JLNSSEC8_DV(String s) {
if (!s.trim().isEmpty()) {
D_JLNSSEC8_DV = Byte.parseByte(s);
} else {
D_JLNSSEC8_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JLNSSEC_DV(String s) {
if (!s.trim().isEmpty()) {
D_JLNSSEC_DV = Byte.parseByte(s);
} else {
D_JLNSSEC_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JLRGSC_DV(String s) {
if (!s.trim().isEmpty()) {
D_JLRGSC_DV = Byte.parseByte(s);
} else {
D_JLRGSC_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JLSEG_DV(String s) {
if (!s.trim().isEmpty()) {
D_JLSEG_DV = Byte.parseByte(s);
} else {
D_JLSEG_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JLSEMP(String s) {
if (!s.trim().isEmpty()) {
D_JLSEMP = Byte.parseByte(s);
} else {
D_JLSEMP = Byte.MIN_VALUE;
}
}

protected final void initD_JLSIC07_CC(String s) {
if (!s.trim().isEmpty()) {
D_JLSIC07_CC = Byte.parseByte(s);
} else {
D_JLSIC07_CC = Byte.MIN_VALUE;
}
}

protected final void initD_JLSIZE(String s) {
if (!s.trim().isEmpty()) {
D_JLSIZE = Byte.parseByte(s);
} else {
D_JLSIZE = Byte.MIN_VALUE;
}
}

protected final void initD_JLSOC00_CC(String s) {
if (!s.trim().isEmpty()) {
D_JLSOC00_CC = Short.parseShort(s);
} else {
D_JLSOC00_CC = Short.MIN_VALUE;
}
}

protected final void initD_JLSOC10_CC(String s) {
if (!s.trim().isEmpty()) {
D_JLSOC10_CC = Short.parseShort(s);
} else {
D_JLSOC10_CC = Short.MIN_VALUE;
}
}

protected final void initD_JOBHOURS1(String s) {
if (!s.trim().isEmpty()) {
D_JOBHOURS1 = Byte.parseByte(s);
} else {
D_JOBHOURS1 = Byte.MIN_VALUE;
}
}

protected final void initD_JOBHOURS2(String s) {
if (!s.trim().isEmpty()) {
D_JOBHOURS2 = Byte.parseByte(s);
} else {
D_JOBHOURS2 = Byte.MIN_VALUE;
}
}

protected final void initD_JOBHOURS3(String s) {
if (!s.trim().isEmpty()) {
D_JOBHOURS3 = Byte.parseByte(s);
} else {
D_JOBHOURS3 = Byte.MIN_VALUE;
}
}

protected final void initD_JOBHOURS4(String s) {
if (!s.trim().isEmpty()) {
D_JOBHOURS4 = Byte.parseByte(s);
} else {
D_JOBHOURS4 = Byte.MIN_VALUE;
}
}

protected final void initD_JOBHOURS5(String s) {
if (!s.trim().isEmpty()) {
D_JOBHOURS5 = Byte.parseByte(s);
} else {
D_JOBHOURS5 = Byte.MIN_VALUE;
}
}

protected final void initD_JOBHOURS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_JOBHOURS6 = false;
} else {
D_JOBHOURS6 = true;
}
}
}

protected final void initD_JSACCS(String s) {
if (!s.trim().isEmpty()) {
D_JSACCS = Byte.parseByte(s);
} else {
D_JSACCS = Byte.MIN_VALUE;
}
}

protected final void initD_JSBOSS(String s) {
if (!s.trim().isEmpty()) {
D_JSBOSS = Byte.parseByte(s);
} else {
D_JSBOSS = Byte.MIN_VALUE;
}
}

protected final void initD_JSHRS(String s) {
if (!s.trim().isEmpty()) {
D_JSHRS = Byte.parseByte(s);
} else {
D_JSHRS = Byte.MIN_VALUE;
}
}

protected final void initD_JSPART(String s) {
if (!s.trim().isEmpty()) {
D_JSPART = Byte.parseByte(s);
} else {
D_JSPART = Byte.MIN_VALUE;
}
}

protected final void initD_JSPAYU(String s) {
if (!s.trim().isEmpty()) {
D_JSPAYU = Integer.parseInt(s);
} else {
D_JSPAYU = Integer.MIN_VALUE;
}
}

protected final void initD_JSPAYW(String s) {
if (!s.trim().isEmpty()) {
D_JSPAYW = Byte.parseByte(s);
} else {
D_JSPAYW = Byte.MIN_VALUE;
}
}

protected final void initD_JSPL(String s) {
if (!s.trim().isEmpty()) {
D_JSPL = Byte.parseByte(s);
} else {
D_JSPL = Byte.MIN_VALUE;
}
}

protected final void initD_JSPRBM(String s) {
if (!s.trim().isEmpty()) {
D_JSPRBM = Byte.parseByte(s);
} else {
D_JSPRBM = Byte.MIN_VALUE;
}
}

protected final void initD_JSPRBY4(String s) {
if (!s.trim().isEmpty()) {
D_JSPRBY4 = Short.parseShort(s);
} else {
D_JSPRBY4 = Short.MIN_VALUE;
}
}

protected final void initD_JSPREM(String s) {
if (!s.trim().isEmpty()) {
D_JSPREM = Byte.parseByte(s);
} else {
D_JSPREM = Byte.MIN_VALUE;
}
}

protected final void initD_JSPREY4(String s) {
if (!s.trim().isEmpty()) {
D_JSPREY4 = Short.parseShort(s);
} else {
D_JSPREY4 = Short.MIN_VALUE;
}
}

protected final void initD_JSPRF(String s) {
if (!s.trim().isEmpty()) {
D_JSPRF = Integer.parseInt(s);
} else {
D_JSPRF = Integer.MIN_VALUE;
}
}

protected final void initD_JSPRLS(String s) {
if (!s.trim().isEmpty()) {
D_JSPRLS = Byte.parseByte(s);
} else {
D_JSPRLS = Byte.MIN_VALUE;
}
}

protected final void initD_JSPRNI(String s) {
if (!s.trim().isEmpty()) {
D_JSPRNI = Byte.parseByte(s);
} else {
D_JSPRNI = Byte.MIN_VALUE;
}
}

protected final void initD_JSPRTX(String s) {
if (!s.trim().isEmpty()) {
D_JSPRTX = Byte.parseByte(s);
} else {
D_JSPRTX = Byte.MIN_VALUE;
}
}

protected final void initD_JSPYNI(String s) {
if (!s.trim().isEmpty()) {
D_JSPYNI = Byte.parseByte(s);
} else {
D_JSPYNI = Byte.MIN_VALUE;
}
}

protected final void initD_JSPYTX(String s) {
if (!s.trim().isEmpty()) {
D_JSPYTX = Byte.parseByte(s);
} else {
D_JSPYTX = Byte.MIN_VALUE;
}
}

protected final void initD_JSSIZE(String s) {
if (!s.trim().isEmpty()) {
D_JSSIZE = Byte.parseByte(s);
} else {
D_JSSIZE = Byte.MIN_VALUE;
}
}

protected final void initD_JSTTWT(String s) {
if (!s.trim().isEmpty()) {
D_JSTTWT = Byte.parseByte(s);
} else {
D_JSTTWT = Byte.MIN_VALUE;
}
}

protected final void initD_JSTTWTB(String s) {
if (!s.trim().isEmpty()) {
D_JSTTWTB = Short.parseShort(s);
} else {
D_JSTTWTB = Short.MIN_VALUE;
}
}

protected final void initD_JSTYPEB(String s) {
if (!s.trim().isEmpty()) {
D_JSTYPEB = Byte.parseByte(s);
} else {
D_JSTYPEB = Byte.MIN_VALUE;
}
}

protected final void initD_JSWORKTRAV(String s) {
if (!s.trim().isEmpty()) {
D_JSWORKTRAV = Byte.parseByte(s);
} else {
D_JSWORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initD_JUBGN(String s) {
if (!s.trim().isEmpty()) {
D_JUBGN = Byte.parseByte(s);
} else {
D_JUBGN = Byte.MIN_VALUE;
}
}

protected final void initD_JULK4WK(String s) {
if (!s.trim().isEmpty()) {
D_JULK4WK = Byte.parseByte(s);
} else {
D_JULK4WK = Byte.MIN_VALUE;
}
}

protected final void initD_JULK4X1(String s) {
if (!s.trim().isEmpty()) {
D_JULK4X1 = Byte.parseByte(s);
} else {
D_JULK4X1 = Byte.MIN_VALUE;
}
}

protected final void initD_JULK4X2(String s) {
if (!s.trim().isEmpty()) {
D_JULK4X2 = Byte.parseByte(s);
} else {
D_JULK4X2 = Byte.MIN_VALUE;
}
}

protected final void initD_JULK4X3(String s) {
if (!s.trim().isEmpty()) {
D_JULK4X3 = Byte.parseByte(s);
} else {
D_JULK4X3 = Byte.MIN_VALUE;
}
}

protected final void initD_JULK4X4(String s) {
if (!s.trim().isEmpty()) {
D_JULK4X4 = Byte.parseByte(s);
} else {
D_JULK4X4 = Byte.MIN_VALUE;
}
}

protected final void initD_JULK4X5(String s) {
if (!s.trim().isEmpty()) {
D_JULK4X5 = Byte.parseByte(s);
} else {
D_JULK4X5 = Byte.MIN_VALUE;
}
}

protected final void initD_JULK4X6(String s) {
if (!s.trim().isEmpty()) {
D_JULK4X6 = Byte.parseByte(s);
} else {
D_JULK4X6 = Byte.MIN_VALUE;
}
}

protected final void initD_JULK4X96(String s) {
if (!s.trim().isEmpty()) {
D_JULK4X96 = Byte.parseByte(s);
} else {
D_JULK4X96 = Byte.MIN_VALUE;
}
}

protected final void initD_JULKJB(String s) {
if (!s.trim().isEmpty()) {
D_JULKJB = Byte.parseByte(s);
} else {
D_JULKJB = Byte.MIN_VALUE;
}
}

protected final void initD_JWBS1_DV(String s) {
if (!s.trim().isEmpty()) {
D_JWBS1_DV = Byte.parseByte(s);
} else {
D_JWBS1_DV = Byte.MIN_VALUE;
}
}

protected final void initD_JWBS2_DV(String s) {
if (!s.trim().isEmpty()) {
D_JWBS2_DV = Byte.parseByte(s);
} else {
D_JWBS2_DV = Byte.MIN_VALUE;
}
}

protected final void initD_LADOPT(String s) {
if (!s.trim().isEmpty()) {
D_LADOPT = Byte.parseByte(s);
} else {
D_LADOPT = Byte.MIN_VALUE;
}
}

protected final void initD_LATE(String s) {
if (!s.trim().isEmpty()) {
D_LATE = Byte.parseByte(s);
} else {
D_LATE = Byte.MIN_VALUE;
}
}

protected final void initD_LCHMULTI1(String s) {
if (!s.trim().isEmpty()) {
D_LCHMULTI1 = Byte.parseByte(s);
} else {
D_LCHMULTI1 = Byte.MIN_VALUE;
}
}

protected final void initD_LCHMULTI2(String s) {
if (!s.trim().isEmpty()) {
D_LCHMULTI2 = Byte.parseByte(s);
} else {
D_LCHMULTI2 = Byte.MIN_VALUE;
}
}

protected final void initD_LCHMULTI3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_LCHMULTI3 = false;
} else {
D_LCHMULTI3 = true;
}
}
}

protected final void initD_LCHMULTI4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_LCHMULTI4 = false;
} else {
D_LCHMULTI4 = true;
}
}
}

protected final void initD_LCOHNPI(String s) {
if (!s.trim().isEmpty()) {
D_LCOHNPI = Byte.parseByte(s);
} else {
D_LCOHNPI = Byte.MIN_VALUE;
}
}

protected final void initD_LENINDINTV(String s) {
if (!s.trim().isEmpty()) {
D_LENINDINTV = Double.parseDouble(s);
} else {
D_LENINDINTV = Double.NaN;
}
}

protected final void initD_LIENG(String s) {
if (!s.trim().isEmpty()) {
D_LIENG = Byte.parseByte(s);
} else {
D_LIENG = Byte.MIN_VALUE;
}
}

protected final void initD_LIHOW(String s) {
if (!s.trim().isEmpty()) {
D_LIHOW = Byte.parseByte(s);
} else {
D_LIHOW = Byte.MIN_VALUE;
}
}

protected final void initD_LINGUA(String s) {
if (!s.trim().isEmpty()) {
D_LINGUA = Byte.parseByte(s);
} else {
D_LINGUA = Byte.MIN_VALUE;
}
}

protected final void initD_LITRANS(String s) {
if (!s.trim().isEmpty()) {
D_LITRANS = Byte.parseByte(s);
} else {
D_LITRANS = Byte.MIN_VALUE;
}
}

protected final void initD_LIVESP(String s) {
if (!s.trim().isEmpty()) {
D_LIVESP = Byte.parseByte(s);
} else {
D_LIVESP = Byte.MIN_VALUE;
}
}

protected final void initD_LIVESP_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_LIVESP_DV = false;
} else {
D_LIVESP_DV = true;
}
}
}

protected final void initD_LIVEWITH(String s) {
if (!s.trim().isEmpty()) {
D_LIVEWITH = Byte.parseByte(s);
} else {
D_LIVEWITH = Byte.MIN_VALUE;
}
}

protected final void initD_LIWHO(String s) {
if (!s.trim().isEmpty()) {
D_LIWHO = Byte.parseByte(s);
} else {
D_LIWHO = Byte.MIN_VALUE;
}
}

protected final void initD_LKMOVE(String s) {
if (!s.trim().isEmpty()) {
D_LKMOVE = Byte.parseByte(s);
} else {
D_LKMOVE = Byte.MIN_VALUE;
}
}

protected final void initD_LMAR1M(String s) {
if (!s.trim().isEmpty()) {
D_LMAR1M = Byte.parseByte(s);
} else {
D_LMAR1M = Byte.MIN_VALUE;
}
}

protected final void initD_LMAR1Y(String s) {
if (!s.trim().isEmpty()) {
D_LMAR1Y = Short.parseShort(s);
} else {
D_LMAR1Y = Short.MIN_VALUE;
}
}

protected final void initD_LMCBM1(String s) {
if (!s.trim().isEmpty()) {
D_LMCBM1 = Byte.parseByte(s);
} else {
D_LMCBM1 = Byte.MIN_VALUE;
}
}

protected final void initD_LMCBM2(String s) {
if (!s.trim().isEmpty()) {
D_LMCBM2 = Byte.parseByte(s);
} else {
D_LMCBM2 = Byte.MIN_VALUE;
}
}

protected final void initD_LMCBY41(String s) {
if (!s.trim().isEmpty()) {
D_LMCBY41 = Short.parseShort(s);
} else {
D_LMCBY41 = Short.MIN_VALUE;
}
}

protected final void initD_LMCBY42(String s) {
if (!s.trim().isEmpty()) {
D_LMCBY42 = Short.parseShort(s);
} else {
D_LMCBY42 = Short.MIN_VALUE;
}
}

protected final void initD_LMSPM1(String s) {
if (!s.trim().isEmpty()) {
D_LMSPM1 = Byte.parseByte(s);
} else {
D_LMSPM1 = Byte.MIN_VALUE;
}
}

protected final void initD_LMSPM2(String s) {
if (!s.trim().isEmpty()) {
D_LMSPM2 = Byte.parseByte(s);
} else {
D_LMSPM2 = Byte.MIN_VALUE;
}
}

protected final void initD_LMSPY41(String s) {
if (!s.trim().isEmpty()) {
D_LMSPY41 = Short.parseShort(s);
} else {
D_LMSPY41 = Short.MIN_VALUE;
}
}

protected final void initD_LMSPY42(String s) {
if (!s.trim().isEmpty()) {
D_LMSPY42 = Short.parseShort(s);
} else {
D_LMSPY42 = Short.MIN_VALUE;
}
}

protected final void initD_LNADOPT(String s) {
if (!s.trim().isEmpty()) {
D_LNADOPT = Byte.parseByte(s);
} else {
D_LNADOPT = Byte.MIN_VALUE;
}
}

protected final void initD_LNPRNT(String s) {
if (!s.trim().isEmpty()) {
D_LNPRNT = Byte.parseByte(s);
} else {
D_LNPRNT = Byte.MIN_VALUE;
}
}

protected final void initD_LPRNT(String s) {
if (!s.trim().isEmpty()) {
D_LPRNT = Byte.parseByte(s);
} else {
D_LPRNT = Byte.MIN_VALUE;
}
}

protected final void initD_LVHM(String s) {
if (!s.trim().isEmpty()) {
D_LVHM = Byte.parseByte(s);
} else {
D_LVHM = Byte.MIN_VALUE;
}
}

protected final void initD_LVMTHP(String s) {
if (!s.trim().isEmpty()) {
D_LVMTHP = Byte.parseByte(s);
} else {
D_LVMTHP = Byte.MIN_VALUE;
}
}

protected final void initD_LVSCHDO(String s) {
if (!s.trim().isEmpty()) {
D_LVSCHDO = Byte.parseByte(s);
} else {
D_LVSCHDO = Byte.MIN_VALUE;
}
}

protected final void initD_LVWHY(String s) {
if (!s.trim().isEmpty()) {
D_LVWHY = Byte.parseByte(s);
} else {
D_LVWHY = Byte.MIN_VALUE;
}
}

protected final void initD_LVYRP(String s) {
if (!s.trim().isEmpty()) {
D_LVYRP = Short.parseShort(s);
} else {
D_LVYRP = Short.MIN_VALUE;
}
}

protected final void initD_LWWRONG(String s) {
if (!s.trim().isEmpty()) {
D_LWWRONG = Byte.parseByte(s);
} else {
D_LWWRONG = Byte.MIN_VALUE;
}
}

protected final void initD_MACOB(String s) {
if (!s.trim().isEmpty()) {
D_MACOB = Byte.parseByte(s);
} else {
D_MACOB = Byte.MIN_VALUE;
}
}

protected final void initD_MAJU(String s) {
if (!s.trim().isEmpty()) {
D_MAJU = Byte.parseByte(s);
} else {
D_MAJU = Byte.MIN_VALUE;
}
}

protected final void initD_MANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
D_MANSSEC5_DV = Byte.parseByte(s);
} else {
D_MANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initD_MARSTAT(String s) {
if (!s.trim().isEmpty()) {
D_MARSTAT = Byte.parseByte(s);
} else {
D_MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initD_MASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
D_MASOC00_CC = Short.parseShort(s);
} else {
D_MASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initD_MASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
D_MASOC10_CC = Short.parseShort(s);
} else {
D_MASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initD_MASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
D_MASOC90_CC = Byte.parseByte(s);
} else {
D_MASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initD_MASTAT_DV(String s) {
if (!s.trim().isEmpty()) {
D_MASTAT_DV = Byte.parseByte(s);
} else {
D_MASTAT_DV = Byte.MIN_VALUE;
}
}

protected final void initD_MATLEAVE(String s) {
if (!s.trim().isEmpty()) {
D_MATLEAVE = Byte.parseByte(s);
} else {
D_MATLEAVE = Byte.MIN_VALUE;
}
}

protected final void initD_MATLV(String s) {
if (!s.trim().isEmpty()) {
D_MATLV = Byte.parseByte(s);
} else {
D_MATLV = Byte.MIN_VALUE;
}
}

protected final void initD_MATLVENDD(String s) {
if (!s.trim().isEmpty()) {
D_MATLVENDD = Byte.parseByte(s);
} else {
D_MATLVENDD = Byte.MIN_VALUE;
}
}

protected final void initD_MATLVENDM(String s) {
if (!s.trim().isEmpty()) {
D_MATLVENDM = Byte.parseByte(s);
} else {
D_MATLVENDM = Byte.MIN_VALUE;
}
}

protected final void initD_MATLVENDY4(String s) {
if (!s.trim().isEmpty()) {
D_MATLVENDY4 = Short.parseShort(s);
} else {
D_MATLVENDY4 = Short.MIN_VALUE;
}
}

protected final void initD_MATLVSTD(String s) {
if (!s.trim().isEmpty()) {
D_MATLVSTD = Byte.parseByte(s);
} else {
D_MATLVSTD = Byte.MIN_VALUE;
}
}

protected final void initD_MATLVSTM(String s) {
if (!s.trim().isEmpty()) {
D_MATLVSTM = Byte.parseByte(s);
} else {
D_MATLVSTM = Byte.MIN_VALUE;
}
}

protected final void initD_MATLVSTY4(String s) {
if (!s.trim().isEmpty()) {
D_MATLVSTY4 = Short.parseShort(s);
} else {
D_MATLVSTY4 = Short.MIN_VALUE;
}
}

protected final void initD_MAYRUK(String s) {
if (!s.trim().isEmpty()) {
D_MAYRUK = Byte.parseByte(s);
} else {
D_MAYRUK = Byte.MIN_VALUE;
}
}

protected final void initD_MED_SLP(String s) {
if (!s.trim().isEmpty()) {
D_MED_SLP = Byte.parseByte(s);
} else {
D_MED_SLP = Byte.MIN_VALUE;
}
}

protected final void initD_MEMORIG(String s) {
if (!s.trim().isEmpty()) {
D_MEMORIG = Byte.parseByte(s);
} else {
D_MEMORIG = Byte.MIN_VALUE;
}
}

protected final void initD_MEMPLOY(String s) {
if (!s.trim().isEmpty()) {
D_MEMPLOY = Byte.parseByte(s);
} else {
D_MEMPLOY = Byte.MIN_VALUE;
}
}

protected final void initD_MLAGST(String s) {
if (!s.trim().isEmpty()) {
D_MLAGST = Byte.parseByte(s);
} else {
D_MLAGST = Byte.MIN_VALUE;
}
}

protected final void initD_MLAGSTU(String s) {
if (!s.trim().isEmpty()) {
D_MLAGSTU = Byte.parseByte(s);
} else {
D_MLAGSTU = Byte.MIN_VALUE;
}
}

protected final void initD_MLFUTR(String s) {
if (!s.trim().isEmpty()) {
D_MLFUTR = Byte.parseByte(s);
} else {
D_MLFUTR = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT1(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT1 = Byte.parseByte(s);
} else {
D_MLRNOT1 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT10(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT10 = Byte.parseByte(s);
} else {
D_MLRNOT10 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT11(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT11 = Byte.parseByte(s);
} else {
D_MLRNOT11 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT12(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT12 = Byte.parseByte(s);
} else {
D_MLRNOT12 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT13(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT13 = Byte.parseByte(s);
} else {
D_MLRNOT13 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT2(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT2 = Byte.parseByte(s);
} else {
D_MLRNOT2 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT3(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT3 = Byte.parseByte(s);
} else {
D_MLRNOT3 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT4(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT4 = Byte.parseByte(s);
} else {
D_MLRNOT4 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT5(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT5 = Byte.parseByte(s);
} else {
D_MLRNOT5 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT6(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT6 = Byte.parseByte(s);
} else {
D_MLRNOT6 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT7(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT7 = Byte.parseByte(s);
} else {
D_MLRNOT7 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT8(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT8 = Byte.parseByte(s);
} else {
D_MLRNOT8 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT9(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT9 = Byte.parseByte(s);
} else {
D_MLRNOT9 = Byte.MIN_VALUE;
}
}

protected final void initD_MLRNOT97(String s) {
if (!s.trim().isEmpty()) {
D_MLRNOT97 = Byte.parseByte(s);
} else {
D_MLRNOT97 = Byte.MIN_VALUE;
}
}

protected final void initD_MLSTAT(String s) {
if (!s.trim().isEmpty()) {
D_MLSTAT = Byte.parseByte(s);
} else {
D_MLSTAT = Byte.MIN_VALUE;
}
}

protected final void initD_MLSTATCHK(String s) {
if (!s.trim().isEmpty()) {
D_MLSTATCHK = Byte.parseByte(s);
} else {
D_MLSTATCHK = Byte.MIN_VALUE;
}
}

protected final void initD_MLWKFPT(String s) {
if (!s.trim().isEmpty()) {
D_MLWKFPT = Byte.parseByte(s);
} else {
D_MLWKFPT = Byte.MIN_VALUE;
}
}

protected final void initD_MNPID(String s) {
if (!s.trim().isEmpty()) {
D_MNPID = Integer.parseInt(s);
} else {
D_MNPID = Integer.MIN_VALUE;
}
}

protected final void initD_MNPNO(String s) {
if (!s.trim().isEmpty()) {
D_MNPNO = Byte.parseByte(s);
} else {
D_MNPNO = Byte.MIN_VALUE;
}
}

protected final void initD_MNSPID(String s) {
if (!s.trim().isEmpty()) {
D_MNSPID = Integer.parseInt(s);
} else {
D_MNSPID = Integer.MIN_VALUE;
}
}

protected final void initD_MNSPNO(String s) {
if (!s.trim().isEmpty()) {
D_MNSPNO = Byte.parseByte(s);
} else {
D_MNSPNO = Byte.MIN_VALUE;
}
}

protected final void initD_MOBUSE(String s) {
if (!s.trim().isEmpty()) {
D_MOBUSE = Byte.parseByte(s);
} else {
D_MOBUSE = Byte.MIN_VALUE;
}
}

protected final void initD_MONTH(String s) {
if (!s.trim().isEmpty()) {
D_MONTH = Byte.parseByte(s);
} else {
D_MONTH = Byte.MIN_VALUE;
}
}

protected final void initD_MOVDIR(String s) {
if (!s.trim().isEmpty()) {
D_MOVDIR = Byte.parseByte(s);
} else {
D_MOVDIR = Byte.MIN_VALUE;
}
}

protected final void initD_MOVEOTH_CODE(String s) {
if (!s.trim().isEmpty()) {
D_MOVEOTH_CODE = Byte.parseByte(s);
} else {
D_MOVEOTH_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_MOVY11(String s) {
if (!s.trim().isEmpty()) {
D_MOVY11 = Byte.parseByte(s);
} else {
D_MOVY11 = Byte.MIN_VALUE;
}
}

protected final void initD_MOVY12(String s) {
if (!s.trim().isEmpty()) {
D_MOVY12 = Byte.parseByte(s);
} else {
D_MOVY12 = Byte.MIN_VALUE;
}
}

protected final void initD_MOVY13(String s) {
if (!s.trim().isEmpty()) {
D_MOVY13 = Byte.parseByte(s);
} else {
D_MOVY13 = Byte.MIN_VALUE;
}
}

protected final void initD_MOVY14(String s) {
if (!s.trim().isEmpty()) {
D_MOVY14 = Byte.parseByte(s);
} else {
D_MOVY14 = Byte.MIN_VALUE;
}
}

protected final void initD_MOVY15(String s) {
if (!s.trim().isEmpty()) {
D_MOVY15 = Byte.parseByte(s);
} else {
D_MOVY15 = Byte.MIN_VALUE;
}
}

protected final void initD_MOVY16(String s) {
if (!s.trim().isEmpty()) {
D_MOVY16 = Byte.parseByte(s);
} else {
D_MOVY16 = Byte.MIN_VALUE;
}
}

protected final void initD_MSTATCH1(String s) {
if (!s.trim().isEmpty()) {
D_MSTATCH1 = Byte.parseByte(s);
} else {
D_MSTATCH1 = Byte.MIN_VALUE;
}
}

protected final void initD_MSTATCH2(String s) {
if (!s.trim().isEmpty()) {
D_MSTATCH2 = Byte.parseByte(s);
} else {
D_MSTATCH2 = Byte.MIN_VALUE;
}
}

protected final void initD_MSTATCH3(String s) {
if (!s.trim().isEmpty()) {
D_MSTATCH3 = Byte.parseByte(s);
} else {
D_MSTATCH3 = Byte.MIN_VALUE;
}
}

protected final void initD_MSTATSAM(String s) {
if (!s.trim().isEmpty()) {
D_MSTATSAM = Byte.parseByte(s);
} else {
D_MSTATSAM = Byte.MIN_VALUE;
}
}

protected final void initD_MSTATSAMN(String s) {
if (!s.trim().isEmpty()) {
D_MSTATSAMN = Byte.parseByte(s);
} else {
D_MSTATSAMN = Byte.MIN_VALUE;
}
}

protected final void initD_MVEVER(String s) {
if (!s.trim().isEmpty()) {
D_MVEVER = Byte.parseByte(s);
} else {
D_MVEVER = Byte.MIN_VALUE;
}
}

protected final void initD_MVMNTH(String s) {
if (!s.trim().isEmpty()) {
D_MVMNTH = Byte.parseByte(s);
} else {
D_MVMNTH = Byte.MIN_VALUE;
}
}

protected final void initD_MVYR(String s) {
if (!s.trim().isEmpty()) {
D_MVYR = Short.parseShort(s);
} else {
D_MVYR = Short.MIN_VALUE;
}
}

protected final void initD_NADOPTCH(String s) {
if (!s.trim().isEmpty()) {
D_NADOPTCH = Byte.parseByte(s);
} else {
D_NADOPTCH = Byte.MIN_VALUE;
}
}

protected final void initD_NAIDXHH(String s) {
if (!s.trim().isEmpty()) {
D_NAIDXHH = Byte.parseByte(s);
} else {
D_NAIDXHH = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH01(String s) {
if (!s.trim().isEmpty()) {
D_NATCH01 = Byte.parseByte(s);
} else {
D_NATCH01 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH02(String s) {
if (!s.trim().isEmpty()) {
D_NATCH02 = Byte.parseByte(s);
} else {
D_NATCH02 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH03(String s) {
if (!s.trim().isEmpty()) {
D_NATCH03 = Byte.parseByte(s);
} else {
D_NATCH03 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH04(String s) {
if (!s.trim().isEmpty()) {
D_NATCH04 = Byte.parseByte(s);
} else {
D_NATCH04 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH05(String s) {
if (!s.trim().isEmpty()) {
D_NATCH05 = Byte.parseByte(s);
} else {
D_NATCH05 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH06(String s) {
if (!s.trim().isEmpty()) {
D_NATCH06 = Byte.parseByte(s);
} else {
D_NATCH06 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH07(String s) {
if (!s.trim().isEmpty()) {
D_NATCH07 = Byte.parseByte(s);
} else {
D_NATCH07 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH08(String s) {
if (!s.trim().isEmpty()) {
D_NATCH08 = Byte.parseByte(s);
} else {
D_NATCH08 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH09(String s) {
if (!s.trim().isEmpty()) {
D_NATCH09 = Byte.parseByte(s);
} else {
D_NATCH09 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH10(String s) {
if (!s.trim().isEmpty()) {
D_NATCH10 = Byte.parseByte(s);
} else {
D_NATCH10 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH11(String s) {
if (!s.trim().isEmpty()) {
D_NATCH11 = Byte.parseByte(s);
} else {
D_NATCH11 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH12(String s) {
if (!s.trim().isEmpty()) {
D_NATCH12 = Byte.parseByte(s);
} else {
D_NATCH12 = Byte.MIN_VALUE;
}
}

protected final void initD_NATCH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_NATCH13 = false;
} else {
D_NATCH13 = true;
}
}
}

protected final void initD_NATCH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_NATCH14 = false;
} else {
D_NATCH14 = true;
}
}
}

protected final void initD_NATCH15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_NATCH15 = false;
} else {
D_NATCH15 = true;
}
}
}

protected final void initD_NATCH16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -7) {
D_NATCH16 = false;
} else {
D_NATCH16 = true;
}
}
}

protected final void initD_NATID1(String s) {
if (!s.trim().isEmpty()) {
D_NATID1 = Byte.parseByte(s);
} else {
D_NATID1 = Byte.MIN_VALUE;
}
}

protected final void initD_NATID2(String s) {
if (!s.trim().isEmpty()) {
D_NATID2 = Byte.parseByte(s);
} else {
D_NATID2 = Byte.MIN_VALUE;
}
}

protected final void initD_NATID3(String s) {
if (!s.trim().isEmpty()) {
D_NATID3 = Byte.parseByte(s);
} else {
D_NATID3 = Byte.MIN_VALUE;
}
}

protected final void initD_NATID4(String s) {
if (!s.trim().isEmpty()) {
D_NATID4 = Byte.parseByte(s);
} else {
D_NATID4 = Byte.MIN_VALUE;
}
}

protected final void initD_NATID5(String s) {
if (!s.trim().isEmpty()) {
D_NATID5 = Byte.parseByte(s);
} else {
D_NATID5 = Byte.MIN_VALUE;
}
}

protected final void initD_NATID6(String s) {
if (!s.trim().isEmpty()) {
D_NATID6 = Byte.parseByte(s);
} else {
D_NATID6 = Byte.MIN_VALUE;
}
}

protected final void initD_NATID97(String s) {
if (!s.trim().isEmpty()) {
D_NATID97 = Byte.parseByte(s);
} else {
D_NATID97 = Byte.MIN_VALUE;
}
}

protected final void initD_NCARS(String s) {
if (!s.trim().isEmpty()) {
D_NCARS = Byte.parseByte(s);
} else {
D_NCARS = Byte.MIN_VALUE;
}
}

protected final void initD_NCCJT(String s) {
if (!s.trim().isEmpty()) {
D_NCCJT = Byte.parseByte(s);
} else {
D_NCCJT = Byte.MIN_VALUE;
}
}

protected final void initD_NCCSOLE(String s) {
if (!s.trim().isEmpty()) {
D_NCCSOLE = Byte.parseByte(s);
} else {
D_NCCSOLE = Byte.MIN_VALUE;
}
}

protected final void initD_NCH10(String s) {
if (!s.trim().isEmpty()) {
D_NCH10 = Byte.parseByte(s);
} else {
D_NCH10 = Byte.MIN_VALUE;
}
}

protected final void initD_NCH10TO15(String s) {
if (!s.trim().isEmpty()) {
D_NCH10TO15 = Byte.parseByte(s);
} else {
D_NCH10TO15 = Byte.MIN_VALUE;
}
}

protected final void initD_NCH14RESP(String s) {
if (!s.trim().isEmpty()) {
D_NCH14RESP = Byte.parseByte(s);
} else {
D_NCH14RESP = Byte.MIN_VALUE;
}
}

protected final void initD_NCH3RESP(String s) {
if (!s.trim().isEmpty()) {
D_NCH3RESP = Byte.parseByte(s);
} else {
D_NCH3RESP = Byte.MIN_VALUE;
}
}

protected final void initD_NCH415RESP(String s) {
if (!s.trim().isEmpty()) {
D_NCH415RESP = Byte.parseByte(s);
} else {
D_NCH415RESP = Byte.MIN_VALUE;
}
}

protected final void initD_NCH5RESP(String s) {
if (!s.trim().isEmpty()) {
D_NCH5RESP = Byte.parseByte(s);
} else {
D_NCH5RESP = Byte.MIN_VALUE;
}
}

protected final void initD_NCH5TO15(String s) {
if (!s.trim().isEmpty()) {
D_NCH5TO15 = Byte.parseByte(s);
} else {
D_NCH5TO15 = Byte.MIN_VALUE;
}
}

protected final void initD_NCH8RESP(String s) {
if (!s.trim().isEmpty()) {
D_NCH8RESP = Byte.parseByte(s);
} else {
D_NCH8RESP = Byte.MIN_VALUE;
}
}

protected final void initD_NCHILD(String s) {
if (!s.trim().isEmpty()) {
D_NCHILD = Byte.parseByte(s);
} else {
D_NCHILD = Byte.MIN_VALUE;
}
}

protected final void initD_NCHILD_DV(String s) {
if (!s.trim().isEmpty()) {
D_NCHILD_DV = Byte.parseByte(s);
} else {
D_NCHILD_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NCHRESP(String s) {
if (!s.trim().isEmpty()) {
D_NCHRESP = Byte.parseByte(s);
} else {
D_NCHRESP = Byte.MIN_VALUE;
}
}

protected final void initD_NCHUND18RESP(String s) {
if (!s.trim().isEmpty()) {
D_NCHUND18RESP = Byte.parseByte(s);
} else {
D_NCHUND18RESP = Byte.MIN_VALUE;
}
}

protected final void initD_NCHUNDER16(String s) {
if (!s.trim().isEmpty()) {
D_NCHUNDER16 = Byte.parseByte(s);
} else {
D_NCHUNDER16 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRR1(String s) {
if (!s.trim().isEmpty()) {
D_NCRR1 = Byte.parseByte(s);
} else {
D_NCRR1 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRR11(String s) {
if (!s.trim().isEmpty()) {
D_NCRR11 = Byte.parseByte(s);
} else {
D_NCRR11 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRR12(String s) {
if (!s.trim().isEmpty()) {
D_NCRR12 = Byte.parseByte(s);
} else {
D_NCRR12 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRR3(String s) {
if (!s.trim().isEmpty()) {
D_NCRR3 = Byte.parseByte(s);
} else {
D_NCRR3 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRR4(String s) {
if (!s.trim().isEmpty()) {
D_NCRR4 = Byte.parseByte(s);
} else {
D_NCRR4 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRR5(String s) {
if (!s.trim().isEmpty()) {
D_NCRR5 = Byte.parseByte(s);
} else {
D_NCRR5 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRR6(String s) {
if (!s.trim().isEmpty()) {
D_NCRR6 = Byte.parseByte(s);
} else {
D_NCRR6 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRR8(String s) {
if (!s.trim().isEmpty()) {
D_NCRR8 = Byte.parseByte(s);
} else {
D_NCRR8 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRR9(String s) {
if (!s.trim().isEmpty()) {
D_NCRR9 = Byte.parseByte(s);
} else {
D_NCRR9 = Byte.MIN_VALUE;
}
}

protected final void initD_NCRRM(String s) {
if (!s.trim().isEmpty()) {
D_NCRRM = Byte.parseByte(s);
} else {
D_NCRRM = Byte.MIN_VALUE;
}
}

protected final void initD_NCRRY4(String s) {
if (!s.trim().isEmpty()) {
D_NCRRY4 = Short.parseShort(s);
} else {
D_NCRRY4 = Short.MIN_VALUE;
}
}

protected final void initD_NDEPCHL_DV(String s) {
if (!s.trim().isEmpty()) {
D_NDEPCHL_DV = Byte.parseByte(s);
} else {
D_NDEPCHL_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NETPUSE(String s) {
if (!s.trim().isEmpty()) {
D_NETPUSE = Byte.parseByte(s);
} else {
D_NETPUSE = Byte.MIN_VALUE;
}
}

protected final void initD_NETUSE(String s) {
if (!s.trim().isEmpty()) {
D_NETUSE = Byte.parseByte(s);
} else {
D_NETUSE = Byte.MIN_VALUE;
}
}

protected final void initD_NEXT(String s) {
if (!s.trim().isEmpty()) {
D_NEXT = Byte.parseByte(s);
} else {
D_NEXT = Byte.MIN_VALUE;
}
}

protected final void initD_NEXT1(String s) {
if (!s.trim().isEmpty()) {
D_NEXT1 = Byte.parseByte(s);
} else {
D_NEXT1 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXT2(String s) {
if (!s.trim().isEmpty()) {
D_NEXT2 = Byte.parseByte(s);
} else {
D_NEXT2 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXT3(String s) {
if (!s.trim().isEmpty()) {
D_NEXT3 = Byte.parseByte(s);
} else {
D_NEXT3 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXT4(String s) {
if (!s.trim().isEmpty()) {
D_NEXT4 = Byte.parseByte(s);
} else {
D_NEXT4 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXT5(String s) {
if (!s.trim().isEmpty()) {
D_NEXT5 = Byte.parseByte(s);
} else {
D_NEXT5 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXT6(String s) {
if (!s.trim().isEmpty()) {
D_NEXT6 = Byte.parseByte(s);
} else {
D_NEXT6 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTELSE1(String s) {
if (!s.trim().isEmpty()) {
D_NEXTELSE1 = Byte.parseByte(s);
} else {
D_NEXTELSE1 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTELSE2(String s) {
if (!s.trim().isEmpty()) {
D_NEXTELSE2 = Byte.parseByte(s);
} else {
D_NEXTELSE2 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTELSE3(String s) {
if (!s.trim().isEmpty()) {
D_NEXTELSE3 = Byte.parseByte(s);
} else {
D_NEXTELSE3 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTELSE4(String s) {
if (!s.trim().isEmpty()) {
D_NEXTELSE4 = Byte.parseByte(s);
} else {
D_NEXTELSE4 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTELSE5(String s) {
if (!s.trim().isEmpty()) {
D_NEXTELSE5 = Byte.parseByte(s);
} else {
D_NEXTELSE5 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTELSE6(String s) {
if (!s.trim().isEmpty()) {
D_NEXTELSE6 = Byte.parseByte(s);
} else {
D_NEXTELSE6 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTJOB1(String s) {
if (!s.trim().isEmpty()) {
D_NEXTJOB1 = Byte.parseByte(s);
} else {
D_NEXTJOB1 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTJOB2(String s) {
if (!s.trim().isEmpty()) {
D_NEXTJOB2 = Byte.parseByte(s);
} else {
D_NEXTJOB2 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTJOB3(String s) {
if (!s.trim().isEmpty()) {
D_NEXTJOB3 = Byte.parseByte(s);
} else {
D_NEXTJOB3 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTJOB4(String s) {
if (!s.trim().isEmpty()) {
D_NEXTJOB4 = Byte.parseByte(s);
} else {
D_NEXTJOB4 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTJOB5(String s) {
if (!s.trim().isEmpty()) {
D_NEXTJOB5 = Byte.parseByte(s);
} else {
D_NEXTJOB5 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTJOB6(String s) {
if (!s.trim().isEmpty()) {
D_NEXTJOB6 = Byte.parseByte(s);
} else {
D_NEXTJOB6 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTSTAT1(String s) {
if (!s.trim().isEmpty()) {
D_NEXTSTAT1 = Byte.parseByte(s);
} else {
D_NEXTSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTSTAT2(String s) {
if (!s.trim().isEmpty()) {
D_NEXTSTAT2 = Byte.parseByte(s);
} else {
D_NEXTSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTSTAT3(String s) {
if (!s.trim().isEmpty()) {
D_NEXTSTAT3 = Byte.parseByte(s);
} else {
D_NEXTSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTSTAT4(String s) {
if (!s.trim().isEmpty()) {
D_NEXTSTAT4 = Byte.parseByte(s);
} else {
D_NEXTSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTSTAT5(String s) {
if (!s.trim().isEmpty()) {
D_NEXTSTAT5 = Byte.parseByte(s);
} else {
D_NEXTSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initD_NEXTSTAT6(String s) {
if (!s.trim().isEmpty()) {
D_NEXTSTAT6 = Byte.parseByte(s);
} else {
D_NEXTSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH01(String s) {
if (!s.trim().isEmpty()) {
D_NFH01 = Byte.parseByte(s);
} else {
D_NFH01 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH02(String s) {
if (!s.trim().isEmpty()) {
D_NFH02 = Byte.parseByte(s);
} else {
D_NFH02 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH03(String s) {
if (!s.trim().isEmpty()) {
D_NFH03 = Byte.parseByte(s);
} else {
D_NFH03 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH04(String s) {
if (!s.trim().isEmpty()) {
D_NFH04 = Byte.parseByte(s);
} else {
D_NFH04 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH05(String s) {
if (!s.trim().isEmpty()) {
D_NFH05 = Byte.parseByte(s);
} else {
D_NFH05 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH06(String s) {
if (!s.trim().isEmpty()) {
D_NFH06 = Byte.parseByte(s);
} else {
D_NFH06 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH07(String s) {
if (!s.trim().isEmpty()) {
D_NFH07 = Byte.parseByte(s);
} else {
D_NFH07 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH08(String s) {
if (!s.trim().isEmpty()) {
D_NFH08 = Byte.parseByte(s);
} else {
D_NFH08 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH09(String s) {
if (!s.trim().isEmpty()) {
D_NFH09 = Byte.parseByte(s);
} else {
D_NFH09 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH10(String s) {
if (!s.trim().isEmpty()) {
D_NFH10 = Byte.parseByte(s);
} else {
D_NFH10 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH11(String s) {
if (!s.trim().isEmpty()) {
D_NFH11 = Byte.parseByte(s);
} else {
D_NFH11 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH12(String s) {
if (!s.trim().isEmpty()) {
D_NFH12 = Byte.parseByte(s);
} else {
D_NFH12 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH13(String s) {
if (!s.trim().isEmpty()) {
D_NFH13 = Byte.parseByte(s);
} else {
D_NFH13 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH14(String s) {
if (!s.trim().isEmpty()) {
D_NFH14 = Byte.parseByte(s);
} else {
D_NFH14 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH15(String s) {
if (!s.trim().isEmpty()) {
D_NFH15 = Byte.parseByte(s);
} else {
D_NFH15 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH16(String s) {
if (!s.trim().isEmpty()) {
D_NFH16 = Byte.parseByte(s);
} else {
D_NFH16 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH17(String s) {
if (!s.trim().isEmpty()) {
D_NFH17 = Byte.parseByte(s);
} else {
D_NFH17 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH18(String s) {
if (!s.trim().isEmpty()) {
D_NFH18 = Byte.parseByte(s);
} else {
D_NFH18 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH19(String s) {
if (!s.trim().isEmpty()) {
D_NFH19 = Byte.parseByte(s);
} else {
D_NFH19 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH20(String s) {
if (!s.trim().isEmpty()) {
D_NFH20 = Byte.parseByte(s);
} else {
D_NFH20 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH21(String s) {
if (!s.trim().isEmpty()) {
D_NFH21 = Byte.parseByte(s);
} else {
D_NFH21 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH22(String s) {
if (!s.trim().isEmpty()) {
D_NFH22 = Byte.parseByte(s);
} else {
D_NFH22 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH23(String s) {
if (!s.trim().isEmpty()) {
D_NFH23 = Byte.parseByte(s);
} else {
D_NFH23 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH24(String s) {
if (!s.trim().isEmpty()) {
D_NFH24 = Byte.parseByte(s);
} else {
D_NFH24 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH25(String s) {
if (!s.trim().isEmpty()) {
D_NFH25 = Byte.parseByte(s);
} else {
D_NFH25 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH26(String s) {
if (!s.trim().isEmpty()) {
D_NFH26 = Byte.parseByte(s);
} else {
D_NFH26 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH27(String s) {
if (!s.trim().isEmpty()) {
D_NFH27 = Byte.parseByte(s);
} else {
D_NFH27 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH28(String s) {
if (!s.trim().isEmpty()) {
D_NFH28 = Byte.parseByte(s);
} else {
D_NFH28 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH29(String s) {
if (!s.trim().isEmpty()) {
D_NFH29 = Byte.parseByte(s);
} else {
D_NFH29 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH30(String s) {
if (!s.trim().isEmpty()) {
D_NFH30 = Byte.parseByte(s);
} else {
D_NFH30 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH31(String s) {
if (!s.trim().isEmpty()) {
D_NFH31 = Byte.parseByte(s);
} else {
D_NFH31 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH32(String s) {
if (!s.trim().isEmpty()) {
D_NFH32 = Byte.parseByte(s);
} else {
D_NFH32 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH33(String s) {
if (!s.trim().isEmpty()) {
D_NFH33 = Byte.parseByte(s);
} else {
D_NFH33 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH34(String s) {
if (!s.trim().isEmpty()) {
D_NFH34 = Byte.parseByte(s);
} else {
D_NFH34 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH35(String s) {
if (!s.trim().isEmpty()) {
D_NFH35 = Byte.parseByte(s);
} else {
D_NFH35 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH36(String s) {
if (!s.trim().isEmpty()) {
D_NFH36 = Byte.parseByte(s);
} else {
D_NFH36 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH37(String s) {
if (!s.trim().isEmpty()) {
D_NFH37 = Byte.parseByte(s);
} else {
D_NFH37 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH38(String s) {
if (!s.trim().isEmpty()) {
D_NFH38 = Byte.parseByte(s);
} else {
D_NFH38 = Byte.MIN_VALUE;
}
}

protected final void initD_NFH39(String s) {
if (!s.trim().isEmpty()) {
D_NFH39 = Byte.parseByte(s);
} else {
D_NFH39 = Byte.MIN_VALUE;
}
}

protected final void initD_NFLYEU(String s) {
if (!s.trim().isEmpty()) {
D_NFLYEU = Byte.parseByte(s);
} else {
D_NFLYEU = Byte.MIN_VALUE;
}
}

protected final void initD_NFLYIN(String s) {
if (!s.trim().isEmpty()) {
D_NFLYIN = Byte.parseByte(s);
} else {
D_NFLYIN = Byte.MIN_VALUE;
}
}

protected final void initD_NFLYOS(String s) {
if (!s.trim().isEmpty()) {
D_NFLYOS = Byte.parseByte(s);
} else {
D_NFLYOS = Byte.MIN_VALUE;
}
}

protected final void initD_NGRP_DV(String s) {
if (!s.trim().isEmpty()) {
D_NGRP_DV = Byte.parseByte(s);
} else {
D_NGRP_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NHIQUAL_DV(String s) {
if (!s.trim().isEmpty()) {
D_NHIQUAL_DV = Byte.parseByte(s);
} else {
D_NHIQUAL_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NIACT(String s) {
if (!s.trim().isEmpty()) {
D_NIACT = Byte.parseByte(s);
} else {
D_NIACT = Byte.MIN_VALUE;
}
}

protected final void initD_NIREL(String s) {
if (!s.trim().isEmpty()) {
D_NIREL = Byte.parseByte(s);
} else {
D_NIREL = Byte.MIN_VALUE;
}
}

protected final void initD_NISERPS(String s) {
if (!s.trim().isEmpty()) {
D_NISERPS = Byte.parseByte(s);
} else {
D_NISERPS = Byte.MIN_VALUE;
}
}

protected final void initD_NMAR(String s) {
if (!s.trim().isEmpty()) {
D_NMAR = Byte.parseByte(s);
} else {
D_NMAR = Byte.MIN_VALUE;
}
}

protected final void initD_NMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
D_NMPSP_DV = Byte.parseByte(s);
} else {
D_NMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NNATCH(String s) {
if (!s.trim().isEmpty()) {
D_NNATCH = Byte.parseByte(s);
} else {
D_NNATCH = Byte.MIN_VALUE;
}
}

protected final void initD_NNEWBORN(String s) {
if (!s.trim().isEmpty()) {
D_NNEWBORN = Byte.parseByte(s);
} else {
D_NNEWBORN = Byte.MIN_VALUE;
}
}

protected final void initD_NNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
D_NNMPSP_DV = Byte.parseByte(s);
} else {
D_NNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NNSIB_DV(String s) {
if (!s.trim().isEmpty()) {
D_NNSIB_DV = Byte.parseByte(s);
} else {
D_NNSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NNSSIB_DV(String s) {
if (!s.trim().isEmpty()) {
D_NNSSIB_DV = Byte.parseByte(s);
} else {
D_NNSSIB_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NOSVY(String s) {
if (!s.trim().isEmpty()) {
D_NOSVY = Byte.parseByte(s);
} else {
D_NOSVY = Byte.MIN_VALUE;
}
}

protected final void initD_NOTEMPCHK(String s) {
if (!s.trim().isEmpty()) {
D_NOTEMPCHK = Byte.parseByte(s);
} else {
D_NOTEMPCHK = Byte.MIN_VALUE;
}
}

protected final void initD_NPENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
D_NPENSIONER_DV = Byte.parseByte(s);
} else {
D_NPENSIONER_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NPNS_DV(String s) {
if (!s.trim().isEmpty()) {
D_NPNS_DV = Byte.parseByte(s);
} else {
D_NPNS_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NPN_DV(String s) {
if (!s.trim().isEmpty()) {
D_NPN_DV = Byte.parseByte(s);
} else {
D_NPN_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NQFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
D_NQFHIGH_DV = Byte.parseByte(s);
} else {
D_NQFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NUNMPSP_DV(String s) {
if (!s.trim().isEmpty()) {
D_NUNMPSP_DV = Byte.parseByte(s);
} else {
D_NUNMPSP_DV = Byte.MIN_VALUE;
}
}

protected final void initD_NXTJBENDD(String s) {
if (!s.trim().isEmpty()) {
D_NXTJBENDD = Byte.parseByte(s);
} else {
D_NXTJBENDD = Byte.MIN_VALUE;
}
}

protected final void initD_NXTJBENDM(String s) {
if (!s.trim().isEmpty()) {
D_NXTJBENDM = Byte.parseByte(s);
} else {
D_NXTJBENDM = Byte.MIN_VALUE;
}
}

protected final void initD_NXTJBENDY4(String s) {
if (!s.trim().isEmpty()) {
D_NXTJBENDY4 = Short.parseShort(s);
} else {
D_NXTJBENDY4 = Short.MIN_VALUE;
}
}

protected final void initD_NXTJBES(String s) {
if (!s.trim().isEmpty()) {
D_NXTJBES = Byte.parseByte(s);
} else {
D_NXTJBES = Byte.MIN_VALUE;
}
}

protected final void initD_NXTJBHRS(String s) {
if (!s.trim().isEmpty()) {
D_NXTJBHRS = Byte.parseByte(s);
} else {
D_NXTJBHRS = Byte.MIN_VALUE;
}
}

protected final void initD_NXTST(String s) {
if (!s.trim().isEmpty()) {
D_NXTST = Byte.parseByte(s);
} else {
D_NXTST = Byte.MIN_VALUE;
}
}

protected final void initD_NXTSTELSE(String s) {
if (!s.trim().isEmpty()) {
D_NXTSTELSE = Byte.parseByte(s);
} else {
D_NXTSTELSE = Byte.MIN_VALUE;
}
}

protected final void initD_NXTSTENDD(String s) {
if (!s.trim().isEmpty()) {
D_NXTSTENDD = Byte.parseByte(s);
} else {
D_NXTSTENDD = Byte.MIN_VALUE;
}
}

protected final void initD_NXTSTENDM(String s) {
if (!s.trim().isEmpty()) {
D_NXTSTENDM = Byte.parseByte(s);
} else {
D_NXTSTENDM = Byte.MIN_VALUE;
}
}

protected final void initD_NXTSTENDY4(String s) {
if (!s.trim().isEmpty()) {
D_NXTSTENDY4 = Short.parseShort(s);
} else {
D_NXTSTENDY4 = Short.MIN_VALUE;
}
}

protected final void initD_OLYMACT11(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT11 = Byte.parseByte(s);
} else {
D_OLYMACT11 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT12(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT12 = Byte.parseByte(s);
} else {
D_OLYMACT12 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT13(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT13 = Byte.parseByte(s);
} else {
D_OLYMACT13 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT14(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT14 = Byte.parseByte(s);
} else {
D_OLYMACT14 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT15(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT15 = Byte.parseByte(s);
} else {
D_OLYMACT15 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT16(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT16 = Byte.parseByte(s);
} else {
D_OLYMACT16 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT17(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT17 = Byte.parseByte(s);
} else {
D_OLYMACT17 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT18(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT18 = Byte.parseByte(s);
} else {
D_OLYMACT18 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT196(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT196 = Byte.parseByte(s);
} else {
D_OLYMACT196 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT198(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT198 = Byte.parseByte(s);
} else {
D_OLYMACT198 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT21(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT21 = Byte.parseByte(s);
} else {
D_OLYMACT21 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT22(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT22 = Byte.parseByte(s);
} else {
D_OLYMACT22 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT23(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT23 = Byte.parseByte(s);
} else {
D_OLYMACT23 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT24(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT24 = Byte.parseByte(s);
} else {
D_OLYMACT24 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT25(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT25 = Byte.parseByte(s);
} else {
D_OLYMACT25 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT26(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT26 = Byte.parseByte(s);
} else {
D_OLYMACT26 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT27(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT27 = Byte.parseByte(s);
} else {
D_OLYMACT27 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT28(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT28 = Byte.parseByte(s);
} else {
D_OLYMACT28 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT296(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT296 = Byte.parseByte(s);
} else {
D_OLYMACT296 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT298(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT298 = Byte.parseByte(s);
} else {
D_OLYMACT298 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT31(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT31 = Byte.parseByte(s);
} else {
D_OLYMACT31 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT32(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT32 = Byte.parseByte(s);
} else {
D_OLYMACT32 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT33(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT33 = Byte.parseByte(s);
} else {
D_OLYMACT33 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT34(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT34 = Byte.parseByte(s);
} else {
D_OLYMACT34 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT35(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT35 = Byte.parseByte(s);
} else {
D_OLYMACT35 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT36(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT36 = Byte.parseByte(s);
} else {
D_OLYMACT36 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT37(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT37 = Byte.parseByte(s);
} else {
D_OLYMACT37 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT38(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT38 = Byte.parseByte(s);
} else {
D_OLYMACT38 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT396(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT396 = Byte.parseByte(s);
} else {
D_OLYMACT396 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMACT398(String s) {
if (!s.trim().isEmpty()) {
D_OLYMACT398 = Byte.parseByte(s);
} else {
D_OLYMACT398 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS11(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS11 = Byte.parseByte(s);
} else {
D_OLYMPAS11 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS12(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS12 = Byte.parseByte(s);
} else {
D_OLYMPAS12 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS13(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS13 = Byte.parseByte(s);
} else {
D_OLYMPAS13 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS14(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS14 = Byte.parseByte(s);
} else {
D_OLYMPAS14 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS15(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS15 = Byte.parseByte(s);
} else {
D_OLYMPAS15 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS196(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS196 = Byte.parseByte(s);
} else {
D_OLYMPAS196 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS198(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS198 = Byte.parseByte(s);
} else {
D_OLYMPAS198 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS21(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS21 = Byte.parseByte(s);
} else {
D_OLYMPAS21 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS22(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS22 = Byte.parseByte(s);
} else {
D_OLYMPAS22 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS23(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS23 = Byte.parseByte(s);
} else {
D_OLYMPAS23 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS24(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS24 = Byte.parseByte(s);
} else {
D_OLYMPAS24 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS25(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS25 = Byte.parseByte(s);
} else {
D_OLYMPAS25 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS296(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS296 = Byte.parseByte(s);
} else {
D_OLYMPAS296 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS298(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS298 = Byte.parseByte(s);
} else {
D_OLYMPAS298 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS31(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS31 = Byte.parseByte(s);
} else {
D_OLYMPAS31 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS32(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS32 = Byte.parseByte(s);
} else {
D_OLYMPAS32 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS33(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS33 = Byte.parseByte(s);
} else {
D_OLYMPAS33 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS34(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS34 = Byte.parseByte(s);
} else {
D_OLYMPAS34 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS35(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS35 = Byte.parseByte(s);
} else {
D_OLYMPAS35 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS396(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS396 = Byte.parseByte(s);
} else {
D_OLYMPAS396 = Byte.MIN_VALUE;
}
}

protected final void initD_OLYMPAS398(String s) {
if (!s.trim().isEmpty()) {
D_OLYMPAS398 = Byte.parseByte(s);
} else {
D_OLYMPAS398 = Byte.MIN_VALUE;
}
}

protected final void initD_OPRLG(String s) {
if (!s.trim().isEmpty()) {
D_OPRLG = Byte.parseByte(s);
} else {
D_OPRLG = Byte.MIN_VALUE;
}
}

protected final void initD_OPRLG0(String s) {
if (!s.trim().isEmpty()) {
D_OPRLG0 = Byte.parseByte(s);
} else {
D_OPRLG0 = Byte.MIN_VALUE;
}
}

protected final void initD_OPRLG0NI(String s) {
if (!s.trim().isEmpty()) {
D_OPRLG0NI = Byte.parseByte(s);
} else {
D_OPRLG0NI = Byte.MIN_VALUE;
}
}

protected final void initD_OPRLG1(String s) {
if (!s.trim().isEmpty()) {
D_OPRLG1 = Byte.parseByte(s);
} else {
D_OPRLG1 = Byte.MIN_VALUE;
}
}

protected final void initD_OPRLG2(String s) {
if (!s.trim().isEmpty()) {
D_OPRLG2 = Byte.parseByte(s);
} else {
D_OPRLG2 = Byte.MIN_VALUE;
}
}

protected final void initD_OPRLG3(String s) {
if (!s.trim().isEmpty()) {
D_OPRLG3 = Byte.parseByte(s);
} else {
D_OPRLG3 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV1(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV1 = Byte.parseByte(s);
} else {
D_OPSERV1 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV10(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV10 = Byte.parseByte(s);
} else {
D_OPSERV10 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV2(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV2 = Byte.parseByte(s);
} else {
D_OPSERV2 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV3(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV3 = Byte.parseByte(s);
} else {
D_OPSERV3 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV4(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV4 = Byte.parseByte(s);
} else {
D_OPSERV4 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV5(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV5 = Byte.parseByte(s);
} else {
D_OPSERV5 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV6(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV6 = Byte.parseByte(s);
} else {
D_OPSERV6 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV7(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV7 = Byte.parseByte(s);
} else {
D_OPSERV7 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV8(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV8 = Byte.parseByte(s);
} else {
D_OPSERV8 = Byte.MIN_VALUE;
}
}

protected final void initD_OPSERV9(String s) {
if (!s.trim().isEmpty()) {
D_OPSERV9 = Byte.parseByte(s);
} else {
D_OPSERV9 = Byte.MIN_VALUE;
}
}

protected final void initD_ORIGADD(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_ORIGADD = false;
} else {
D_ORIGADD = true;
}
}
}

protected final void initD_OTHCONT(String s) {
if (!s.trim().isEmpty()) {
D_OTHCONT = Byte.parseByte(s);
} else {
D_OTHCONT = Byte.MIN_VALUE;
}
}

protected final void initD_OVTNSA(String s) {
if (!s.trim().isEmpty()) {
D_OVTNSA = Byte.parseByte(s);
} else {
D_OVTNSA = Byte.MIN_VALUE;
}
}

protected final void initD_OVTPAY(String s) {
if (!s.trim().isEmpty()) {
D_OVTPAY = Byte.parseByte(s);
} else {
D_OVTPAY = Byte.MIN_VALUE;
}
}

protected final void initD_OVTRATE(String s) {
if (!s.trim().isEmpty()) {
D_OVTRATE = Double.parseDouble(s);
} else {
D_OVTRATE = Double.NaN;
}
}

protected final void initD_OVTREST(String s) {
if (!s.trim().isEmpty()) {
D_OVTREST = Byte.parseByte(s);
} else {
D_OVTREST = Byte.MIN_VALUE;
}
}

protected final void initD_PACOB(String s) {
if (!s.trim().isEmpty()) {
D_PACOB = Byte.parseByte(s);
} else {
D_PACOB = Byte.MIN_VALUE;
}
}

protected final void initD_PAJU(String s) {
if (!s.trim().isEmpty()) {
D_PAJU = Byte.parseByte(s);
} else {
D_PAJU = Byte.MIN_VALUE;
}
}

protected final void initD_PANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
D_PANSSEC5_DV = Byte.parseByte(s);
} else {
D_PANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initD_PASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
D_PASOC00_CC = Short.parseShort(s);
} else {
D_PASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initD_PASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
D_PASOC10_CC = Short.parseShort(s);
} else {
D_PASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initD_PASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
D_PASOC90_CC = Byte.parseByte(s);
} else {
D_PASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initD_PAYGL(String s) {
if (!s.trim().isEmpty()) {
D_PAYGL = Integer.parseInt(s);
} else {
D_PAYGL = Integer.MIN_VALUE;
}
}

protected final void initD_PAYGU_DV(String s) {
if (!s.trim().isEmpty()) {
D_PAYGU_DV = Double.parseDouble(s);
} else {
D_PAYGU_DV = Double.NaN;
}
}

protected final void initD_PAYGU_IF(String s) {
if (!s.trim().isEmpty()) {
D_PAYGU_IF = Byte.parseByte(s);
} else {
D_PAYGU_IF = Byte.MIN_VALUE;
}
}

protected final void initD_PAYGWC(String s) {
if (!s.trim().isEmpty()) {
D_PAYGWC = Byte.parseByte(s);
} else {
D_PAYGWC = Byte.MIN_VALUE;
}
}

protected final void initD_PAYG_DV(String s) {
if (!s.trim().isEmpty()) {
D_PAYG_DV = Double.parseDouble(s);
} else {
D_PAYG_DV = Double.NaN;
}
}

protected final void initD_PAYNL(String s) {
if (!s.trim().isEmpty()) {
D_PAYNL = Integer.parseInt(s);
} else {
D_PAYNL = Integer.MIN_VALUE;
}
}

protected final void initD_PAYNU_DV(String s) {
if (!s.trim().isEmpty()) {
D_PAYNU_DV = Double.parseDouble(s);
} else {
D_PAYNU_DV = Double.NaN;
}
}

protected final void initD_PAYNU_IF(String s) {
if (!s.trim().isEmpty()) {
D_PAYNU_IF = Byte.parseByte(s);
} else {
D_PAYNU_IF = Byte.MIN_VALUE;
}
}

protected final void initD_PAYNWC(String s) {
if (!s.trim().isEmpty()) {
D_PAYNWC = Byte.parseByte(s);
} else {
D_PAYNWC = Byte.MIN_VALUE;
}
}

protected final void initD_PAYN_DV(String s) {
if (!s.trim().isEmpty()) {
D_PAYN_DV = Double.parseDouble(s);
} else {
D_PAYN_DV = Double.NaN;
}
}

protected final void initD_PAYRUK(String s) {
if (!s.trim().isEmpty()) {
D_PAYRUK = Byte.parseByte(s);
} else {
D_PAYRUK = Byte.MIN_VALUE;
}
}

protected final void initD_PAYTYP(String s) {
if (!s.trim().isEmpty()) {
D_PAYTYP = Byte.parseByte(s);
} else {
D_PAYTYP = Byte.MIN_VALUE;
}
}

protected final void initD_PAYU(String s) {
if (!s.trim().isEmpty()) {
D_PAYU = Integer.parseInt(s);
} else {
D_PAYU = Integer.MIN_VALUE;
}
}

protected final void initD_PAYUG(String s) {
if (!s.trim().isEmpty()) {
D_PAYUG = Byte.parseByte(s);
} else {
D_PAYUG = Byte.MIN_VALUE;
}
}

protected final void initD_PAYUSL(String s) {
if (!s.trim().isEmpty()) {
D_PAYUSL = Byte.parseByte(s);
} else {
D_PAYUSL = Byte.MIN_VALUE;
}
}

protected final void initD_PAYUWC(String s) {
if (!s.trim().isEmpty()) {
D_PAYUWC = Byte.parseByte(s);
} else {
D_PAYUWC = Byte.MIN_VALUE;
}
}

protected final void initD_PAYU_DV(String s) {
if (!s.trim().isEmpty()) {
D_PAYU_DV = Double.parseDouble(s);
} else {
D_PAYU_DV = Double.NaN;
}
}

protected final void initD_PBNFT1(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT1 = Byte.parseByte(s);
} else {
D_PBNFT1 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT10(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT10 = Byte.parseByte(s);
} else {
D_PBNFT10 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT11(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT11 = Byte.parseByte(s);
} else {
D_PBNFT11 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT12(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT12 = Byte.parseByte(s);
} else {
D_PBNFT12 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT13(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT13 = Byte.parseByte(s);
} else {
D_PBNFT13 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT2(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT2 = Byte.parseByte(s);
} else {
D_PBNFT2 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT3(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT3 = Byte.parseByte(s);
} else {
D_PBNFT3 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT4(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT4 = Byte.parseByte(s);
} else {
D_PBNFT4 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT5(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT5 = Byte.parseByte(s);
} else {
D_PBNFT5 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT6(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT6 = Byte.parseByte(s);
} else {
D_PBNFT6 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT7(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT7 = Byte.parseByte(s);
} else {
D_PBNFT7 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT8(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT8 = Byte.parseByte(s);
} else {
D_PBNFT8 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT9(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT9 = Byte.parseByte(s);
} else {
D_PBNFT9 = Byte.MIN_VALUE;
}
}

protected final void initD_PBNFT96(String s) {
if (!s.trim().isEmpty()) {
D_PBNFT96 = Byte.parseByte(s);
} else {
D_PBNFT96 = Byte.MIN_VALUE;
}
}

protected final void initD_PENMCN(String s) {
if (!s.trim().isEmpty()) {
D_PENMCN = Byte.parseByte(s);
} else {
D_PENMCN = Byte.MIN_VALUE;
}
}

protected final void initD_PENMEX(String s) {
if (!s.trim().isEmpty()) {
D_PENMEX = Byte.parseByte(s);
} else {
D_PENMEX = Byte.MIN_VALUE;
}
}

protected final void initD_PENMPY(String s) {
if (!s.trim().isEmpty()) {
D_PENMPY = Double.parseDouble(s);
} else {
D_PENMPY = Double.NaN;
}
}

protected final void initD_PENMTP(String s) {
if (!s.trim().isEmpty()) {
D_PENMTP = Byte.parseByte(s);
} else {
D_PENMTP = Byte.MIN_VALUE;
}
}

protected final void initD_PENSIONER_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_PENSIONER_DV = false;
} else {
D_PENSIONER_DV = true;
}
}
}

protected final void initD_PENSPB(String s) {
if (!s.trim().isEmpty()) {
D_PENSPB = Byte.parseByte(s);
} else {
D_PENSPB = Byte.MIN_VALUE;
}
}

protected final void initD_PJBPTFT(String s) {
if (!s.trim().isEmpty()) {
D_PJBPTFT = Byte.parseByte(s);
} else {
D_PJBPTFT = Byte.MIN_VALUE;
}
}

protected final void initD_PJSPTFT(String s) {
if (!s.trim().isEmpty()) {
D_PJSPTFT = Byte.parseByte(s);
} else {
D_PJSPTFT = Byte.MIN_VALUE;
}
}

protected final void initD_PJULK4WK(String s) {
if (!s.trim().isEmpty()) {
D_PJULK4WK = Byte.parseByte(s);
} else {
D_PJULK4WK = Byte.MIN_VALUE;
}
}

protected final void initD_PLBORNC(String s) {
if (!s.trim().isEmpty()) {
D_PLBORNC = Byte.parseByte(s);
} else {
D_PLBORNC = Byte.MIN_VALUE;
}
}

protected final void initD_PLIVPAR(String s) {
if (!s.trim().isEmpty()) {
D_PLIVPAR = Byte.parseByte(s);
} else {
D_PLIVPAR = Byte.MIN_VALUE;
}
}

protected final void initD_PLNOWM(String s) {
if (!s.trim().isEmpty()) {
D_PLNOWM = Byte.parseByte(s);
} else {
D_PLNOWM = Byte.MIN_VALUE;
}
}

protected final void initD_PLNOWY4(String s) {
if (!s.trim().isEmpty()) {
D_PLNOWY4 = Short.parseShort(s);
} else {
D_PLNOWY4 = Short.MIN_VALUE;
}
}

protected final void initD_PN1PID(String s) {
if (!s.trim().isEmpty()) {
D_PN1PID = Integer.parseInt(s);
} else {
D_PN1PID = Integer.MIN_VALUE;
}
}

protected final void initD_PN1PNO(String s) {
if (!s.trim().isEmpty()) {
D_PN1PNO = Byte.parseByte(s);
} else {
D_PN1PNO = Byte.MIN_VALUE;
}
}

protected final void initD_PN1SEX(String s) {
if (!s.trim().isEmpty()) {
D_PN1SEX = Byte.parseByte(s);
} else {
D_PN1SEX = Byte.MIN_VALUE;
}
}

protected final void initD_PN2PID(String s) {
if (!s.trim().isEmpty()) {
D_PN2PID = Integer.parseInt(s);
} else {
D_PN2PID = Integer.MIN_VALUE;
}
}

protected final void initD_PN2PNO(String s) {
if (!s.trim().isEmpty()) {
D_PN2PNO = Byte.parseByte(s);
} else {
D_PN2PNO = Byte.MIN_VALUE;
}
}

protected final void initD_PN2SEX(String s) {
if (!s.trim().isEmpty()) {
D_PN2SEX = Byte.parseByte(s);
} else {
D_PN2SEX = Byte.MIN_VALUE;
}
}

protected final void initD_PNCARS(String s) {
if (!s.trim().isEmpty()) {
D_PNCARS = Byte.parseByte(s);
} else {
D_PNCARS = Byte.MIN_VALUE;
}
}

protected final void initD_PNO(String s) {
if (!s.trim().isEmpty()) {
D_PNO = Byte.parseByte(s);
} else {
D_PNO = Byte.MIN_VALUE;
}
}

protected final void initD_PNS1PID(String s) {
if (!s.trim().isEmpty()) {
D_PNS1PID = Integer.parseInt(s);
} else {
D_PNS1PID = Integer.MIN_VALUE;
}
}

protected final void initD_PNS1PNO(String s) {
if (!s.trim().isEmpty()) {
D_PNS1PNO = Byte.parseByte(s);
} else {
D_PNS1PNO = Byte.MIN_VALUE;
}
}

protected final void initD_PNS1SEX(String s) {
if (!s.trim().isEmpty()) {
D_PNS1SEX = Byte.parseByte(s);
} else {
D_PNS1SEX = Byte.MIN_VALUE;
}
}

protected final void initD_PNS2PID(String s) {
if (!s.trim().isEmpty()) {
D_PNS2PID = Integer.parseInt(s);
} else {
D_PNS2PID = Integer.MIN_VALUE;
}
}

protected final void initD_PNS2PNO(String s) {
if (!s.trim().isEmpty()) {
D_PNS2PNO = Byte.parseByte(s);
} else {
D_PNS2PNO = Byte.MIN_VALUE;
}
}

protected final void initD_PNS2SEX(String s) {
if (!s.trim().isEmpty()) {
D_PNS2SEX = Byte.parseByte(s);
} else {
D_PNS2SEX = Byte.MIN_VALUE;
}
}

protected final void initD_PPEN(String s) {
if (!s.trim().isEmpty()) {
D_PPEN = Byte.parseByte(s);
} else {
D_PPEN = Byte.MIN_VALUE;
}
}

protected final void initD_PPENSIONER(String s) {
if (!s.trim().isEmpty()) {
D_PPENSIONER = Byte.parseByte(s);
} else {
D_PPENSIONER = Byte.MIN_VALUE;
}
}

protected final void initD_PPENT(String s) {
if (!s.trim().isEmpty()) {
D_PPENT = Byte.parseByte(s);
} else {
D_PPENT = Byte.MIN_VALUE;
}
}

protected final void initD_PPID(String s) {
if (!s.trim().isEmpty()) {
D_PPID = Integer.parseInt(s);
} else {
D_PPID = Integer.MIN_VALUE;
}
}

protected final void initD_PPNO(String s) {
if (!s.trim().isEmpty()) {
D_PPNO = Byte.parseByte(s);
} else {
D_PPNO = Byte.MIN_VALUE;
}
}

protected final void initD_PPPEX(String s) {
if (!s.trim().isEmpty()) {
D_PPPEX = Byte.parseByte(s);
} else {
D_PPPEX = Byte.MIN_VALUE;
}
}

protected final void initD_PPPEXM(String s) {
if (!s.trim().isEmpty()) {
D_PPPEXM = Byte.parseByte(s);
} else {
D_PPPEXM = Byte.MIN_VALUE;
}
}

protected final void initD_PPRAM(String s) {
if (!s.trim().isEmpty()) {
D_PPRAM = Integer.parseInt(s);
} else {
D_PPRAM = Integer.MIN_VALUE;
}
}

protected final void initD_PPRAMPC(String s) {
if (!s.trim().isEmpty()) {
D_PPRAMPC = Byte.parseByte(s);
} else {
D_PPRAMPC = Byte.MIN_VALUE;
}
}

protected final void initD_PPREG(String s) {
if (!s.trim().isEmpty()) {
D_PPREG = Byte.parseByte(s);
} else {
D_PPREG = Byte.MIN_VALUE;
}
}

protected final void initD_PPSEX(String s) {
if (!s.trim().isEmpty()) {
D_PPSEX = Byte.parseByte(s);
} else {
D_PPSEX = Byte.MIN_VALUE;
}
}

protected final void initD_PPYRS(String s) {
if (!s.trim().isEmpty()) {
D_PPYRS = Short.parseShort(s);
} else {
D_PPYRS = Short.MIN_VALUE;
}
}

protected final void initD_PRAYFREQ(String s) {
if (!s.trim().isEmpty()) {
D_PRAYFREQ = Byte.parseByte(s);
} else {
D_PRAYFREQ = Byte.MIN_VALUE;
}
}

protected final void initD_PREARN(String s) {
if (!s.trim().isEmpty()) {
D_PREARN = Byte.parseByte(s);
} else {
D_PREARN = Byte.MIN_VALUE;
}
}

protected final void initD_PREARNA(String s) {
if (!s.trim().isEmpty()) {
D_PREARNA = Byte.parseByte(s);
} else {
D_PREARNA = Byte.MIN_VALUE;
}
}

protected final void initD_PREARNW(String s) {
if (!s.trim().isEmpty()) {
D_PREARNW = Byte.parseByte(s);
} else {
D_PREARNW = Byte.MIN_VALUE;
}
}

protected final void initD_PREASON(String s) {
if (!s.trim().isEmpty()) {
D_PREASON = Byte.parseByte(s);
} else {
D_PREASON = Byte.MIN_VALUE;
}
}

protected final void initD_PREG(String s) {
if (!s.trim().isEmpty()) {
D_PREG = Byte.parseByte(s);
} else {
D_PREG = Byte.MIN_VALUE;
}
}

protected final void initD_PREGEND1(String s) {
if (!s.trim().isEmpty()) {
D_PREGEND1 = Byte.parseByte(s);
} else {
D_PREGEND1 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGEND2(String s) {
if (!s.trim().isEmpty()) {
D_PREGEND2 = Byte.parseByte(s);
} else {
D_PREGEND2 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGEND3(String s) {
if (!s.trim().isEmpty()) {
D_PREGEND3 = Byte.parseByte(s);
} else {
D_PREGEND3 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGEND4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGEND4 = false;
} else {
D_PREGEND4 = true;
}
}
}

protected final void initD_PREGFERT1(String s) {
if (!s.trim().isEmpty()) {
D_PREGFERT1 = Byte.parseByte(s);
} else {
D_PREGFERT1 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGFERT2(String s) {
if (!s.trim().isEmpty()) {
D_PREGFERT2 = Byte.parseByte(s);
} else {
D_PREGFERT2 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGFERT3(String s) {
if (!s.trim().isEmpty()) {
D_PREGFERT3 = Byte.parseByte(s);
} else {
D_PREGFERT3 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGFERT4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGFERT4 = false;
} else {
D_PREGFERT4 = true;
}
}
}

protected final void initD_PREGM1(String s) {
if (!s.trim().isEmpty()) {
D_PREGM1 = Byte.parseByte(s);
} else {
D_PREGM1 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGM2(String s) {
if (!s.trim().isEmpty()) {
D_PREGM2 = Byte.parseByte(s);
} else {
D_PREGM2 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGM3(String s) {
if (!s.trim().isEmpty()) {
D_PREGM3 = Byte.parseByte(s);
} else {
D_PREGM3 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGM4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGM4 = false;
} else {
D_PREGM4 = true;
}
}
}

protected final void initD_PREGOUT1(String s) {
if (!s.trim().isEmpty()) {
D_PREGOUT1 = Byte.parseByte(s);
} else {
D_PREGOUT1 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGOUT2(String s) {
if (!s.trim().isEmpty()) {
D_PREGOUT2 = Byte.parseByte(s);
} else {
D_PREGOUT2 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGOUT3(String s) {
if (!s.trim().isEmpty()) {
D_PREGOUT3 = Byte.parseByte(s);
} else {
D_PREGOUT3 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGOUT4(String s) {
if (!s.trim().isEmpty()) {
D_PREGOUT4 = Byte.parseByte(s);
} else {
D_PREGOUT4 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGSMK11(String s) {
if (!s.trim().isEmpty()) {
D_PREGSMK11 = Byte.parseByte(s);
} else {
D_PREGSMK11 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGSMK12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMK12 = false;
} else {
D_PREGSMK12 = true;
}
}
}

protected final void initD_PREGSMK13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMK13 = false;
} else {
D_PREGSMK13 = true;
}
}
}

protected final void initD_PREGSMK14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMK14 = false;
} else {
D_PREGSMK14 = true;
}
}
}

protected final void initD_PREGSMK21(String s) {
if (!s.trim().isEmpty()) {
D_PREGSMK21 = Byte.parseByte(s);
} else {
D_PREGSMK21 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGSMK22(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMK22 = false;
} else {
D_PREGSMK22 = true;
}
}
}

protected final void initD_PREGSMK23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMK23 = false;
} else {
D_PREGSMK23 = true;
}
}
}

protected final void initD_PREGSMK24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMK24 = false;
} else {
D_PREGSMK24 = true;
}
}
}

protected final void initD_PREGSMK31(String s) {
if (!s.trim().isEmpty()) {
D_PREGSMK31 = Byte.parseByte(s);
} else {
D_PREGSMK31 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGSMK32(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMK32 = false;
} else {
D_PREGSMK32 = true;
}
}
}

protected final void initD_PREGSMK33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMK33 = false;
} else {
D_PREGSMK33 = true;
}
}
}

protected final void initD_PREGSMK34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMK34 = false;
} else {
D_PREGSMK34 = true;
}
}
}

protected final void initD_PREGSMOKE1(String s) {
if (!s.trim().isEmpty()) {
D_PREGSMOKE1 = Byte.parseByte(s);
} else {
D_PREGSMOKE1 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGSMOKE2(String s) {
if (!s.trim().isEmpty()) {
D_PREGSMOKE2 = Byte.parseByte(s);
} else {
D_PREGSMOKE2 = Byte.MIN_VALUE;
}
}

protected final void initD_PREGSMOKE3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMOKE3 = false;
} else {
D_PREGSMOKE3 = true;
}
}
}

protected final void initD_PREGSMOKE4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGSMOKE4 = false;
} else {
D_PREGSMOKE4 = true;
}
}
}

protected final void initD_PREGY41(String s) {
if (!s.trim().isEmpty()) {
D_PREGY41 = Short.parseShort(s);
} else {
D_PREGY41 = Short.MIN_VALUE;
}
}

protected final void initD_PREGY42(String s) {
if (!s.trim().isEmpty()) {
D_PREGY42 = Short.parseShort(s);
} else {
D_PREGY42 = Short.MIN_VALUE;
}
}

protected final void initD_PREGY43(String s) {
if (!s.trim().isEmpty()) {
D_PREGY43 = Short.parseShort(s);
} else {
D_PREGY43 = Short.MIN_VALUE;
}
}

protected final void initD_PREGY44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_PREGY44 = false;
} else {
D_PREGY44 = true;
}
}
}

protected final void initD_PREL(String s) {
if (!s.trim().isEmpty()) {
D_PREL = Byte.parseByte(s);
} else {
D_PREL = Byte.MIN_VALUE;
}
}

protected final void initD_PRFITB(String s) {
if (!s.trim().isEmpty()) {
D_PRFITB = Byte.parseByte(s);
} else {
D_PRFITB = Byte.MIN_VALUE;
}
}

protected final void initD_PRFITBA(String s) {
if (!s.trim().isEmpty()) {
D_PRFITBA = Byte.parseByte(s);
} else {
D_PRFITBA = Byte.MIN_VALUE;
}
}

protected final void initD_PRFITBW(String s) {
if (!s.trim().isEmpty()) {
D_PRFITBW = Byte.parseByte(s);
} else {
D_PRFITBW = Byte.MIN_VALUE;
}
}

protected final void initD_PRIPN(String s) {
if (!s.trim().isEmpty()) {
D_PRIPN = Byte.parseByte(s);
} else {
D_PRIPN = Byte.MIN_VALUE;
}
}

protected final void initD_PS1(String s) {
if (!s.trim().isEmpty()) {
D_PS1 = Byte.parseByte(s);
} else {
D_PS1 = Byte.MIN_VALUE;
}
}

protected final void initD_PS10(String s) {
if (!s.trim().isEmpty()) {
D_PS10 = Byte.parseByte(s);
} else {
D_PS10 = Byte.MIN_VALUE;
}
}

protected final void initD_PS11(String s) {
if (!s.trim().isEmpty()) {
D_PS11 = Byte.parseByte(s);
} else {
D_PS11 = Byte.MIN_VALUE;
}
}

protected final void initD_PS12(String s) {
if (!s.trim().isEmpty()) {
D_PS12 = Byte.parseByte(s);
} else {
D_PS12 = Byte.MIN_VALUE;
}
}

protected final void initD_PS13(String s) {
if (!s.trim().isEmpty()) {
D_PS13 = Byte.parseByte(s);
} else {
D_PS13 = Byte.MIN_VALUE;
}
}

protected final void initD_PS14(String s) {
if (!s.trim().isEmpty()) {
D_PS14 = Byte.parseByte(s);
} else {
D_PS14 = Byte.MIN_VALUE;
}
}

protected final void initD_PS15(String s) {
if (!s.trim().isEmpty()) {
D_PS15 = Byte.parseByte(s);
} else {
D_PS15 = Byte.MIN_VALUE;
}
}

protected final void initD_PS16(String s) {
if (!s.trim().isEmpty()) {
D_PS16 = Byte.parseByte(s);
} else {
D_PS16 = Byte.MIN_VALUE;
}
}

protected final void initD_PS17(String s) {
if (!s.trim().isEmpty()) {
D_PS17 = Byte.parseByte(s);
} else {
D_PS17 = Byte.MIN_VALUE;
}
}

protected final void initD_PS18(String s) {
if (!s.trim().isEmpty()) {
D_PS18 = Byte.parseByte(s);
} else {
D_PS18 = Byte.MIN_VALUE;
}
}

protected final void initD_PS19(String s) {
if (!s.trim().isEmpty()) {
D_PS19 = Byte.parseByte(s);
} else {
D_PS19 = Byte.MIN_VALUE;
}
}

protected final void initD_PS2(String s) {
if (!s.trim().isEmpty()) {
D_PS2 = Byte.parseByte(s);
} else {
D_PS2 = Byte.MIN_VALUE;
}
}

protected final void initD_PS20(String s) {
if (!s.trim().isEmpty()) {
D_PS20 = Byte.parseByte(s);
} else {
D_PS20 = Byte.MIN_VALUE;
}
}

protected final void initD_PS21(String s) {
if (!s.trim().isEmpty()) {
D_PS21 = Byte.parseByte(s);
} else {
D_PS21 = Byte.MIN_VALUE;
}
}

protected final void initD_PS22(String s) {
if (!s.trim().isEmpty()) {
D_PS22 = Byte.parseByte(s);
} else {
D_PS22 = Byte.MIN_VALUE;
}
}

protected final void initD_PS23(String s) {
if (!s.trim().isEmpty()) {
D_PS23 = Byte.parseByte(s);
} else {
D_PS23 = Byte.MIN_VALUE;
}
}

protected final void initD_PS24(String s) {
if (!s.trim().isEmpty()) {
D_PS24 = Byte.parseByte(s);
} else {
D_PS24 = Byte.MIN_VALUE;
}
}

protected final void initD_PS25(String s) {
if (!s.trim().isEmpty()) {
D_PS25 = Byte.parseByte(s);
} else {
D_PS25 = Byte.MIN_VALUE;
}
}

protected final void initD_PS26(String s) {
if (!s.trim().isEmpty()) {
D_PS26 = Byte.parseByte(s);
} else {
D_PS26 = Byte.MIN_VALUE;
}
}

protected final void initD_PS27(String s) {
if (!s.trim().isEmpty()) {
D_PS27 = Byte.parseByte(s);
} else {
D_PS27 = Byte.MIN_VALUE;
}
}

protected final void initD_PS28(String s) {
if (!s.trim().isEmpty()) {
D_PS28 = Byte.parseByte(s);
} else {
D_PS28 = Byte.MIN_VALUE;
}
}

protected final void initD_PS29(String s) {
if (!s.trim().isEmpty()) {
D_PS29 = Byte.parseByte(s);
} else {
D_PS29 = Byte.MIN_VALUE;
}
}

protected final void initD_PS3(String s) {
if (!s.trim().isEmpty()) {
D_PS3 = Byte.parseByte(s);
} else {
D_PS3 = Byte.MIN_VALUE;
}
}

protected final void initD_PS30(String s) {
if (!s.trim().isEmpty()) {
D_PS30 = Byte.parseByte(s);
} else {
D_PS30 = Byte.MIN_VALUE;
}
}

protected final void initD_PS31(String s) {
if (!s.trim().isEmpty()) {
D_PS31 = Byte.parseByte(s);
} else {
D_PS31 = Byte.MIN_VALUE;
}
}

protected final void initD_PS32(String s) {
if (!s.trim().isEmpty()) {
D_PS32 = Byte.parseByte(s);
} else {
D_PS32 = Byte.MIN_VALUE;
}
}

protected final void initD_PS4(String s) {
if (!s.trim().isEmpty()) {
D_PS4 = Byte.parseByte(s);
} else {
D_PS4 = Byte.MIN_VALUE;
}
}

protected final void initD_PS5(String s) {
if (!s.trim().isEmpty()) {
D_PS5 = Byte.parseByte(s);
} else {
D_PS5 = Byte.MIN_VALUE;
}
}

protected final void initD_PS6(String s) {
if (!s.trim().isEmpty()) {
D_PS6 = Byte.parseByte(s);
} else {
D_PS6 = Byte.MIN_VALUE;
}
}

protected final void initD_PS7(String s) {
if (!s.trim().isEmpty()) {
D_PS7 = Byte.parseByte(s);
} else {
D_PS7 = Byte.MIN_VALUE;
}
}

protected final void initD_PS8(String s) {
if (!s.trim().isEmpty()) {
D_PS8 = Byte.parseByte(s);
} else {
D_PS8 = Byte.MIN_VALUE;
}
}

protected final void initD_PS9(String s) {
if (!s.trim().isEmpty()) {
D_PS9 = Byte.parseByte(s);
} else {
D_PS9 = Byte.MIN_VALUE;
}
}

protected final void initD_PSDQA_DV(String s) {
if (!s.trim().isEmpty()) {
D_PSDQA_DV = Byte.parseByte(s);
} else {
D_PSDQA_DV = Byte.MIN_VALUE;
}
}

protected final void initD_PSDQB_DV(String s) {
if (!s.trim().isEmpty()) {
D_PSDQB_DV = Byte.parseByte(s);
} else {
D_PSDQB_DV = Byte.MIN_VALUE;
}
}

protected final void initD_PSDQC_DV(String s) {
if (!s.trim().isEmpty()) {
D_PSDQC_DV = Byte.parseByte(s);
} else {
D_PSDQC_DV = Byte.MIN_VALUE;
}
}

protected final void initD_PSIBLINGS(String s) {
if (!s.trim().isEmpty()) {
D_PSIBLINGS = Byte.parseByte(s);
} else {
D_PSIBLINGS = Byte.MIN_VALUE;
}
}

protected final void initD_PSNUMCH(String s) {
if (!s.trim().isEmpty()) {
D_PSNUMCH = Byte.parseByte(s);
} else {
D_PSNUMCH = Byte.MIN_VALUE;
}
}

protected final void initD_PSU(String s) {
if (!s.trim().isEmpty()) {
D_PSU = Integer.parseInt(s);
} else {
D_PSU = Integer.MIN_VALUE;
}
}

protected final void initD_QFHIGH(String s) {
if (!s.trim().isEmpty()) {
D_QFHIGH = Byte.parseByte(s);
} else {
D_QFHIGH = Byte.MIN_VALUE;
}
}

protected final void initD_QFHIGHFL_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_QFHIGHFL_DV = false;
} else {
D_QFHIGHFL_DV = true;
}
}
}

protected final void initD_QFHIGH_DV(String s) {
if (!s.trim().isEmpty()) {
D_QFHIGH_DV = Byte.parseByte(s);
} else {
D_QFHIGH_DV = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC1(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC1 = Byte.parseByte(s);
} else {
D_QFVOC1 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC10(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC10 = Byte.parseByte(s);
} else {
D_QFVOC10 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC11(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC11 = Byte.parseByte(s);
} else {
D_QFVOC11 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC12(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC12 = Byte.parseByte(s);
} else {
D_QFVOC12 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC13(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC13 = Byte.parseByte(s);
} else {
D_QFVOC13 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC14(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC14 = Byte.parseByte(s);
} else {
D_QFVOC14 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC15(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC15 = Byte.parseByte(s);
} else {
D_QFVOC15 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC2(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC2 = Byte.parseByte(s);
} else {
D_QFVOC2 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC3(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC3 = Byte.parseByte(s);
} else {
D_QFVOC3 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC4(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC4 = Byte.parseByte(s);
} else {
D_QFVOC4 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC5(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC5 = Byte.parseByte(s);
} else {
D_QFVOC5 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC6(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC6 = Byte.parseByte(s);
} else {
D_QFVOC6 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC7(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC7 = Byte.parseByte(s);
} else {
D_QFVOC7 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC8(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC8 = Byte.parseByte(s);
} else {
D_QFVOC8 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC9(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC9 = Byte.parseByte(s);
} else {
D_QFVOC9 = Byte.MIN_VALUE;
}
}

protected final void initD_QFVOC96(String s) {
if (!s.trim().isEmpty()) {
D_QFVOC96 = Byte.parseByte(s);
} else {
D_QFVOC96 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNE(String s) {
if (!s.trim().isEmpty()) {
D_QUALNE = Byte.parseByte(s);
} else {
D_QUALNE = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW1(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW1 = Byte.parseByte(s);
} else {
D_QUALNEW1 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW10(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW10 = Byte.parseByte(s);
} else {
D_QUALNEW10 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW11(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW11 = Byte.parseByte(s);
} else {
D_QUALNEW11 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW13(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW13 = Byte.parseByte(s);
} else {
D_QUALNEW13 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW15(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW15 = Byte.parseByte(s);
} else {
D_QUALNEW15 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW16(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW16 = Byte.parseByte(s);
} else {
D_QUALNEW16 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW17(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW17 = Byte.parseByte(s);
} else {
D_QUALNEW17 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW18(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW18 = Byte.parseByte(s);
} else {
D_QUALNEW18 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW19(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW19 = Byte.parseByte(s);
} else {
D_QUALNEW19 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW2(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW2 = Byte.parseByte(s);
} else {
D_QUALNEW2 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW20(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW20 = Byte.parseByte(s);
} else {
D_QUALNEW20 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW21(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW21 = Byte.parseByte(s);
} else {
D_QUALNEW21 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW22(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW22 = Byte.parseByte(s);
} else {
D_QUALNEW22 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW23(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW23 = Byte.parseByte(s);
} else {
D_QUALNEW23 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW24(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW24 = Byte.parseByte(s);
} else {
D_QUALNEW24 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW25(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW25 = Byte.parseByte(s);
} else {
D_QUALNEW25 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW26(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW26 = Byte.parseByte(s);
} else {
D_QUALNEW26 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW27(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW27 = Byte.parseByte(s);
} else {
D_QUALNEW27 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW28(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW28 = Byte.parseByte(s);
} else {
D_QUALNEW28 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW29(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW29 = Byte.parseByte(s);
} else {
D_QUALNEW29 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW3(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW3 = Byte.parseByte(s);
} else {
D_QUALNEW3 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW30(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW30 = Byte.parseByte(s);
} else {
D_QUALNEW30 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW31(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW31 = Byte.parseByte(s);
} else {
D_QUALNEW31 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW5(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW5 = Byte.parseByte(s);
} else {
D_QUALNEW5 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW6(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW6 = Byte.parseByte(s);
} else {
D_QUALNEW6 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW7(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW7 = Byte.parseByte(s);
} else {
D_QUALNEW7 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW8(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW8 = Byte.parseByte(s);
} else {
D_QUALNEW8 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALNEW9(String s) {
if (!s.trim().isEmpty()) {
D_QUALNEW9 = Byte.parseByte(s);
} else {
D_QUALNEW9 = Byte.MIN_VALUE;
}
}

protected final void initD_QUALOC(String s) {
if (!s.trim().isEmpty()) {
D_QUALOC = Byte.parseByte(s);
} else {
D_QUALOC = Byte.MIN_VALUE;
}
}

protected final void initD_RACEL(String s) {
if (!s.trim().isEmpty()) {
D_RACEL = Byte.parseByte(s);
} else {
D_RACEL = Byte.MIN_VALUE;
}
}

protected final void initD_RACELAT(String s) {
if (!s.trim().isEmpty()) {
D_RACELAT = Byte.parseByte(s);
} else {
D_RACELAT = Byte.MIN_VALUE;
}
}

protected final void initD_RACELBT(String s) {
if (!s.trim().isEmpty()) {
D_RACELBT = Byte.parseByte(s);
} else {
D_RACELBT = Byte.MIN_VALUE;
}
}

protected final void initD_RACELMT(String s) {
if (!s.trim().isEmpty()) {
D_RACELMT = Byte.parseByte(s);
} else {
D_RACELMT = Byte.MIN_VALUE;
}
}

protected final void initD_RACELOT_CODE(String s) {
if (!s.trim().isEmpty()) {
D_RACELOT_CODE = Byte.parseByte(s);
} else {
D_RACELOT_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_RACELO_CODE(String s) {
if (!s.trim().isEmpty()) {
D_RACELO_CODE = Byte.parseByte(s);
} else {
D_RACELO_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_RACELT(String s) {
if (!s.trim().isEmpty()) {
D_RACELT = Byte.parseByte(s);
} else {
D_RACELT = Byte.MIN_VALUE;
}
}

protected final void initD_RACELWT(String s) {
if (!s.trim().isEmpty()) {
D_RACELWT = Byte.parseByte(s);
} else {
D_RACELWT = Byte.MIN_VALUE;
}
}

protected final void initD_RACEL_DV(String s) {
if (!s.trim().isEmpty()) {
D_RACEL_DV = Byte.parseByte(s);
} else {
D_RACEL_DV = Byte.MIN_VALUE;
}
}

protected final void initD_RACH16_DV(String s) {
if (!s.trim().isEmpty()) {
D_RACH16_DV = Byte.parseByte(s);
} else {
D_RACH16_DV = Byte.MIN_VALUE;
}
}

protected final void initD_RCOTHERD_CODE(String s) {
if (!s.trim().isEmpty()) {
D_RCOTHERD_CODE = Byte.parseByte(s);
} else {
D_RCOTHERD_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_REASEND1(String s) {
if (!s.trim().isEmpty()) {
D_REASEND1 = Byte.parseByte(s);
} else {
D_REASEND1 = Byte.MIN_VALUE;
}
}

protected final void initD_REASEND2(String s) {
if (!s.trim().isEmpty()) {
D_REASEND2 = Byte.parseByte(s);
} else {
D_REASEND2 = Byte.MIN_VALUE;
}
}

protected final void initD_REASEND3(String s) {
if (!s.trim().isEmpty()) {
D_REASEND3 = Byte.parseByte(s);
} else {
D_REASEND3 = Byte.MIN_VALUE;
}
}

protected final void initD_REASEND4(String s) {
if (!s.trim().isEmpty()) {
D_REASEND4 = Byte.parseByte(s);
} else {
D_REASEND4 = Byte.MIN_VALUE;
}
}

protected final void initD_REASEND5(String s) {
if (!s.trim().isEmpty()) {
D_REASEND5 = Byte.parseByte(s);
} else {
D_REASEND5 = Byte.MIN_VALUE;
}
}

protected final void initD_REASEND6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_REASEND6 = false;
} else {
D_REASEND6 = true;
}
}
}

protected final void initD_REFBANK(String s) {
if (!s.trim().isEmpty()) {
D_REFBANK = Byte.parseByte(s);
} else {
D_REFBANK = Byte.MIN_VALUE;
}
}

protected final void initD_REFBNKY(String s) {
if (!s.trim().isEmpty()) {
D_REFBNKY = Byte.parseByte(s);
} else {
D_REFBNKY = Byte.MIN_VALUE;
}
}

protected final void initD_RELUP(String s) {
if (!s.trim().isEmpty()) {
D_RELUP = Byte.parseByte(s);
} else {
D_RELUP = Byte.MIN_VALUE;
}
}

protected final void initD_REMAIL_CODE(String s) {
if (!s.trim().isEmpty()) {
D_REMAIL_CODE = Byte.parseByte(s);
} else {
D_REMAIL_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_REMCNTRY1(String s) {
if (!s.trim().isEmpty()) {
D_REMCNTRY1 = Byte.parseByte(s);
} else {
D_REMCNTRY1 = Byte.MIN_VALUE;
}
}

protected final void initD_REMCNTRY2(String s) {
if (!s.trim().isEmpty()) {
D_REMCNTRY2 = Byte.parseByte(s);
} else {
D_REMCNTRY2 = Byte.MIN_VALUE;
}
}

protected final void initD_REMCNTRY3(String s) {
if (!s.trim().isEmpty()) {
D_REMCNTRY3 = Byte.parseByte(s);
} else {
D_REMCNTRY3 = Byte.MIN_VALUE;
}
}

protected final void initD_REMCNTRY4(String s) {
if (!s.trim().isEmpty()) {
D_REMCNTRY4 = Byte.parseByte(s);
} else {
D_REMCNTRY4 = Byte.MIN_VALUE;
}
}

protected final void initD_REMHO(String s) {
if (!s.trim().isEmpty()) {
D_REMHO = Byte.parseByte(s);
} else {
D_REMHO = Byte.MIN_VALUE;
}
}

protected final void initD_REMHOW1(String s) {
if (!s.trim().isEmpty()) {
D_REMHOW1 = Byte.parseByte(s);
} else {
D_REMHOW1 = Byte.MIN_VALUE;
}
}

protected final void initD_REMHOW2(String s) {
if (!s.trim().isEmpty()) {
D_REMHOW2 = Byte.parseByte(s);
} else {
D_REMHOW2 = Byte.MIN_VALUE;
}
}

protected final void initD_REMHOW3(String s) {
if (!s.trim().isEmpty()) {
D_REMHOW3 = Byte.parseByte(s);
} else {
D_REMHOW3 = Byte.MIN_VALUE;
}
}

protected final void initD_REMIT1(String s) {
if (!s.trim().isEmpty()) {
D_REMIT1 = Byte.parseByte(s);
} else {
D_REMIT1 = Byte.MIN_VALUE;
}
}

protected final void initD_REMIT2(String s) {
if (!s.trim().isEmpty()) {
D_REMIT2 = Byte.parseByte(s);
} else {
D_REMIT2 = Byte.MIN_VALUE;
}
}

protected final void initD_REMIT3(String s) {
if (!s.trim().isEmpty()) {
D_REMIT3 = Byte.parseByte(s);
} else {
D_REMIT3 = Byte.MIN_VALUE;
}
}

protected final void initD_REMIT4(String s) {
if (!s.trim().isEmpty()) {
D_REMIT4 = Byte.parseByte(s);
} else {
D_REMIT4 = Byte.MIN_VALUE;
}
}

protected final void initD_REMIT5(String s) {
if (!s.trim().isEmpty()) {
D_REMIT5 = Byte.parseByte(s);
} else {
D_REMIT5 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITAMT1(String s) {
if (!s.trim().isEmpty()) {
D_REMITAMT1 = Short.parseShort(s);
} else {
D_REMITAMT1 = Short.MIN_VALUE;
}
}

protected final void initD_REMITAMT2(String s) {
if (!s.trim().isEmpty()) {
D_REMITAMT2 = Integer.parseInt(s);
} else {
D_REMITAMT2 = Integer.MIN_VALUE;
}
}

protected final void initD_REMITAMT3(String s) {
if (!s.trim().isEmpty()) {
D_REMITAMT3 = Short.parseShort(s);
} else {
D_REMITAMT3 = Short.MIN_VALUE;
}
}

protected final void initD_REMITAMT4(String s) {
if (!s.trim().isEmpty()) {
D_REMITAMT4 = Integer.parseInt(s);
} else {
D_REMITAMT4 = Integer.MIN_VALUE;
}
}

protected final void initD_REMITFREQ1(String s) {
if (!s.trim().isEmpty()) {
D_REMITFREQ1 = Byte.parseByte(s);
} else {
D_REMITFREQ1 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITFREQ2(String s) {
if (!s.trim().isEmpty()) {
D_REMITFREQ2 = Byte.parseByte(s);
} else {
D_REMITFREQ2 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITFREQ3(String s) {
if (!s.trim().isEmpty()) {
D_REMITFREQ3 = Byte.parseByte(s);
} else {
D_REMITFREQ3 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITFREQ4(String s) {
if (!s.trim().isEmpty()) {
D_REMITFREQ4 = Byte.parseByte(s);
} else {
D_REMITFREQ4 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITREG1(String s) {
if (!s.trim().isEmpty()) {
D_REMITREG1 = Byte.parseByte(s);
} else {
D_REMITREG1 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITREG2(String s) {
if (!s.trim().isEmpty()) {
D_REMITREG2 = Byte.parseByte(s);
} else {
D_REMITREG2 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITREG3(String s) {
if (!s.trim().isEmpty()) {
D_REMITREG3 = Byte.parseByte(s);
} else {
D_REMITREG3 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITREG4(String s) {
if (!s.trim().isEmpty()) {
D_REMITREG4 = Byte.parseByte(s);
} else {
D_REMITREG4 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITUSUAL1(String s) {
if (!s.trim().isEmpty()) {
D_REMITUSUAL1 = Byte.parseByte(s);
} else {
D_REMITUSUAL1 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITUSUAL2(String s) {
if (!s.trim().isEmpty()) {
D_REMITUSUAL2 = Byte.parseByte(s);
} else {
D_REMITUSUAL2 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITUSUAL3(String s) {
if (!s.trim().isEmpty()) {
D_REMITUSUAL3 = Byte.parseByte(s);
} else {
D_REMITUSUAL3 = Byte.MIN_VALUE;
}
}

protected final void initD_REMITUSUAL4(String s) {
if (!s.trim().isEmpty()) {
D_REMITUSUAL4 = Byte.parseByte(s);
} else {
D_REMITUSUAL4 = Byte.MIN_VALUE;
}
}

protected final void initD_RESPF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_RESPF16 = false;
} else {
D_RESPF16 = true;
}
}
}

protected final void initD_RESPF16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_RESPF16_DV = false;
} else {
D_RESPF16_DV = true;
}
}
}

protected final void initD_RESPM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_RESPM16 = false;
} else {
D_RESPM16 = true;
}
}
}

protected final void initD_RESPM16_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_RESPM16_DV = false;
} else {
D_RESPM16_DV = true;
}
}
}

protected final void initD_RETAMT(String s) {
if (!s.trim().isEmpty()) {
D_RETAMT = Byte.parseByte(s);
} else {
D_RETAMT = Byte.MIN_VALUE;
}
}

protected final void initD_RETCHK(String s) {
if (!s.trim().isEmpty()) {
D_RETCHK = Byte.parseByte(s);
} else {
D_RETCHK = Byte.MIN_VALUE;
}
}

protected final void initD_RETSUF(String s) {
if (!s.trim().isEmpty()) {
D_RETSUF = Byte.parseByte(s);
} else {
D_RETSUF = Byte.MIN_VALUE;
}
}

protected final void initD_RHLAND_CODE(String s) {
if (!s.trim().isEmpty()) {
D_RHLAND_CODE = Byte.parseByte(s);
} else {
D_RHLAND_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_RLCHARITY(String s) {
if (!s.trim().isEmpty()) {
D_RLCHARITY = Byte.parseByte(s);
} else {
D_RLCHARITY = Byte.MIN_VALUE;
}
}

protected final void initD_RLDRNK(String s) {
if (!s.trim().isEmpty()) {
D_RLDRNK = Byte.parseByte(s);
} else {
D_RLDRNK = Byte.MIN_VALUE;
}
}

protected final void initD_RLEAT(String s) {
if (!s.trim().isEmpty()) {
D_RLEAT = Byte.parseByte(s);
} else {
D_RLEAT = Byte.MIN_VALUE;
}
}

protected final void initD_RLFRIENDS(String s) {
if (!s.trim().isEmpty()) {
D_RLFRIENDS = Byte.parseByte(s);
} else {
D_RLFRIENDS = Byte.MIN_VALUE;
}
}

protected final void initD_RLJOB(String s) {
if (!s.trim().isEmpty()) {
D_RLJOB = Byte.parseByte(s);
} else {
D_RLJOB = Byte.MIN_VALUE;
}
}

protected final void initD_RLJOBY1(String s) {
if (!s.trim().isEmpty()) {
D_RLJOBY1 = Byte.parseByte(s);
} else {
D_RLJOBY1 = Byte.MIN_VALUE;
}
}

protected final void initD_RLJOBY2(String s) {
if (!s.trim().isEmpty()) {
D_RLJOBY2 = Byte.parseByte(s);
} else {
D_RLJOBY2 = Byte.MIN_VALUE;
}
}

protected final void initD_RLJOBY3(String s) {
if (!s.trim().isEmpty()) {
D_RLJOBY3 = Byte.parseByte(s);
} else {
D_RLJOBY3 = Byte.MIN_VALUE;
}
}

protected final void initD_RLJOBY4(String s) {
if (!s.trim().isEmpty()) {
D_RLJOBY4 = Byte.parseByte(s);
} else {
D_RLJOBY4 = Byte.MIN_VALUE;
}
}

protected final void initD_RLJOBY5(String s) {
if (!s.trim().isEmpty()) {
D_RLJOBY5 = Byte.parseByte(s);
} else {
D_RLJOBY5 = Byte.MIN_VALUE;
}
}

protected final void initD_RLJOBY6(String s) {
if (!s.trim().isEmpty()) {
D_RLJOBY6 = Byte.parseByte(s);
} else {
D_RLJOBY6 = Byte.MIN_VALUE;
}
}

protected final void initD_RLJOBY97(String s) {
if (!s.trim().isEmpty()) {
D_RLJOBY97 = Byte.parseByte(s);
} else {
D_RLJOBY97 = Byte.MIN_VALUE;
}
}

protected final void initD_RLMARG(String s) {
if (!s.trim().isEmpty()) {
D_RLMARG = Byte.parseByte(s);
} else {
D_RLMARG = Byte.MIN_VALUE;
}
}

protected final void initD_RLSAVE(String s) {
if (!s.trim().isEmpty()) {
D_RLSAVE = Byte.parseByte(s);
} else {
D_RLSAVE = Byte.MIN_VALUE;
}
}

protected final void initD_RLSCHL(String s) {
if (!s.trim().isEmpty()) {
D_RLSCHL = Byte.parseByte(s);
} else {
D_RLSCHL = Byte.MIN_VALUE;
}
}

protected final void initD_RLWEAR(String s) {
if (!s.trim().isEmpty()) {
D_RLWEAR = Byte.parseByte(s);
} else {
D_RLWEAR = Byte.MIN_VALUE;
}
}

protected final void initD_RPHMOB_CODE(String s) {
if (!s.trim().isEmpty()) {
D_RPHMOB_CODE = Byte.parseByte(s);
} else {
D_RPHMOB_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_RPHWRK_CODE(String s) {
if (!s.trim().isEmpty()) {
D_RPHWRK_CODE = Byte.parseByte(s);
} else {
D_RPHWRK_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_RTCON1(String s) {
if (!s.trim().isEmpty()) {
D_RTCON1 = Byte.parseByte(s);
} else {
D_RTCON1 = Byte.MIN_VALUE;
}
}

protected final void initD_RTCON2(String s) {
if (!s.trim().isEmpty()) {
D_RTCON2 = Byte.parseByte(s);
} else {
D_RTCON2 = Byte.MIN_VALUE;
}
}

protected final void initD_RTCON3(String s) {
if (!s.trim().isEmpty()) {
D_RTCON3 = Byte.parseByte(s);
} else {
D_RTCON3 = Byte.MIN_VALUE;
}
}

protected final void initD_RTCON4(String s) {
if (!s.trim().isEmpty()) {
D_RTCON4 = Byte.parseByte(s);
} else {
D_RTCON4 = Byte.MIN_VALUE;
}
}

protected final void initD_RTEXPJB(String s) {
if (!s.trim().isEmpty()) {
D_RTEXPJB = Byte.parseByte(s);
} else {
D_RTEXPJB = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND1(String s) {
if (!s.trim().isEmpty()) {
D_RTFND1 = Byte.parseByte(s);
} else {
D_RTFND1 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND10(String s) {
if (!s.trim().isEmpty()) {
D_RTFND10 = Byte.parseByte(s);
} else {
D_RTFND10 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND2(String s) {
if (!s.trim().isEmpty()) {
D_RTFND2 = Byte.parseByte(s);
} else {
D_RTFND2 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND3(String s) {
if (!s.trim().isEmpty()) {
D_RTFND3 = Byte.parseByte(s);
} else {
D_RTFND3 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND4(String s) {
if (!s.trim().isEmpty()) {
D_RTFND4 = Byte.parseByte(s);
} else {
D_RTFND4 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND5(String s) {
if (!s.trim().isEmpty()) {
D_RTFND5 = Byte.parseByte(s);
} else {
D_RTFND5 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND6(String s) {
if (!s.trim().isEmpty()) {
D_RTFND6 = Byte.parseByte(s);
} else {
D_RTFND6 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND7(String s) {
if (!s.trim().isEmpty()) {
D_RTFND7 = Byte.parseByte(s);
} else {
D_RTFND7 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND8(String s) {
if (!s.trim().isEmpty()) {
D_RTFND8 = Byte.parseByte(s);
} else {
D_RTFND8 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND9(String s) {
if (!s.trim().isEmpty()) {
D_RTFND9 = Byte.parseByte(s);
} else {
D_RTFND9 = Byte.MIN_VALUE;
}
}

protected final void initD_RTFND96(String s) {
if (!s.trim().isEmpty()) {
D_RTFND96 = Byte.parseByte(s);
} else {
D_RTFND96 = Byte.MIN_VALUE;
}
}

protected final void initD_RTPRO1(String s) {
if (!s.trim().isEmpty()) {
D_RTPRO1 = Byte.parseByte(s);
} else {
D_RTPRO1 = Byte.MIN_VALUE;
}
}

protected final void initD_RTPRO2(String s) {
if (!s.trim().isEmpty()) {
D_RTPRO2 = Byte.parseByte(s);
} else {
D_RTPRO2 = Byte.MIN_VALUE;
}
}

protected final void initD_RTPRO3(String s) {
if (!s.trim().isEmpty()) {
D_RTPRO3 = Byte.parseByte(s);
} else {
D_RTPRO3 = Byte.MIN_VALUE;
}
}

protected final void initD_RTPRO4(String s) {
if (!s.trim().isEmpty()) {
D_RTPRO4 = Byte.parseByte(s);
} else {
D_RTPRO4 = Byte.MIN_VALUE;
}
}

protected final void initD_RTPRO5(String s) {
if (!s.trim().isEmpty()) {
D_RTPRO5 = Byte.parseByte(s);
} else {
D_RTPRO5 = Byte.MIN_VALUE;
}
}

protected final void initD_RTPRO6(String s) {
if (!s.trim().isEmpty()) {
D_RTPRO6 = Byte.parseByte(s);
} else {
D_RTPRO6 = Byte.MIN_VALUE;
}
}

protected final void initD_SAMEJOB(String s) {
if (!s.trim().isEmpty()) {
D_SAMEJOB = Byte.parseByte(s);
} else {
D_SAMEJOB = Byte.MIN_VALUE;
}
}

protected final void initD_SAMPST(String s) {
if (!s.trim().isEmpty()) {
D_SAMPST = Byte.parseByte(s);
} else {
D_SAMPST = Byte.MIN_VALUE;
}
}

protected final void initD_SAVDOCS(String s) {
if (!s.trim().isEmpty()) {
D_SAVDOCS = Byte.parseByte(s);
} else {
D_SAVDOCS = Byte.MIN_VALUE;
}
}

protected final void initD_SAVE(String s) {
if (!s.trim().isEmpty()) {
D_SAVE = Byte.parseByte(s);
} else {
D_SAVE = Byte.MIN_VALUE;
}
}

protected final void initD_SAVED(String s) {
if (!s.trim().isEmpty()) {
D_SAVED = Integer.parseInt(s);
} else {
D_SAVED = Integer.MIN_VALUE;
}
}

protected final void initD_SAVLT(String s) {
if (!s.trim().isEmpty()) {
D_SAVLT = Byte.parseByte(s);
} else {
D_SAVLT = Byte.MIN_VALUE;
}
}

protected final void initD_SAVREG(String s) {
if (!s.trim().isEmpty()) {
D_SAVREG = Byte.parseByte(s);
} else {
D_SAVREG = Byte.MIN_VALUE;
}
}

protected final void initD_SCAC(String s) {
if (!s.trim().isEmpty()) {
D_SCAC = Byte.parseByte(s);
} else {
D_SCAC = Byte.MIN_VALUE;
}
}

protected final void initD_SCEND(String s) {
if (!s.trim().isEmpty()) {
D_SCEND = Byte.parseByte(s);
} else {
D_SCEND = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_BCCC(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_BCCC = Byte.parseByte(s);
} else {
D_SCENV_BCCC = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_CANC(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_CANC = Byte.parseByte(s);
} else {
D_SCENV_CANC = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_CREX(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_CREX = Byte.parseByte(s);
} else {
D_SCENV_CREX = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_CRLF(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_CRLF = Byte.parseByte(s);
} else {
D_SCENV_CRLF = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_FITL(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_FITL = Byte.parseByte(s);
} else {
D_SCENV_FITL = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_FTST(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_FTST = Byte.parseByte(s);
} else {
D_SCENV_FTST = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_GRN(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_GRN = Byte.parseByte(s);
} else {
D_SCENV_GRN = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_MEDS(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_MEDS = Byte.parseByte(s);
} else {
D_SCENV_MEDS = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_NOOT(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_NOOT = Byte.parseByte(s);
} else {
D_SCENV_NOOT = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_NOWO(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_NOWO = Byte.parseByte(s);
} else {
D_SCENV_NOWO = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_PMEP(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_PMEP = Byte.parseByte(s);
} else {
D_SCENV_PMEP = Byte.MIN_VALUE;
}
}

protected final void initD_SCENV_TLAT(String s) {
if (!s.trim().isEmpty()) {
D_SCENV_TLAT = Byte.parseByte(s);
} else {
D_SCENV_TLAT = Byte.MIN_VALUE;
}
}

protected final void initD_SCFLAG_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_SCFLAG_DV = false;
} else {
D_SCFLAG_DV = true;
}
}
}

protected final void initD_SCGHQ1_DV(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQ1_DV = Byte.parseByte(s);
} else {
D_SCGHQ1_DV = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQ2_DV(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQ2_DV = Byte.parseByte(s);
} else {
D_SCGHQ2_DV = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQA(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQA = Byte.parseByte(s);
} else {
D_SCGHQA = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQB(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQB = Byte.parseByte(s);
} else {
D_SCGHQB = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQC(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQC = Byte.parseByte(s);
} else {
D_SCGHQC = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQD(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQD = Byte.parseByte(s);
} else {
D_SCGHQD = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQE(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQE = Byte.parseByte(s);
} else {
D_SCGHQE = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQF(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQF = Byte.parseByte(s);
} else {
D_SCGHQF = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQG(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQG = Byte.parseByte(s);
} else {
D_SCGHQG = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQH(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQH = Byte.parseByte(s);
} else {
D_SCGHQH = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQI(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQI = Byte.parseByte(s);
} else {
D_SCGHQI = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQJ(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQJ = Byte.parseByte(s);
} else {
D_SCGHQJ = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQK(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQK = Byte.parseByte(s);
} else {
D_SCGHQK = Byte.MIN_VALUE;
}
}

protected final void initD_SCGHQL(String s) {
if (!s.trim().isEmpty()) {
D_SCGHQL = Byte.parseByte(s);
} else {
D_SCGHQL = Byte.MIN_VALUE;
}
}

protected final void initD_SCHLLOC(String s) {
if (!s.trim().isEmpty()) {
D_SCHLLOC = Byte.parseByte(s);
} else {
D_SCHLLOC = Byte.MIN_VALUE;
}
}

protected final void initD_SCHOK(String s) {
if (!s.trim().isEmpty()) {
D_SCHOK = Byte.parseByte(s);
} else {
D_SCHOK = Byte.MIN_VALUE;
}
}

protected final void initD_SCHOOL(String s) {
if (!s.trim().isEmpty()) {
D_SCHOOL = Byte.parseByte(s);
} else {
D_SCHOOL = Byte.MIN_VALUE;
}
}

protected final void initD_SCHOOLCNTRY1(String s) {
if (!s.trim().isEmpty()) {
D_SCHOOLCNTRY1 = Byte.parseByte(s);
} else {
D_SCHOOLCNTRY1 = Byte.MIN_VALUE;
}
}

protected final void initD_SCHOOLCNTRY2(String s) {
if (!s.trim().isEmpty()) {
D_SCHOOLCNTRY2 = Byte.parseByte(s);
} else {
D_SCHOOLCNTRY2 = Byte.MIN_VALUE;
}
}

protected final void initD_SCHOOLCNTRY3(String s) {
if (!s.trim().isEmpty()) {
D_SCHOOLCNTRY3 = Byte.parseByte(s);
} else {
D_SCHOOLCNTRY3 = Byte.MIN_VALUE;
}
}

protected final void initD_SCHOOLCNTRY4(String s) {
if (!s.trim().isEmpty()) {
D_SCHOOLCNTRY4 = Byte.parseByte(s);
} else {
D_SCHOOLCNTRY4 = Byte.MIN_VALUE;
}
}

protected final void initD_SCHOOLCNTRY5(String s) {
if (!s.trim().isEmpty()) {
D_SCHOOLCNTRY5 = Byte.parseByte(s);
} else {
D_SCHOOLCNTRY5 = Byte.MIN_VALUE;
}
}

protected final void initD_SCLFSAT1(String s) {
if (!s.trim().isEmpty()) {
D_SCLFSAT1 = Byte.parseByte(s);
} else {
D_SCLFSAT1 = Byte.MIN_VALUE;
}
}

protected final void initD_SCLFSAT2(String s) {
if (!s.trim().isEmpty()) {
D_SCLFSAT2 = Byte.parseByte(s);
} else {
D_SCLFSAT2 = Byte.MIN_VALUE;
}
}

protected final void initD_SCLFSAT7(String s) {
if (!s.trim().isEmpty()) {
D_SCLFSAT7 = Byte.parseByte(s);
} else {
D_SCLFSAT7 = Byte.MIN_VALUE;
}
}

protected final void initD_SCLFSATO(String s) {
if (!s.trim().isEmpty()) {
D_SCLFSATO = Byte.parseByte(s);
} else {
D_SCLFSATO = Byte.MIN_VALUE;
}
}

protected final void initD_SCOPECL200(String s) {
if (!s.trim().isEmpty()) {
D_SCOPECL200 = Byte.parseByte(s);
} else {
D_SCOPECL200 = Byte.MIN_VALUE;
}
}

protected final void initD_SCOPECL30(String s) {
if (!s.trim().isEmpty()) {
D_SCOPECL30 = Byte.parseByte(s);
} else {
D_SCOPECL30 = Byte.MIN_VALUE;
}
}

protected final void initD_SCOPFAMA(String s) {
if (!s.trim().isEmpty()) {
D_SCOPFAMA = Byte.parseByte(s);
} else {
D_SCOPFAMA = Byte.MIN_VALUE;
}
}

protected final void initD_SCOPFAMB(String s) {
if (!s.trim().isEmpty()) {
D_SCOPFAMB = Byte.parseByte(s);
} else {
D_SCOPFAMB = Byte.MIN_VALUE;
}
}

protected final void initD_SCOPFAMD(String s) {
if (!s.trim().isEmpty()) {
D_SCOPFAMD = Byte.parseByte(s);
} else {
D_SCOPFAMD = Byte.MIN_VALUE;
}
}

protected final void initD_SCOPFAMF(String s) {
if (!s.trim().isEmpty()) {
D_SCOPFAMF = Byte.parseByte(s);
} else {
D_SCOPFAMF = Byte.MIN_VALUE;
}
}

protected final void initD_SCOPFAMH(String s) {
if (!s.trim().isEmpty()) {
D_SCOPFAMH = Byte.parseByte(s);
} else {
D_SCOPFAMH = Byte.MIN_VALUE;
}
}

protected final void initD_SCRF1(String s) {
if (!s.trim().isEmpty()) {
D_SCRF1 = Byte.parseByte(s);
} else {
D_SCRF1 = Byte.MIN_VALUE;
}
}

protected final void initD_SCRF2(String s) {
if (!s.trim().isEmpty()) {
D_SCRF2 = Byte.parseByte(s);
} else {
D_SCRF2 = Byte.MIN_VALUE;
}
}

protected final void initD_SCRF3(String s) {
if (!s.trim().isEmpty()) {
D_SCRF3 = Byte.parseByte(s);
} else {
D_SCRF3 = Byte.MIN_VALUE;
}
}

protected final void initD_SCRF4(String s) {
if (!s.trim().isEmpty()) {
D_SCRF4 = Byte.parseByte(s);
} else {
D_SCRF4 = Byte.MIN_VALUE;
}
}

protected final void initD_SCRF5(String s) {
if (!s.trim().isEmpty()) {
D_SCRF5 = Byte.parseByte(s);
} else {
D_SCRF5 = Byte.MIN_VALUE;
}
}

protected final void initD_SCRF6(String s) {
if (!s.trim().isEmpty()) {
D_SCRF6 = Byte.parseByte(s);
} else {
D_SCRF6 = Byte.MIN_VALUE;
}
}

protected final void initD_SCRF97(String s) {
if (!s.trim().isEmpty()) {
D_SCRF97 = Byte.parseByte(s);
} else {
D_SCRF97 = Byte.MIN_VALUE;
}
}

protected final void initD_SCRX_CODE(String s) {
if (!s.trim().isEmpty()) {
D_SCRX_CODE = Byte.parseByte(s);
} else {
D_SCRX_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF1(String s) {
if (!s.trim().isEmpty()) {
D_SCSF1 = Byte.parseByte(s);
} else {
D_SCSF1 = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF2A(String s) {
if (!s.trim().isEmpty()) {
D_SCSF2A = Byte.parseByte(s);
} else {
D_SCSF2A = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF2B(String s) {
if (!s.trim().isEmpty()) {
D_SCSF2B = Byte.parseByte(s);
} else {
D_SCSF2B = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF3A(String s) {
if (!s.trim().isEmpty()) {
D_SCSF3A = Byte.parseByte(s);
} else {
D_SCSF3A = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF3B(String s) {
if (!s.trim().isEmpty()) {
D_SCSF3B = Byte.parseByte(s);
} else {
D_SCSF3B = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF4A(String s) {
if (!s.trim().isEmpty()) {
D_SCSF4A = Byte.parseByte(s);
} else {
D_SCSF4A = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF4B(String s) {
if (!s.trim().isEmpty()) {
D_SCSF4B = Byte.parseByte(s);
} else {
D_SCSF4B = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF5(String s) {
if (!s.trim().isEmpty()) {
D_SCSF5 = Byte.parseByte(s);
} else {
D_SCSF5 = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF6A(String s) {
if (!s.trim().isEmpty()) {
D_SCSF6A = Byte.parseByte(s);
} else {
D_SCSF6A = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF6B(String s) {
if (!s.trim().isEmpty()) {
D_SCSF6B = Byte.parseByte(s);
} else {
D_SCSF6B = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF6C(String s) {
if (!s.trim().isEmpty()) {
D_SCSF6C = Byte.parseByte(s);
} else {
D_SCSF6C = Byte.MIN_VALUE;
}
}

protected final void initD_SCSF7(String s) {
if (!s.trim().isEmpty()) {
D_SCSF7 = Byte.parseByte(s);
} else {
D_SCSF7 = Byte.MIN_VALUE;
}
}

protected final void initD_SCUN1(String s) {
if (!s.trim().isEmpty()) {
D_SCUN1 = Byte.parseByte(s);
} else {
D_SCUN1 = Byte.MIN_VALUE;
}
}

protected final void initD_SCUN2(String s) {
if (!s.trim().isEmpty()) {
D_SCUN2 = Byte.parseByte(s);
} else {
D_SCUN2 = Byte.MIN_VALUE;
}
}

protected final void initD_SCUN3(String s) {
if (!s.trim().isEmpty()) {
D_SCUN3 = Byte.parseByte(s);
} else {
D_SCUN3 = Byte.MIN_VALUE;
}
}

protected final void initD_SCUN97(String s) {
if (!s.trim().isEmpty()) {
D_SCUN97 = Byte.parseByte(s);
} else {
D_SCUN97 = Byte.MIN_VALUE;
}
}

protected final void initD_SCUX_CODE(String s) {
if (!s.trim().isEmpty()) {
D_SCUX_CODE = Byte.parseByte(s);
} else {
D_SCUX_CODE = Byte.MIN_VALUE;
}
}

protected final void initD_SCWEMWBA(String s) {
if (!s.trim().isEmpty()) {
D_SCWEMWBA = Byte.parseByte(s);
} else {
D_SCWEMWBA = Byte.MIN_VALUE;
}
}

protected final void initD_SCWEMWBB(String s) {
if (!s.trim().isEmpty()) {
D_SCWEMWBB = Byte.parseByte(s);
} else {
D_SCWEMWBB = Byte.MIN_VALUE;
}
}

protected final void initD_SCWEMWBC(String s) {
if (!s.trim().isEmpty()) {
D_SCWEMWBC = Byte.parseByte(s);
} else {
D_SCWEMWBC = Byte.MIN_VALUE;
}
}

protected final void initD_SCWEMWBD(String s) {
if (!s.trim().isEmpty()) {
D_SCWEMWBD = Byte.parseByte(s);
} else {
D_SCWEMWBD = Byte.MIN_VALUE;
}
}

protected final void initD_SCWEMWBE(String s) {
if (!s.trim().isEmpty()) {
D_SCWEMWBE = Byte.parseByte(s);
} else {
D_SCWEMWBE = Byte.MIN_VALUE;
}
}

protected final void initD_SCWEMWBF(String s) {
if (!s.trim().isEmpty()) {
D_SCWEMWBF = Byte.parseByte(s);
} else {
D_SCWEMWBF = Byte.MIN_VALUE;
}
}

protected final void initD_SCWEMWBG(String s) {
if (!s.trim().isEmpty()) {
D_SCWEMWBG = Byte.parseByte(s);
} else {
D_SCWEMWBG = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKIMP(String s) {
if (!s.trim().isEmpty()) {
D_SCWKIMP = Byte.parseByte(s);
} else {
D_SCWKIMP = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR1(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR1 = Byte.parseByte(s);
} else {
D_SCWKOR1 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR10(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR10 = Byte.parseByte(s);
} else {
D_SCWKOR10 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR11(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR11 = Byte.parseByte(s);
} else {
D_SCWKOR11 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR12(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR12 = Byte.parseByte(s);
} else {
D_SCWKOR12 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR13(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR13 = Byte.parseByte(s);
} else {
D_SCWKOR13 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR14(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR14 = Byte.parseByte(s);
} else {
D_SCWKOR14 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR15(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR15 = Byte.parseByte(s);
} else {
D_SCWKOR15 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR2(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR2 = Byte.parseByte(s);
} else {
D_SCWKOR2 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR3(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR3 = Byte.parseByte(s);
} else {
D_SCWKOR3 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR4(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR4 = Byte.parseByte(s);
} else {
D_SCWKOR4 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR5(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR5 = Byte.parseByte(s);
} else {
D_SCWKOR5 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR6(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR6 = Byte.parseByte(s);
} else {
D_SCWKOR6 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR7(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR7 = Byte.parseByte(s);
} else {
D_SCWKOR7 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR8(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR8 = Byte.parseByte(s);
} else {
D_SCWKOR8 = Byte.MIN_VALUE;
}
}

protected final void initD_SCWKOR9(String s) {
if (!s.trim().isEmpty()) {
D_SCWKOR9 = Byte.parseByte(s);
} else {
D_SCWKOR9 = Byte.MIN_VALUE;
}
}

protected final void initD_SEEARNGRS_DV(String s) {
if (!s.trim().isEmpty()) {
D_SEEARNGRS_DV = Double.parseDouble(s);
} else {
D_SEEARNGRS_DV = Double.NaN;
}
}

protected final void initD_SEEARNGRS_IF(String s) {
if (!s.trim().isEmpty()) {
D_SEEARNGRS_IF = Byte.parseByte(s);
} else {
D_SEEARNGRS_IF = Byte.MIN_VALUE;
}
}

protected final void initD_SEEARNNET_DV(String s) {
if (!s.trim().isEmpty()) {
D_SEEARNNET_DV = Double.parseDouble(s);
} else {
D_SEEARNNET_DV = Double.NaN;
}
}

protected final void initD_SERVUSE1(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE1 = Byte.parseByte(s);
} else {
D_SERVUSE1 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE10(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE10 = Byte.parseByte(s);
} else {
D_SERVUSE10 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE2(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE2 = Byte.parseByte(s);
} else {
D_SERVUSE2 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE3(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE3 = Byte.parseByte(s);
} else {
D_SERVUSE3 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE4(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE4 = Byte.parseByte(s);
} else {
D_SERVUSE4 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE5(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE5 = Byte.parseByte(s);
} else {
D_SERVUSE5 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE6(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE6 = Byte.parseByte(s);
} else {
D_SERVUSE6 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE7(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE7 = Byte.parseByte(s);
} else {
D_SERVUSE7 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE8(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE8 = Byte.parseByte(s);
} else {
D_SERVUSE8 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE9(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE9 = Byte.parseByte(s);
} else {
D_SERVUSE9 = Byte.MIN_VALUE;
}
}

protected final void initD_SERVUSE96(String s) {
if (!s.trim().isEmpty()) {
D_SERVUSE96 = Byte.parseByte(s);
} else {
D_SERVUSE96 = Byte.MIN_VALUE;
}
}

protected final void initD_SEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
D_SEX = false;
} else {
D_SEX = true;
}
}
}

protected final void initD_SEX_DV(String s) {
if (!s.trim().isEmpty()) {
D_SEX_DV = Byte.parseByte(s);
} else {
D_SEX_DV = Byte.MIN_VALUE;
}
}

protected final void initD_SF1(String s) {
if (!s.trim().isEmpty()) {
D_SF1 = Byte.parseByte(s);
} else {
D_SF1 = Byte.MIN_VALUE;
}
}

protected final void initD_SF12MCS_DV(String s) {
if (!s.trim().isEmpty()) {
D_SF12MCS_DV = Double.parseDouble(s);
} else {
D_SF12MCS_DV = Double.NaN;
}
}

protected final void initD_SF12PCS_DV(String s) {
if (!s.trim().isEmpty()) {
D_SF12PCS_DV = Double.parseDouble(s);
} else {
D_SF12PCS_DV = Double.NaN;
}
}

protected final void initD_SIGNEDUCKIDS1(String s) {
if (!s.trim().isEmpty()) {
D_SIGNEDUCKIDS1 = Byte.parseByte(s);
} else {
D_SIGNEDUCKIDS1 = Byte.MIN_VALUE;
}
}

protected final void initD_SIGNEDUCKIDS2(String s) {
if (!s.trim().isEmpty()) {
D_SIGNEDUCKIDS2 = Byte.parseByte(s);
} else {
D_SIGNEDUCKIDS2 = Byte.MIN_VALUE;
}
}

protected final void initD_SIGNHEALTHKI1(String s) {
if (!s.trim().isEmpty()) {
D_SIGNHEALTHKI1 = Byte.parseByte(s);
} else {
D_SIGNHEALTHKI1 = Byte.MIN_VALUE;
}
}

protected final void initD_SIGNHEALTHKI2(String s) {
if (!s.trim().isEmpty()) {
D_SIGNHEALTHKI2 = Byte.parseByte(s);
} else {
D_SIGNHEALTHKI2 = Byte.MIN_VALUE;
}
}

protected final void initD_SINGLE_DV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
D_SINGLE_DV = false;
} else {
D_SINGLE_DV = true;
}
}
}

protected final void initD_SLP_QUAL(String s) {
if (!s.trim().isEmpty()) {
D_SLP_QUAL = Byte.parseByte(s);
} else {
D_SLP_QUAL = Byte.MIN_VALUE;
}
}

protected final void initD_SMKMNTH11(String s) {
if (!s.trim().isEmpty()) {
D_SMKMNTH11 = Byte.parseByte(s);
} else {
D_SMKMNTH11 = Byte.MIN_VALUE;
}
}

protected final void initD_SMKMNTH12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SMKMNTH12 = false;
} else {
D_SMKMNTH12 = true;
}
}
}

protected final void initD_SMKMNTH13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SMKMNTH13 = false;
} else {
D_SMKMNTH13 = true;
}
}
}

protected final void initD_SMKMNTH14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SMKMNTH14 = false;
} else {
D_SMKMNTH14 = true;
}
}
}

protected final void initD_SMKMNTH21(String s) {
if (!s.trim().isEmpty()) {
D_SMKMNTH21 = Byte.parseByte(s);
} else {
D_SMKMNTH21 = Byte.MIN_VALUE;
}
}

protected final void initD_SMKMNTH22(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SMKMNTH22 = false;
} else {
D_SMKMNTH22 = true;
}
}
}

protected final void initD_SMKMNTH23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SMKMNTH23 = false;
} else {
D_SMKMNTH23 = true;
}
}
}

protected final void initD_SMKMNTH24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SMKMNTH24 = false;
} else {
D_SMKMNTH24 = true;
}
}
}

protected final void initD_SMKMNTH31(String s) {
if (!s.trim().isEmpty()) {
D_SMKMNTH31 = Byte.parseByte(s);
} else {
D_SMKMNTH31 = Byte.MIN_VALUE;
}
}

protected final void initD_SMKMNTH32(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SMKMNTH32 = false;
} else {
D_SMKMNTH32 = true;
}
}
}

protected final void initD_SMKMNTH33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SMKMNTH33 = false;
} else {
D_SMKMNTH33 = true;
}
}
}

protected final void initD_SMKMNTH34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SMKMNTH34 = false;
} else {
D_SMKMNTH34 = true;
}
}
}

protected final void initD_SMOFRQ(String s) {
if (!s.trim().isEmpty()) {
D_SMOFRQ = Byte.parseByte(s);
} else {
D_SMOFRQ = Byte.MIN_VALUE;
}
}

protected final void initD_SOCCONT(String s) {
if (!s.trim().isEmpty()) {
D_SOCCONT = Byte.parseByte(s);
} else {
D_SOCCONT = Byte.MIN_VALUE;
}
}

protected final void initD_SPPEN(String s) {
if (!s.trim().isEmpty()) {
D_SPPEN = Byte.parseByte(s);
} else {
D_SPPEN = Byte.MIN_VALUE;
}
}

protected final void initD_SPPID(String s) {
if (!s.trim().isEmpty()) {
D_SPPID = Integer.parseInt(s);
} else {
D_SPPID = Integer.MIN_VALUE;
}
}

protected final void initD_SPPNO(String s) {
if (!s.trim().isEmpty()) {
D_SPPNO = Byte.parseByte(s);
} else {
D_SPPNO = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT1(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT1 = Byte.parseByte(s);
} else {
D_SRVYNOT1 = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT10(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT10 = Byte.parseByte(s);
} else {
D_SRVYNOT10 = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT2(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT2 = Byte.parseByte(s);
} else {
D_SRVYNOT2 = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT3(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT3 = Byte.parseByte(s);
} else {
D_SRVYNOT3 = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT4(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT4 = Byte.parseByte(s);
} else {
D_SRVYNOT4 = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT5(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT5 = Byte.parseByte(s);
} else {
D_SRVYNOT5 = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT6(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT6 = Byte.parseByte(s);
} else {
D_SRVYNOT6 = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT7(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT7 = Byte.parseByte(s);
} else {
D_SRVYNOT7 = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT8(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT8 = Byte.parseByte(s);
} else {
D_SRVYNOT8 = Byte.MIN_VALUE;
}
}

protected final void initD_SRVYNOT9(String s) {
if (!s.trim().isEmpty()) {
D_SRVYNOT9 = Byte.parseByte(s);
} else {
D_SRVYNOT9 = Byte.MIN_VALUE;
}
}

protected final void initD_STATCM1(String s) {
if (!s.trim().isEmpty()) {
D_STATCM1 = Byte.parseByte(s);
} else {
D_STATCM1 = Byte.MIN_VALUE;
}
}

protected final void initD_STATCM2(String s) {
if (!s.trim().isEmpty()) {
D_STATCM2 = Byte.parseByte(s);
} else {
D_STATCM2 = Byte.MIN_VALUE;
}
}

protected final void initD_STATCM3(String s) {
if (!s.trim().isEmpty()) {
D_STATCM3 = Byte.parseByte(s);
} else {
D_STATCM3 = Byte.MIN_VALUE;
}
}

protected final void initD_STATCY41(String s) {
if (!s.trim().isEmpty()) {
D_STATCY41 = Short.parseShort(s);
} else {
D_STATCY41 = Short.MIN_VALUE;
}
}

protected final void initD_STATCY42(String s) {
if (!s.trim().isEmpty()) {
D_STATCY42 = Short.parseShort(s);
} else {
D_STATCY42 = Short.MIN_VALUE;
}
}

protected final void initD_STATCY43(String s) {
if (!s.trim().isEmpty()) {
D_STATCY43 = Short.parseShort(s);
} else {
D_STATCY43 = Short.MIN_VALUE;
}
}

protected final void initD_STATENDD1(String s) {
if (!s.trim().isEmpty()) {
D_STATENDD1 = Byte.parseByte(s);
} else {
D_STATENDD1 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDD2(String s) {
if (!s.trim().isEmpty()) {
D_STATENDD2 = Byte.parseByte(s);
} else {
D_STATENDD2 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDD3(String s) {
if (!s.trim().isEmpty()) {
D_STATENDD3 = Byte.parseByte(s);
} else {
D_STATENDD3 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDD4(String s) {
if (!s.trim().isEmpty()) {
D_STATENDD4 = Byte.parseByte(s);
} else {
D_STATENDD4 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDD5(String s) {
if (!s.trim().isEmpty()) {
D_STATENDD5 = Byte.parseByte(s);
} else {
D_STATENDD5 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDD6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_STATENDD6 = false;
} else {
D_STATENDD6 = true;
}
}
}

protected final void initD_STATENDM1(String s) {
if (!s.trim().isEmpty()) {
D_STATENDM1 = Byte.parseByte(s);
} else {
D_STATENDM1 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDM2(String s) {
if (!s.trim().isEmpty()) {
D_STATENDM2 = Byte.parseByte(s);
} else {
D_STATENDM2 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDM3(String s) {
if (!s.trim().isEmpty()) {
D_STATENDM3 = Byte.parseByte(s);
} else {
D_STATENDM3 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDM4(String s) {
if (!s.trim().isEmpty()) {
D_STATENDM4 = Byte.parseByte(s);
} else {
D_STATENDM4 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDM5(String s) {
if (!s.trim().isEmpty()) {
D_STATENDM5 = Byte.parseByte(s);
} else {
D_STATENDM5 = Byte.MIN_VALUE;
}
}

protected final void initD_STATENDM6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_STATENDM6 = false;
} else {
D_STATENDM6 = true;
}
}
}

protected final void initD_STATENDY41(String s) {
if (!s.trim().isEmpty()) {
D_STATENDY41 = Short.parseShort(s);
} else {
D_STATENDY41 = Short.MIN_VALUE;
}
}

protected final void initD_STATENDY42(String s) {
if (!s.trim().isEmpty()) {
D_STATENDY42 = Short.parseShort(s);
} else {
D_STATENDY42 = Short.MIN_VALUE;
}
}

protected final void initD_STATENDY43(String s) {
if (!s.trim().isEmpty()) {
D_STATENDY43 = Short.parseShort(s);
} else {
D_STATENDY43 = Short.MIN_VALUE;
}
}

protected final void initD_STATENDY44(String s) {
if (!s.trim().isEmpty()) {
D_STATENDY44 = Short.parseShort(s);
} else {
D_STATENDY44 = Short.MIN_VALUE;
}
}

protected final void initD_STATENDY45(String s) {
if (!s.trim().isEmpty()) {
D_STATENDY45 = Short.parseShort(s);
} else {
D_STATENDY45 = Short.MIN_VALUE;
}
}

protected final void initD_STATENDY46(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_STATENDY46 = false;
} else {
D_STATENDY46 = true;
}
}
}

protected final void initD_STENDREAS(String s) {
if (!s.trim().isEmpty()) {
D_STENDREAS = Byte.parseByte(s);
} else {
D_STENDREAS = Byte.MIN_VALUE;
}
}

protected final void initD_STRATA(String s) {
if (!s.trim().isEmpty()) {
D_STRATA = Short.parseShort(s);
} else {
D_STRATA = Short.MIN_VALUE;
}
}

protected final void initD_SUSP(String s) {
if (!s.trim().isEmpty()) {
D_SUSP = Byte.parseByte(s);
} else {
D_SUSP = Byte.MIN_VALUE;
}
}

protected final void initD_SVACTS1(String s) {
if (!s.trim().isEmpty()) {
D_SVACTS1 = Byte.parseByte(s);
} else {
D_SVACTS1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVACTS2(String s) {
if (!s.trim().isEmpty()) {
D_SVACTS2 = Byte.parseByte(s);
} else {
D_SVACTS2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVACTS3(String s) {
if (!s.trim().isEmpty()) {
D_SVACTS3 = Byte.parseByte(s);
} else {
D_SVACTS3 = Byte.MIN_VALUE;
}
}

protected final void initD_SVACTS4(String s) {
if (!s.trim().isEmpty()) {
D_SVACTS4 = Byte.parseByte(s);
} else {
D_SVACTS4 = Byte.MIN_VALUE;
}
}

protected final void initD_SVACTS5(String s) {
if (!s.trim().isEmpty()) {
D_SVACTS5 = Byte.parseByte(s);
} else {
D_SVACTS5 = Byte.MIN_VALUE;
}
}

protected final void initD_SVACTS96(String s) {
if (!s.trim().isEmpty()) {
D_SVACTS96 = Byte.parseByte(s);
} else {
D_SVACTS96 = Byte.MIN_VALUE;
}
}

protected final void initD_SVACTS97(String s) {
if (!s.trim().isEmpty()) {
D_SVACTS97 = Byte.parseByte(s);
} else {
D_SVACTS97 = Byte.MIN_VALUE;
}
}

protected final void initD_SVAMT1(String s) {
if (!s.trim().isEmpty()) {
D_SVAMT1 = Integer.parseInt(s);
} else {
D_SVAMT1 = Integer.MIN_VALUE;
}
}

protected final void initD_SVAMT2(String s) {
if (!s.trim().isEmpty()) {
D_SVAMT2 = Integer.parseInt(s);
} else {
D_SVAMT2 = Integer.MIN_VALUE;
}
}

protected final void initD_SVAMT3(String s) {
if (!s.trim().isEmpty()) {
D_SVAMT3 = Integer.parseInt(s);
} else {
D_SVAMT3 = Integer.MIN_VALUE;
}
}

protected final void initD_SVAMT4(String s) {
if (!s.trim().isEmpty()) {
D_SVAMT4 = Integer.parseInt(s);
} else {
D_SVAMT4 = Integer.MIN_VALUE;
}
}

protected final void initD_SVAMT5(String s) {
if (!s.trim().isEmpty()) {
D_SVAMT5 = Integer.parseInt(s);
} else {
D_SVAMT5 = Integer.MIN_VALUE;
}
}

protected final void initD_SVAMT6(String s) {
if (!s.trim().isEmpty()) {
D_SVAMT6 = Integer.parseInt(s);
} else {
D_SVAMT6 = Integer.MIN_VALUE;
}
}

protected final void initD_SVB1_1(String s) {
if (!s.trim().isEmpty()) {
D_SVB1_1 = Byte.parseByte(s);
} else {
D_SVB1_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB1_2(String s) {
if (!s.trim().isEmpty()) {
D_SVB1_2 = Byte.parseByte(s);
} else {
D_SVB1_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB1_3(String s) {
if (!s.trim().isEmpty()) {
D_SVB1_3 = Byte.parseByte(s);
} else {
D_SVB1_3 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB1_4(String s) {
if (!s.trim().isEmpty()) {
D_SVB1_4 = Byte.parseByte(s);
} else {
D_SVB1_4 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB1_5(String s) {
if (!s.trim().isEmpty()) {
D_SVB1_5 = Byte.parseByte(s);
} else {
D_SVB1_5 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB1_6(String s) {
if (!s.trim().isEmpty()) {
D_SVB1_6 = Byte.parseByte(s);
} else {
D_SVB1_6 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB2_1(String s) {
if (!s.trim().isEmpty()) {
D_SVB2_1 = Byte.parseByte(s);
} else {
D_SVB2_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB2_2(String s) {
if (!s.trim().isEmpty()) {
D_SVB2_2 = Byte.parseByte(s);
} else {
D_SVB2_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB2_3(String s) {
if (!s.trim().isEmpty()) {
D_SVB2_3 = Byte.parseByte(s);
} else {
D_SVB2_3 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB2_4(String s) {
if (!s.trim().isEmpty()) {
D_SVB2_4 = Byte.parseByte(s);
} else {
D_SVB2_4 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB2_5(String s) {
if (!s.trim().isEmpty()) {
D_SVB2_5 = Byte.parseByte(s);
} else {
D_SVB2_5 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB2_6(String s) {
if (!s.trim().isEmpty()) {
D_SVB2_6 = Byte.parseByte(s);
} else {
D_SVB2_6 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB3_1(String s) {
if (!s.trim().isEmpty()) {
D_SVB3_1 = Byte.parseByte(s);
} else {
D_SVB3_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB3_2(String s) {
if (!s.trim().isEmpty()) {
D_SVB3_2 = Byte.parseByte(s);
} else {
D_SVB3_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB3_3(String s) {
if (!s.trim().isEmpty()) {
D_SVB3_3 = Byte.parseByte(s);
} else {
D_SVB3_3 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB3_4(String s) {
if (!s.trim().isEmpty()) {
D_SVB3_4 = Byte.parseByte(s);
} else {
D_SVB3_4 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB3_5(String s) {
if (!s.trim().isEmpty()) {
D_SVB3_5 = Byte.parseByte(s);
} else {
D_SVB3_5 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB3_6(String s) {
if (!s.trim().isEmpty()) {
D_SVB3_6 = Byte.parseByte(s);
} else {
D_SVB3_6 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB4_1(String s) {
if (!s.trim().isEmpty()) {
D_SVB4_1 = Byte.parseByte(s);
} else {
D_SVB4_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB4_2(String s) {
if (!s.trim().isEmpty()) {
D_SVB4_2 = Byte.parseByte(s);
} else {
D_SVB4_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB4_3(String s) {
if (!s.trim().isEmpty()) {
D_SVB4_3 = Byte.parseByte(s);
} else {
D_SVB4_3 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB4_4(String s) {
if (!s.trim().isEmpty()) {
D_SVB4_4 = Byte.parseByte(s);
} else {
D_SVB4_4 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB4_5(String s) {
if (!s.trim().isEmpty()) {
D_SVB4_5 = Byte.parseByte(s);
} else {
D_SVB4_5 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB4_6(String s) {
if (!s.trim().isEmpty()) {
D_SVB4_6 = Byte.parseByte(s);
} else {
D_SVB4_6 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB5_1(String s) {
if (!s.trim().isEmpty()) {
D_SVB5_1 = Byte.parseByte(s);
} else {
D_SVB5_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB5_2(String s) {
if (!s.trim().isEmpty()) {
D_SVB5_2 = Byte.parseByte(s);
} else {
D_SVB5_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB5_3(String s) {
if (!s.trim().isEmpty()) {
D_SVB5_3 = Byte.parseByte(s);
} else {
D_SVB5_3 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB5_4(String s) {
if (!s.trim().isEmpty()) {
D_SVB5_4 = Byte.parseByte(s);
} else {
D_SVB5_4 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB5_5(String s) {
if (!s.trim().isEmpty()) {
D_SVB5_5 = Byte.parseByte(s);
} else {
D_SVB5_5 = Byte.MIN_VALUE;
}
}

protected final void initD_SVB5_6(String s) {
if (!s.trim().isEmpty()) {
D_SVB5_6 = Byte.parseByte(s);
} else {
D_SVB5_6 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN0_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN0_1 = Byte.parseByte(s);
} else {
D_SVPN0_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN0_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN0_2 = Byte.parseByte(s);
} else {
D_SVPN0_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN0_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN0_3 = false;
} else {
D_SVPN0_3 = true;
}
}
}

protected final void initD_SVPN0_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN0_4 = false;
} else {
D_SVPN0_4 = true;
}
}
}

protected final void initD_SVPN0_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN0_5 = false;
} else {
D_SVPN0_5 = true;
}
}
}

protected final void initD_SVPN0_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN0_6 = false;
} else {
D_SVPN0_6 = true;
}
}
}

protected final void initD_SVPN10_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN10_1 = Byte.parseByte(s);
} else {
D_SVPN10_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN10_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN10_2 = Byte.parseByte(s);
} else {
D_SVPN10_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN10_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN10_3 = false;
} else {
D_SVPN10_3 = true;
}
}
}

protected final void initD_SVPN10_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN10_4 = false;
} else {
D_SVPN10_4 = true;
}
}
}

protected final void initD_SVPN10_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN10_5 = false;
} else {
D_SVPN10_5 = true;
}
}
}

protected final void initD_SVPN10_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN10_6 = false;
} else {
D_SVPN10_6 = true;
}
}
}

protected final void initD_SVPN11_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN11_1 = Byte.parseByte(s);
} else {
D_SVPN11_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN11_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN11_2 = Byte.parseByte(s);
} else {
D_SVPN11_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN11_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN11_3 = false;
} else {
D_SVPN11_3 = true;
}
}
}

protected final void initD_SVPN11_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN11_4 = false;
} else {
D_SVPN11_4 = true;
}
}
}

protected final void initD_SVPN11_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN11_5 = false;
} else {
D_SVPN11_5 = true;
}
}
}

protected final void initD_SVPN11_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN11_6 = false;
} else {
D_SVPN11_6 = true;
}
}
}

protected final void initD_SVPN12_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN12_1 = Byte.parseByte(s);
} else {
D_SVPN12_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN12_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN12_2 = Byte.parseByte(s);
} else {
D_SVPN12_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN12_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN12_3 = false;
} else {
D_SVPN12_3 = true;
}
}
}

protected final void initD_SVPN12_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN12_4 = false;
} else {
D_SVPN12_4 = true;
}
}
}

protected final void initD_SVPN12_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN12_5 = false;
} else {
D_SVPN12_5 = true;
}
}
}

protected final void initD_SVPN12_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN12_6 = false;
} else {
D_SVPN12_6 = true;
}
}
}

protected final void initD_SVPN13_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN13_1 = Byte.parseByte(s);
} else {
D_SVPN13_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN13_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN13_2 = Byte.parseByte(s);
} else {
D_SVPN13_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN13_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN13_3 = false;
} else {
D_SVPN13_3 = true;
}
}
}

protected final void initD_SVPN13_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN13_4 = false;
} else {
D_SVPN13_4 = true;
}
}
}

protected final void initD_SVPN13_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN13_5 = false;
} else {
D_SVPN13_5 = true;
}
}
}

protected final void initD_SVPN13_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN13_6 = false;
} else {
D_SVPN13_6 = true;
}
}
}

protected final void initD_SVPN14_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN14_1 = Byte.parseByte(s);
} else {
D_SVPN14_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN14_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN14_2 = Byte.parseByte(s);
} else {
D_SVPN14_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN14_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN14_3 = false;
} else {
D_SVPN14_3 = true;
}
}
}

protected final void initD_SVPN14_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN14_4 = false;
} else {
D_SVPN14_4 = true;
}
}
}

protected final void initD_SVPN14_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN14_5 = false;
} else {
D_SVPN14_5 = true;
}
}
}

protected final void initD_SVPN14_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN14_6 = false;
} else {
D_SVPN14_6 = true;
}
}
}

protected final void initD_SVPN15_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN15_1 = Byte.parseByte(s);
} else {
D_SVPN15_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN15_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN15_2 = Byte.parseByte(s);
} else {
D_SVPN15_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN15_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN15_3 = false;
} else {
D_SVPN15_3 = true;
}
}
}

protected final void initD_SVPN15_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN15_4 = false;
} else {
D_SVPN15_4 = true;
}
}
}

protected final void initD_SVPN15_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN15_5 = false;
} else {
D_SVPN15_5 = true;
}
}
}

protected final void initD_SVPN15_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN15_6 = false;
} else {
D_SVPN15_6 = true;
}
}
}

protected final void initD_SVPN16_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN16_1 = Byte.parseByte(s);
} else {
D_SVPN16_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN16_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN16_2 = Byte.parseByte(s);
} else {
D_SVPN16_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN16_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN16_3 = false;
} else {
D_SVPN16_3 = true;
}
}
}

protected final void initD_SVPN16_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN16_4 = false;
} else {
D_SVPN16_4 = true;
}
}
}

protected final void initD_SVPN16_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN16_5 = false;
} else {
D_SVPN16_5 = true;
}
}
}

protected final void initD_SVPN16_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN16_6 = false;
} else {
D_SVPN16_6 = true;
}
}
}

protected final void initD_SVPN1_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN1_1 = Byte.parseByte(s);
} else {
D_SVPN1_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN1_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN1_2 = Byte.parseByte(s);
} else {
D_SVPN1_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN1_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN1_3 = false;
} else {
D_SVPN1_3 = true;
}
}
}

protected final void initD_SVPN1_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN1_4 = false;
} else {
D_SVPN1_4 = true;
}
}
}

protected final void initD_SVPN1_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN1_5 = false;
} else {
D_SVPN1_5 = true;
}
}
}

protected final void initD_SVPN1_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN1_6 = false;
} else {
D_SVPN1_6 = true;
}
}
}

protected final void initD_SVPN2_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN2_1 = Byte.parseByte(s);
} else {
D_SVPN2_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN2_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN2_2 = Byte.parseByte(s);
} else {
D_SVPN2_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN2_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN2_3 = false;
} else {
D_SVPN2_3 = true;
}
}
}

protected final void initD_SVPN2_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN2_4 = false;
} else {
D_SVPN2_4 = true;
}
}
}

protected final void initD_SVPN2_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN2_5 = false;
} else {
D_SVPN2_5 = true;
}
}
}

protected final void initD_SVPN2_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN2_6 = false;
} else {
D_SVPN2_6 = true;
}
}
}

protected final void initD_SVPN3_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN3_1 = Byte.parseByte(s);
} else {
D_SVPN3_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN3_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN3_2 = Byte.parseByte(s);
} else {
D_SVPN3_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN3_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN3_3 = false;
} else {
D_SVPN3_3 = true;
}
}
}

protected final void initD_SVPN3_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN3_4 = false;
} else {
D_SVPN3_4 = true;
}
}
}

protected final void initD_SVPN3_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN3_5 = false;
} else {
D_SVPN3_5 = true;
}
}
}

protected final void initD_SVPN3_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN3_6 = false;
} else {
D_SVPN3_6 = true;
}
}
}

protected final void initD_SVPN4_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN4_1 = Byte.parseByte(s);
} else {
D_SVPN4_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN4_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN4_2 = Byte.parseByte(s);
} else {
D_SVPN4_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN4_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN4_3 = false;
} else {
D_SVPN4_3 = true;
}
}
}

protected final void initD_SVPN4_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN4_4 = false;
} else {
D_SVPN4_4 = true;
}
}
}

protected final void initD_SVPN4_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN4_5 = false;
} else {
D_SVPN4_5 = true;
}
}
}

protected final void initD_SVPN4_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN4_6 = false;
} else {
D_SVPN4_6 = true;
}
}
}

protected final void initD_SVPN5_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN5_1 = Byte.parseByte(s);
} else {
D_SVPN5_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN5_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN5_2 = Byte.parseByte(s);
} else {
D_SVPN5_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN5_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN5_3 = false;
} else {
D_SVPN5_3 = true;
}
}
}

protected final void initD_SVPN5_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN5_4 = false;
} else {
D_SVPN5_4 = true;
}
}
}

protected final void initD_SVPN5_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN5_5 = false;
} else {
D_SVPN5_5 = true;
}
}
}

protected final void initD_SVPN5_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN5_6 = false;
} else {
D_SVPN5_6 = true;
}
}
}

protected final void initD_SVPN6_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN6_1 = Byte.parseByte(s);
} else {
D_SVPN6_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN6_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN6_2 = Byte.parseByte(s);
} else {
D_SVPN6_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN6_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN6_3 = false;
} else {
D_SVPN6_3 = true;
}
}
}

protected final void initD_SVPN6_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN6_4 = false;
} else {
D_SVPN6_4 = true;
}
}
}

protected final void initD_SVPN6_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN6_5 = false;
} else {
D_SVPN6_5 = true;
}
}
}

protected final void initD_SVPN6_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN6_6 = false;
} else {
D_SVPN6_6 = true;
}
}
}

protected final void initD_SVPN7_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN7_1 = Byte.parseByte(s);
} else {
D_SVPN7_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN7_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN7_2 = Byte.parseByte(s);
} else {
D_SVPN7_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN7_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN7_3 = false;
} else {
D_SVPN7_3 = true;
}
}
}

protected final void initD_SVPN7_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN7_4 = false;
} else {
D_SVPN7_4 = true;
}
}
}

protected final void initD_SVPN7_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN7_5 = false;
} else {
D_SVPN7_5 = true;
}
}
}

protected final void initD_SVPN7_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN7_6 = false;
} else {
D_SVPN7_6 = true;
}
}
}

protected final void initD_SVPN8_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN8_1 = Byte.parseByte(s);
} else {
D_SVPN8_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN8_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN8_2 = Byte.parseByte(s);
} else {
D_SVPN8_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN8_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN8_3 = false;
} else {
D_SVPN8_3 = true;
}
}
}

protected final void initD_SVPN8_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN8_4 = false;
} else {
D_SVPN8_4 = true;
}
}
}

protected final void initD_SVPN8_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN8_5 = false;
} else {
D_SVPN8_5 = true;
}
}
}

protected final void initD_SVPN8_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN8_6 = false;
} else {
D_SVPN8_6 = true;
}
}
}

protected final void initD_SVPN9_1(String s) {
if (!s.trim().isEmpty()) {
D_SVPN9_1 = Byte.parseByte(s);
} else {
D_SVPN9_1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN9_2(String s) {
if (!s.trim().isEmpty()) {
D_SVPN9_2 = Byte.parseByte(s);
} else {
D_SVPN9_2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVPN9_3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN9_3 = false;
} else {
D_SVPN9_3 = true;
}
}
}

protected final void initD_SVPN9_4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN9_4 = false;
} else {
D_SVPN9_4 = true;
}
}
}

protected final void initD_SVPN9_5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN9_5 = false;
} else {
D_SVPN9_5 = true;
}
}
}

protected final void initD_SVPN9_6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVPN9_6 = false;
} else {
D_SVPN9_6 = true;
}
}
}

protected final void initD_SVSJ1(String s) {
if (!s.trim().isEmpty()) {
D_SVSJ1 = Byte.parseByte(s);
} else {
D_SVSJ1 = Byte.MIN_VALUE;
}
}

protected final void initD_SVSJ2(String s) {
if (!s.trim().isEmpty()) {
D_SVSJ2 = Byte.parseByte(s);
} else {
D_SVSJ2 = Byte.MIN_VALUE;
}
}

protected final void initD_SVSJ3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVSJ3 = false;
} else {
D_SVSJ3 = true;
}
}
}

protected final void initD_SVSJ4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVSJ4 = false;
} else {
D_SVSJ4 = true;
}
}
}

protected final void initD_SVSJ5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVSJ5 = false;
} else {
D_SVSJ5 = true;
}
}
}

protected final void initD_SVSJ6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVSJ6 = false;
} else {
D_SVSJ6 = true;
}
}
}

protected final void initD_SVSK1(String s) {
if (!s.trim().isEmpty()) {
D_SVSK1 = Integer.parseInt(s);
} else {
D_SVSK1 = Integer.MIN_VALUE;
}
}

protected final void initD_SVSK2(String s) {
if (!s.trim().isEmpty()) {
D_SVSK2 = Integer.parseInt(s);
} else {
D_SVSK2 = Integer.MIN_VALUE;
}
}

protected final void initD_SVSK3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVSK3 = false;
} else {
D_SVSK3 = true;
}
}
}

protected final void initD_SVSK4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVSK4 = false;
} else {
D_SVSK4 = true;
}
}
}

protected final void initD_SVSK5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVSK5 = false;
} else {
D_SVSK5 = true;
}
}
}

protected final void initD_SVSK6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
D_SVSK6 = false;
} else {
D_SVSK6 = true;
}
}
}

protected final void initD_SWEMWBS_DV(String s) {
if (!s.trim().isEmpty()) {
D_SWEMWBS_DV = Byte.parseByte(s);
} else {
D_SWEMWBS_DV = Byte.MIN_VALUE;
}
}

protected final void initD_TF_JBSEMP(String s) {
if (!s.trim().isEmpty()) {
D_TF_JBSEMP = Byte.parseByte(s);
} else {
D_TF_JBSEMP = Byte.MIN_VALUE;
}
}

protected final void initD_TMTIME(String s) {
if (!s.trim().isEmpty()) {
D_TMTIME = Short.parseShort(s);
} else {
D_TMTIME = Short.MIN_VALUE;
}
}

protected final void initD_TRAINANY(String s) {
if (!s.trim().isEmpty()) {
D_TRAINANY = Byte.parseByte(s);
} else {
D_TRAINANY = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINDAYS1(String s) {
if (!s.trim().isEmpty()) {
D_TRAINDAYS1 = Short.parseShort(s);
} else {
D_TRAINDAYS1 = Short.MIN_VALUE;
}
}

protected final void initD_TRAINDAYS2(String s) {
if (!s.trim().isEmpty()) {
D_TRAINDAYS2 = Short.parseShort(s);
} else {
D_TRAINDAYS2 = Short.MIN_VALUE;
}
}

protected final void initD_TRAINDAYS3(String s) {
if (!s.trim().isEmpty()) {
D_TRAINDAYS3 = Short.parseShort(s);
} else {
D_TRAINDAYS3 = Short.MIN_VALUE;
}
}

protected final void initD_TRAINEND1(String s) {
if (!s.trim().isEmpty()) {
D_TRAINEND1 = Byte.parseByte(s);
} else {
D_TRAINEND1 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINEND2(String s) {
if (!s.trim().isEmpty()) {
D_TRAINEND2 = Byte.parseByte(s);
} else {
D_TRAINEND2 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINEND3(String s) {
if (!s.trim().isEmpty()) {
D_TRAINEND3 = Byte.parseByte(s);
} else {
D_TRAINEND3 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINHRS1(String s) {
if (!s.trim().isEmpty()) {
D_TRAINHRS1 = Byte.parseByte(s);
} else {
D_TRAINHRS1 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINHRS2(String s) {
if (!s.trim().isEmpty()) {
D_TRAINHRS2 = Byte.parseByte(s);
} else {
D_TRAINHRS2 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINHRS3(String s) {
if (!s.trim().isEmpty()) {
D_TRAINHRS3 = Byte.parseByte(s);
} else {
D_TRAINHRS3 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINN(String s) {
if (!s.trim().isEmpty()) {
D_TRAINN = Byte.parseByte(s);
} else {
D_TRAINN = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP11(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP11 = Byte.parseByte(s);
} else {
D_TRAINPURP11 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP12(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP12 = Byte.parseByte(s);
} else {
D_TRAINPURP12 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP13(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP13 = Byte.parseByte(s);
} else {
D_TRAINPURP13 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP21(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP21 = Byte.parseByte(s);
} else {
D_TRAINPURP21 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP22(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP22 = Byte.parseByte(s);
} else {
D_TRAINPURP22 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP23(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP23 = Byte.parseByte(s);
} else {
D_TRAINPURP23 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP31(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP31 = Byte.parseByte(s);
} else {
D_TRAINPURP31 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP32(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP32 = Byte.parseByte(s);
} else {
D_TRAINPURP32 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP33(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP33 = Byte.parseByte(s);
} else {
D_TRAINPURP33 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP41(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP41 = Byte.parseByte(s);
} else {
D_TRAINPURP41 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP42(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP42 = Byte.parseByte(s);
} else {
D_TRAINPURP42 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP43(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP43 = Byte.parseByte(s);
} else {
D_TRAINPURP43 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP51(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP51 = Byte.parseByte(s);
} else {
D_TRAINPURP51 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP52(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP52 = Byte.parseByte(s);
} else {
D_TRAINPURP52 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP53(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP53 = Byte.parseByte(s);
} else {
D_TRAINPURP53 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP61(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP61 = Byte.parseByte(s);
} else {
D_TRAINPURP61 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP62(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP62 = Byte.parseByte(s);
} else {
D_TRAINPURP62 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP63(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP63 = Byte.parseByte(s);
} else {
D_TRAINPURP63 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP71(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP71 = Byte.parseByte(s);
} else {
D_TRAINPURP71 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP72(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP72 = Byte.parseByte(s);
} else {
D_TRAINPURP72 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINPURP73(String s) {
if (!s.trim().isEmpty()) {
D_TRAINPURP73 = Byte.parseByte(s);
} else {
D_TRAINPURP73 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINQUAL1(String s) {
if (!s.trim().isEmpty()) {
D_TRAINQUAL1 = Byte.parseByte(s);
} else {
D_TRAINQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINQUAL2(String s) {
if (!s.trim().isEmpty()) {
D_TRAINQUAL2 = Byte.parseByte(s);
} else {
D_TRAINQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initD_TRAINQUAL3(String s) {
if (!s.trim().isEmpty()) {
D_TRAINQUAL3 = Byte.parseByte(s);
} else {
D_TRAINQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initD_TRBIKEFQ(String s) {
if (!s.trim().isEmpty()) {
D_TRBIKEFQ = Byte.parseByte(s);
} else {
D_TRBIKEFQ = Byte.MIN_VALUE;
}
}

protected final void initD_TRBUSFQ(String s) {
if (!s.trim().isEmpty()) {
D_TRBUSFQ = Byte.parseByte(s);
} else {
D_TRBUSFQ = Byte.MIN_VALUE;
}
}

protected final void initD_TRCARFQ(String s) {
if (!s.trim().isEmpty()) {
D_TRCARFQ = Byte.parseByte(s);
} else {
D_TRCARFQ = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL1(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL1 = Byte.parseByte(s);
} else {
D_TRQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL10(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL10 = Byte.parseByte(s);
} else {
D_TRQUAL10 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL11(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL11 = Byte.parseByte(s);
} else {
D_TRQUAL11 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL13(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL13 = Byte.parseByte(s);
} else {
D_TRQUAL13 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL15(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL15 = Byte.parseByte(s);
} else {
D_TRQUAL15 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL16(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL16 = Byte.parseByte(s);
} else {
D_TRQUAL16 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL17(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL17 = Byte.parseByte(s);
} else {
D_TRQUAL17 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL18(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL18 = Byte.parseByte(s);
} else {
D_TRQUAL18 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL19(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL19 = Byte.parseByte(s);
} else {
D_TRQUAL19 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL2(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL2 = Byte.parseByte(s);
} else {
D_TRQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL20(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL20 = Byte.parseByte(s);
} else {
D_TRQUAL20 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL21(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL21 = Byte.parseByte(s);
} else {
D_TRQUAL21 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL22(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL22 = Byte.parseByte(s);
} else {
D_TRQUAL22 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL23(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL23 = Byte.parseByte(s);
} else {
D_TRQUAL23 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL24(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL24 = Byte.parseByte(s);
} else {
D_TRQUAL24 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL25(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL25 = Byte.parseByte(s);
} else {
D_TRQUAL25 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL26(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL26 = Byte.parseByte(s);
} else {
D_TRQUAL26 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL27(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL27 = Byte.parseByte(s);
} else {
D_TRQUAL27 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL28(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL28 = Byte.parseByte(s);
} else {
D_TRQUAL28 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL29(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL29 = Byte.parseByte(s);
} else {
D_TRQUAL29 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL3(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL3 = Byte.parseByte(s);
} else {
D_TRQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL30(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL30 = Byte.parseByte(s);
} else {
D_TRQUAL30 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL31(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL31 = Byte.parseByte(s);
} else {
D_TRQUAL31 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL4(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL4 = Byte.parseByte(s);
} else {
D_TRQUAL4 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL5(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL5 = Byte.parseByte(s);
} else {
D_TRQUAL5 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL6(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL6 = Byte.parseByte(s);
} else {
D_TRQUAL6 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL7(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL7 = Byte.parseByte(s);
} else {
D_TRQUAL7 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL8(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL8 = Byte.parseByte(s);
} else {
D_TRQUAL8 = Byte.MIN_VALUE;
}
}

protected final void initD_TRQUAL9(String s) {
if (!s.trim().isEmpty()) {
D_TRQUAL9 = Byte.parseByte(s);
} else {
D_TRQUAL9 = Byte.MIN_VALUE;
}
}

protected final void initD_TRTRNFQ(String s) {
if (!s.trim().isEmpty()) {
D_TRTRNFQ = Byte.parseByte(s);
} else {
D_TRTRNFQ = Byte.MIN_VALUE;
}
}

protected final void initD_TRWHO1(String s) {
if (!s.trim().isEmpty()) {
D_TRWHO1 = Byte.parseByte(s);
} else {
D_TRWHO1 = Byte.MIN_VALUE;
}
}

protected final void initD_TRWHO2(String s) {
if (!s.trim().isEmpty()) {
D_TRWHO2 = Byte.parseByte(s);
} else {
D_TRWHO2 = Byte.MIN_VALUE;
}
}

protected final void initD_TRWHO3(String s) {
if (!s.trim().isEmpty()) {
D_TRWHO3 = Byte.parseByte(s);
} else {
D_TRWHO3 = Byte.MIN_VALUE;
}
}

protected final void initD_TSLP_30M(String s) {
if (!s.trim().isEmpty()) {
D_TSLP_30M = Byte.parseByte(s);
} else {
D_TSLP_30M = Byte.MIN_VALUE;
}
}

protected final void initD_TSLP_CGH(String s) {
if (!s.trim().isEmpty()) {
D_TSLP_CGH = Byte.parseByte(s);
} else {
D_TSLP_CGH = Byte.MIN_VALUE;
}
}

protected final void initD_TSLP_WAK(String s) {
if (!s.trim().isEmpty()) {
D_TSLP_WAK = Byte.parseByte(s);
} else {
D_TSLP_WAK = Byte.MIN_VALUE;
}
}

protected final void initD_TSTA_AWK(String s) {
if (!s.trim().isEmpty()) {
D_TSTA_AWK = Byte.parseByte(s);
} else {
D_TSTA_AWK = Byte.MIN_VALUE;
}
}

protected final void initD_TUIN1(String s) {
if (!s.trim().isEmpty()) {
D_TUIN1 = Byte.parseByte(s);
} else {
D_TUIN1 = Byte.MIN_VALUE;
}
}

protected final void initD_TUJBPL(String s) {
if (!s.trim().isEmpty()) {
D_TUJBPL = Byte.parseByte(s);
} else {
D_TUJBPL = Byte.MIN_VALUE;
}
}

protected final void initD_TWKCAR(String s) {
if (!s.trim().isEmpty()) {
D_TWKCAR = Byte.parseByte(s);
} else {
D_TWKCAR = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFF1(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFF1 = Byte.parseByte(s);
} else {
D_TWKDIFF1 = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFF2(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFF2 = Byte.parseByte(s);
} else {
D_TWKDIFF2 = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFF3(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFF3 = Byte.parseByte(s);
} else {
D_TWKDIFF3 = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFF4(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFF4 = Byte.parseByte(s);
} else {
D_TWKDIFF4 = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFF5(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFF5 = Byte.parseByte(s);
} else {
D_TWKDIFF5 = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFF6(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFF6 = Byte.parseByte(s);
} else {
D_TWKDIFF6 = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFF7(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFF7 = Byte.parseByte(s);
} else {
D_TWKDIFF7 = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFF8(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFF8 = Byte.parseByte(s);
} else {
D_TWKDIFF8 = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFF97(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFF97 = Byte.parseByte(s);
} else {
D_TWKDIFF97 = Byte.MIN_VALUE;
}
}

protected final void initD_TWKDIFFM(String s) {
if (!s.trim().isEmpty()) {
D_TWKDIFFM = Byte.parseByte(s);
} else {
D_TWKDIFFM = Byte.MIN_VALUE;
}
}

protected final void initD_UKBORN(String s) {
if (!s.trim().isEmpty()) {
D_UKBORN = Byte.parseByte(s);
} else {
D_UKBORN = Byte.MIN_VALUE;
}
}

protected final void initD_UNDQUS(String s) {
if (!s.trim().isEmpty()) {
D_UNDQUS = Byte.parseByte(s);
} else {
D_UNDQUS = Byte.MIN_VALUE;
}
}

protected final void initD_UNUSEXP(String s) {
if (!s.trim().isEmpty()) {
D_UNUSEXP = Byte.parseByte(s);
} else {
D_UNUSEXP = Byte.MIN_VALUE;
}
}

protected final void initD_UPSET(String s) {
if (!s.trim().isEmpty()) {
D_UPSET = Byte.parseByte(s);
} else {
D_UPSET = Byte.MIN_VALUE;
}
}

protected final void initD_URBAN_DV(String s) {
if (!s.trim().isEmpty()) {
D_URBAN_DV = Byte.parseByte(s);
} else {
D_URBAN_DV = Byte.MIN_VALUE;
}
}

protected final void initD_VOLFREQ(String s) {
if (!s.trim().isEmpty()) {
D_VOLFREQ = Byte.parseByte(s);
} else {
D_VOLFREQ = Byte.MIN_VALUE;
}
}

protected final void initD_VOLHRS(String s) {
if (!s.trim().isEmpty()) {
D_VOLHRS = Short.parseShort(s);
} else {
D_VOLHRS = Short.MIN_VALUE;
}
}

protected final void initD_VOLUN(String s) {
if (!s.trim().isEmpty()) {
D_VOLUN = Byte.parseByte(s);
} else {
D_VOLUN = Byte.MIN_VALUE;
}
}

protected final void initD_VOTE1(String s) {
if (!s.trim().isEmpty()) {
D_VOTE1 = Byte.parseByte(s);
} else {
D_VOTE1 = Byte.MIN_VALUE;
}
}

protected final void initD_VOTE2(String s) {
if (!s.trim().isEmpty()) {
D_VOTE2 = Byte.parseByte(s);
} else {
D_VOTE2 = Byte.MIN_VALUE;
}
}

protected final void initD_VOTE3(String s) {
if (!s.trim().isEmpty()) {
D_VOTE3 = Byte.parseByte(s);
} else {
D_VOTE3 = Byte.MIN_VALUE;
}
}

protected final void initD_VOTE4(String s) {
if (!s.trim().isEmpty()) {
D_VOTE4 = Byte.parseByte(s);
} else {
D_VOTE4 = Byte.MIN_VALUE;
}
}

protected final void initD_VOTE5(String s) {
if (!s.trim().isEmpty()) {
D_VOTE5 = Byte.parseByte(s);
} else {
D_VOTE5 = Byte.MIN_VALUE;
}
}

protected final void initD_VOTE6(String s) {
if (!s.trim().isEmpty()) {
D_VOTE6 = Byte.parseByte(s);
} else {
D_VOTE6 = Byte.MIN_VALUE;
}
}

protected final void initD_WHORUAGE(String s) {
if (!s.trim().isEmpty()) {
D_WHORUAGE = Byte.parseByte(s);
} else {
D_WHORUAGE = Byte.MIN_VALUE;
}
}

protected final void initD_WHORUEDU(String s) {
if (!s.trim().isEmpty()) {
D_WHORUEDU = Byte.parseByte(s);
} else {
D_WHORUEDU = Byte.MIN_VALUE;
}
}

protected final void initD_WHORUFAM(String s) {
if (!s.trim().isEmpty()) {
D_WHORUFAM = Byte.parseByte(s);
} else {
D_WHORUFAM = Byte.MIN_VALUE;
}
}

protected final void initD_WHORUPOL(String s) {
if (!s.trim().isEmpty()) {
D_WHORUPOL = Byte.parseByte(s);
} else {
D_WHORUPOL = Byte.MIN_VALUE;
}
}

protected final void initD_WHORUPRO(String s) {
if (!s.trim().isEmpty()) {
D_WHORUPRO = Byte.parseByte(s);
} else {
D_WHORUPRO = Byte.MIN_VALUE;
}
}

protected final void initD_WHORURAC(String s) {
if (!s.trim().isEmpty()) {
D_WHORURAC = Byte.parseByte(s);
} else {
D_WHORURAC = Byte.MIN_VALUE;
}
}

protected final void initD_WHORUSEX(String s) {
if (!s.trim().isEmpty()) {
D_WHORUSEX = Byte.parseByte(s);
} else {
D_WHORUSEX = Byte.MIN_VALUE;
}
}

protected final void initD_WKAUT1(String s) {
if (!s.trim().isEmpty()) {
D_WKAUT1 = Byte.parseByte(s);
} else {
D_WKAUT1 = Byte.MIN_VALUE;
}
}

protected final void initD_WKAUT2(String s) {
if (!s.trim().isEmpty()) {
D_WKAUT2 = Byte.parseByte(s);
} else {
D_WKAUT2 = Byte.MIN_VALUE;
}
}

protected final void initD_WKAUT3(String s) {
if (!s.trim().isEmpty()) {
D_WKAUT3 = Byte.parseByte(s);
} else {
D_WKAUT3 = Byte.MIN_VALUE;
}
}

protected final void initD_WKAUT4(String s) {
if (!s.trim().isEmpty()) {
D_WKAUT4 = Byte.parseByte(s);
} else {
D_WKAUT4 = Byte.MIN_VALUE;
}
}

protected final void initD_WKAUT5(String s) {
if (!s.trim().isEmpty()) {
D_WKAUT5 = Byte.parseByte(s);
} else {
D_WKAUT5 = Byte.MIN_VALUE;
}
}

protected final void initD_WKENDS(String s) {
if (!s.trim().isEmpty()) {
D_WKENDS = Byte.parseByte(s);
} else {
D_WKENDS = Byte.MIN_VALUE;
}
}

protected final void initD_WKPLSAM(String s) {
if (!s.trim().isEmpty()) {
D_WKPLSAM = Byte.parseByte(s);
} else {
D_WKPLSAM = Byte.MIN_VALUE;
}
}

protected final void initD_WKTIME(String s) {
if (!s.trim().isEmpty()) {
D_WKTIME = Byte.parseByte(s);
} else {
D_WKTIME = Byte.MIN_VALUE;
}
}

protected final void initD_WORKDIS(String s) {
if (!s.trim().isEmpty()) {
D_WORKDIS = Short.parseShort(s);
} else {
D_WORKDIS = Short.MIN_VALUE;
}
}

protected final void initD_WORKTRAV(String s) {
if (!s.trim().isEmpty()) {
D_WORKTRAV = Byte.parseByte(s);
} else {
D_WORKTRAV = Byte.MIN_VALUE;
}
}

protected final void initD_XPMOVE(String s) {
if (!s.trim().isEmpty()) {
D_XPMOVE = Byte.parseByte(s);
} else {
D_XPMOVE = Byte.MIN_VALUE;
}
}

protected final void initD_XPMVMNTH(String s) {
if (!s.trim().isEmpty()) {
D_XPMVMNTH = Byte.parseByte(s);
} else {
D_XPMVMNTH = Byte.MIN_VALUE;
}
}

protected final void initD_XPMVWHN(String s) {
if (!s.trim().isEmpty()) {
D_XPMVWHN = Byte.parseByte(s);
} else {
D_XPMVWHN = Byte.MIN_VALUE;
}
}

protected final void initD_XPMVWHR(String s) {
if (!s.trim().isEmpty()) {
D_XPMVWHR = Byte.parseByte(s);
} else {
D_XPMVWHR = Byte.MIN_VALUE;
}
}

protected final void initD_XPMVYR(String s) {
if (!s.trim().isEmpty()) {
D_XPMVYR = Short.parseShort(s);
} else {
D_XPMVYR = Short.MIN_VALUE;
}
}

protected final void initD_XTRA5MINOSM_DV(String s) {
if (!s.trim().isEmpty()) {
D_XTRA5MINOSM_DV = Byte.parseByte(s);
} else {
D_XTRA5MINOSM_DV = Byte.MIN_VALUE;
}
}

protected final void initD_XTRA5MIN_DV(String s) {
if (!s.trim().isEmpty()) {
D_XTRA5MIN_DV = Byte.parseByte(s);
} else {
D_XTRA5MIN_DV = Byte.MIN_VALUE;
}
}

protected final void initD_YAFUTA(String s) {
if (!s.trim().isEmpty()) {
D_YAFUTA = Byte.parseByte(s);
} else {
D_YAFUTA = Byte.MIN_VALUE;
}
}

protected final void initD_YAFUTB(String s) {
if (!s.trim().isEmpty()) {
D_YAFUTB = Byte.parseByte(s);
} else {
D_YAFUTB = Byte.MIN_VALUE;
}
}

protected final void initD_YAJBSRV1(String s) {
if (!s.trim().isEmpty()) {
D_YAJBSRV1 = Byte.parseByte(s);
} else {
D_YAJBSRV1 = Byte.MIN_VALUE;
}
}

protected final void initD_YAJBSRV2(String s) {
if (!s.trim().isEmpty()) {
D_YAJBSRV2 = Byte.parseByte(s);
} else {
D_YAJBSRV2 = Byte.MIN_VALUE;
}
}

protected final void initD_YAJBSRV3(String s) {
if (!s.trim().isEmpty()) {
D_YAJBSRV3 = Byte.parseByte(s);
} else {
D_YAJBSRV3 = Byte.MIN_VALUE;
}
}

protected final void initD_YAJBSRV4(String s) {
if (!s.trim().isEmpty()) {
D_YAJBSRV4 = Byte.parseByte(s);
} else {
D_YAJBSRV4 = Byte.MIN_VALUE;
}
}

protected final void initD_YAJBSRV5(String s) {
if (!s.trim().isEmpty()) {
D_YAJBSRV5 = Byte.parseByte(s);
} else {
D_YAJBSRV5 = Byte.MIN_VALUE;
}
}

protected final void initD_YAJBSRV7(String s) {
if (!s.trim().isEmpty()) {
D_YAJBSRV7 = Byte.parseByte(s);
} else {
D_YAJBSRV7 = Byte.MIN_VALUE;
}
}

protected final void initD_YAJBSRV8(String s) {
if (!s.trim().isEmpty()) {
D_YAJBSRV8 = Byte.parseByte(s);
} else {
D_YAJBSRV8 = Byte.MIN_VALUE;
}
}

protected final void initD_YAJBSRV96(String s) {
if (!s.trim().isEmpty()) {
D_YAJBSRV96 = Byte.parseByte(s);
} else {
D_YAJBSRV96 = Byte.MIN_VALUE;
}
}

protected final void initD_YANSSEC5_DV(String s) {
if (!s.trim().isEmpty()) {
D_YANSSEC5_DV = Byte.parseByte(s);
} else {
D_YANSSEC5_DV = Byte.MIN_VALUE;
}
}

protected final void initD_YASOC00_CC(String s) {
if (!s.trim().isEmpty()) {
D_YASOC00_CC = Short.parseShort(s);
} else {
D_YASOC00_CC = Short.MIN_VALUE;
}
}

protected final void initD_YASOC10_CC(String s) {
if (!s.trim().isEmpty()) {
D_YASOC10_CC = Short.parseShort(s);
} else {
D_YASOC10_CC = Short.MIN_VALUE;
}
}

protected final void initD_YASOC90_CC(String s) {
if (!s.trim().isEmpty()) {
D_YASOC90_CC = Byte.parseByte(s);
} else {
D_YASOC90_CC = Byte.MIN_VALUE;
}
}

protected final void initD_YNOTBIKE1(String s) {
if (!s.trim().isEmpty()) {
D_YNOTBIKE1 = Byte.parseByte(s);
} else {
D_YNOTBIKE1 = Byte.MIN_VALUE;
}
}

protected final void initD_YNOTBIKE2(String s) {
if (!s.trim().isEmpty()) {
D_YNOTBIKE2 = Byte.parseByte(s);
} else {
D_YNOTBIKE2 = Byte.MIN_VALUE;
}
}

protected final void initD_YNOTBIKE3(String s) {
if (!s.trim().isEmpty()) {
D_YNOTBIKE3 = Byte.parseByte(s);
} else {
D_YNOTBIKE3 = Byte.MIN_VALUE;
}
}

protected final void initD_YNOTBIKE96(String s) {
if (!s.trim().isEmpty()) {
D_YNOTBIKE96 = Byte.parseByte(s);
} else {
D_YNOTBIKE96 = Byte.MIN_VALUE;
}
}

protected final void initD_YPAMAR(String s) {
if (!s.trim().isEmpty()) {
D_YPAMAR = Byte.parseByte(s);
} else {
D_YPAMAR = Byte.MIN_VALUE;
}
}

protected final void initD_YPAPAR(String s) {
if (!s.trim().isEmpty()) {
D_YPAPAR = Byte.parseByte(s);
} else {
D_YPAPAR = Byte.MIN_VALUE;
}
}

protected final void initD_YPESTA(String s) {
if (!s.trim().isEmpty()) {
D_YPESTA = Byte.parseByte(s);
} else {
D_YPESTA = Byte.MIN_VALUE;
}
}

protected final void initD_YPESTB(String s) {
if (!s.trim().isEmpty()) {
D_YPESTB = Byte.parseByte(s);
} else {
D_YPESTB = Byte.MIN_VALUE;
}
}

protected final void initD_YPESTC(String s) {
if (!s.trim().isEmpty()) {
D_YPESTC = Byte.parseByte(s);
} else {
D_YPESTC = Byte.MIN_VALUE;
}
}

protected final void initD_YPESTE(String s) {
if (!s.trim().isEmpty()) {
D_YPESTE = Byte.parseByte(s);
} else {
D_YPESTE = Byte.MIN_VALUE;
}
}

protected final void initD_YPESTF(String s) {
if (!s.trim().isEmpty()) {
D_YPESTF = Byte.parseByte(s);
} else {
D_YPESTF = Byte.MIN_VALUE;
}
}

protected final void initD_YPESTI(String s) {
if (!s.trim().isEmpty()) {
D_YPESTI = Byte.parseByte(s);
} else {
D_YPESTI = Byte.MIN_VALUE;
}
}

protected final void initD_YPESTJ(String s) {
if (!s.trim().isEmpty()) {
D_YPESTJ = Byte.parseByte(s);
} else {
D_YPESTJ = Byte.MIN_VALUE;
}
}

protected final void initD_YPESTK(String s) {
if (!s.trim().isEmpty()) {
D_YPESTK = Byte.parseByte(s);
} else {
D_YPESTK = Byte.MIN_VALUE;
}
}

protected final void initD_YPNETCHT(String s) {
if (!s.trim().isEmpty()) {
D_YPNETCHT = Byte.parseByte(s);
} else {
D_YPNETCHT = Byte.MIN_VALUE;
}
}

protected final void initD_YPNPAL(String s) {
if (!s.trim().isEmpty()) {
D_YPNPAL = Byte.parseByte(s);
} else {
D_YPNPAL = Byte.MIN_VALUE;
}
}

protected final void initD_YPSOCWEB(String s) {
if (!s.trim().isEmpty()) {
D_YPSOCWEB = Byte.parseByte(s);
} else {
D_YPSOCWEB = Byte.MIN_VALUE;
}
}

protected final void initD_YR2UK4(String s) {
if (!s.trim().isEmpty()) {
D_YR2UK4 = Short.parseShort(s);
} else {
D_YR2UK4 = Short.MIN_VALUE;
}
}

public byte getD_ADCTS() {
return D_ADCTS;
}

public byte getD_ADOPTCH01() {
return D_ADOPTCH01;
}

public byte getD_ADOPTCH02() {
return D_ADOPTCH02;
}

public byte getD_ADOPTCH03() {
return D_ADOPTCH03;
}

public byte getD_ADOPTCH04() {
return D_ADOPTCH04;
}

public byte getD_ADOPTCH05() {
return D_ADOPTCH05;
}

public boolean getD_ADOPTCH06() {
return D_ADOPTCH06;
}

public boolean getD_ADOPTCH07() {
return D_ADOPTCH07;
}

public boolean getD_ADOPTCH08() {
return D_ADOPTCH08;
}

public boolean getD_ADOPTCH09() {
return D_ADOPTCH09;
}

public boolean getD_ADOPTCH10() {
return D_ADOPTCH10;
}

public boolean getD_ADOPTCH11() {
return D_ADOPTCH11;
}

public boolean getD_ADOPTCH12() {
return D_ADOPTCH12;
}

public boolean getD_ADOPTCH13() {
return D_ADOPTCH13;
}

public boolean getD_ADOPTCH14() {
return D_ADOPTCH14;
}

public boolean getD_ADOPTCH15() {
return D_ADOPTCH15;
}

public boolean getD_ADOPTCH16() {
return D_ADOPTCH16;
}

public byte getD_ADSTATUS() {
return D_ADSTATUS;
}

public byte getD_AEDROF1() {
return D_AEDROF1;
}

public byte getD_AEDROF2() {
return D_AEDROF2;
}

public boolean getD_AEDROF3() {
return D_AEDROF3;
}

public boolean getD_AEDROF4() {
return D_AEDROF4;
}

protected double D_AEPUDA1() {
return D_AEPUDA1;
}

public boolean getD_AEPUDA2() {
return D_AEPUDA2;
}

public boolean getD_AEPUDA3() {
return D_AEPUDA3;
}

public boolean getD_AEPUDA4() {
return D_AEPUDA4;
}

public byte getD_AEPUWK1() {
return D_AEPUWK1;
}

public boolean getD_AEPUWK2() {
return D_AEPUWK2;
}

public boolean getD_AEPUWK3() {
return D_AEPUWK3;
}

public boolean getD_AEPUWK4() {
return D_AEPUWK4;
}

public byte getD_AGEGR10_DV() {
return D_AGEGR10_DV;
}

public byte getD_AGEGR13_DV() {
return D_AGEGR13_DV;
}

public byte getD_AGEGR5_DV() {
return D_AGEGR5_DV;
}

public byte getD_AGERET() {
return D_AGERET;
}

public byte getD_AGE_DV() {
return D_AGE_DV;
}

public byte getD_AHVWELL() {
return D_AHVWELL;
}

public byte getD_AIDEFT() {
return D_AIDEFT;
}

public byte getD_AIDHH() {
return D_AIDHH;
}

public byte getD_AIDHRS() {
return D_AIDHRS;
}

public byte getD_AIDHU1() {
return D_AIDHU1;
}

public byte getD_AIDHU2() {
return D_AIDHU2;
}

public byte getD_AIDHUA1() {
return D_AIDHUA1;
}

public byte getD_AIDHUA10() {
return D_AIDHUA10;
}

public byte getD_AIDHUA11() {
return D_AIDHUA11;
}

public byte getD_AIDHUA12() {
return D_AIDHUA12;
}

public byte getD_AIDHUA13() {
return D_AIDHUA13;
}

public byte getD_AIDHUA14() {
return D_AIDHUA14;
}

public byte getD_AIDHUA15() {
return D_AIDHUA15;
}

public byte getD_AIDHUA16() {
return D_AIDHUA16;
}

public byte getD_AIDHUA2() {
return D_AIDHUA2;
}

public byte getD_AIDHUA3() {
return D_AIDHUA3;
}

public byte getD_AIDHUA4() {
return D_AIDHUA4;
}

public byte getD_AIDHUA5() {
return D_AIDHUA5;
}

public byte getD_AIDHUA6() {
return D_AIDHUA6;
}

public byte getD_AIDHUA7() {
return D_AIDHUA7;
}

public byte getD_AIDHUA8() {
return D_AIDHUA8;
}

public byte getD_AIDHUA9() {
return D_AIDHUA9;
}

public byte getD_AIDXHH() {
return D_AIDXHH;
}

public byte getD_ALLCH01() {
return D_ALLCH01;
}

public byte getD_ALLCH02() {
return D_ALLCH02;
}

public byte getD_ALLCH03() {
return D_ALLCH03;
}

public byte getD_ALLCH04() {
return D_ALLCH04;
}

public byte getD_ALLCH05() {
return D_ALLCH05;
}

public byte getD_ALLCH06() {
return D_ALLCH06;
}

public byte getD_ALLCH07() {
return D_ALLCH07;
}

public boolean getD_ALLCH08() {
return D_ALLCH08;
}

public boolean getD_ALLCH09() {
return D_ALLCH09;
}

public boolean getD_ALLCH10() {
return D_ALLCH10;
}

public boolean getD_ALLCH11() {
return D_ALLCH11;
}

public boolean getD_ALLCH12() {
return D_ALLCH12;
}

public boolean getD_ALLCH13() {
return D_ALLCH13;
}

public boolean getD_ALLCH14() {
return D_ALLCH14;
}

public boolean getD_ALLCH15() {
return D_ALLCH15;
}

public boolean getD_ALLCH16() {
return D_ALLCH16;
}

public byte getD_AREA() {
return D_AREA;
}

public byte getD_BASNSA() {
return D_BASNSA;
}

protected double D_BASRATE() {
return D_BASRATE;
}

public byte getD_BASREST() {
return D_BASREST;
}

public byte getD_BENCB() {
return D_BENCB;
}

public byte getD_BENCTC() {
return D_BENCTC;
}

public byte getD_BENDIS1() {
return D_BENDIS1;
}

public byte getD_BENDIS10() {
return D_BENDIS10;
}

public byte getD_BENDIS11() {
return D_BENDIS11;
}

public byte getD_BENDIS12() {
return D_BENDIS12;
}

public byte getD_BENDIS13() {
return D_BENDIS13;
}

public byte getD_BENDIS14() {
return D_BENDIS14;
}

public byte getD_BENDIS15() {
return D_BENDIS15;
}

public byte getD_BENDIS16() {
return D_BENDIS16;
}

public byte getD_BENDIS2() {
return D_BENDIS2;
}

public byte getD_BENDIS3() {
return D_BENDIS3;
}

public byte getD_BENDIS4() {
return D_BENDIS4;
}

public byte getD_BENDIS5() {
return D_BENDIS5;
}

public byte getD_BENDIS6() {
return D_BENDIS6;
}

public byte getD_BENDIS7() {
return D_BENDIS7;
}

public byte getD_BENDIS8() {
return D_BENDIS8;
}

public byte getD_BENDIS9() {
return D_BENDIS9;
}

public byte getD_BENDIS96() {
return D_BENDIS96;
}

public byte getD_BENDIS97() {
return D_BENDIS97;
}

public byte getD_BENFAM1() {
return D_BENFAM1;
}

public byte getD_BENFAM10() {
return D_BENFAM10;
}

public byte getD_BENFAM2() {
return D_BENFAM2;
}

public byte getD_BENFAM3() {
return D_BENFAM3;
}

public byte getD_BENFAM4() {
return D_BENFAM4;
}

public byte getD_BENFAM5() {
return D_BENFAM5;
}

public byte getD_BENFAM6() {
return D_BENFAM6;
}

public byte getD_BENFAM7() {
return D_BENFAM7;
}

public byte getD_BENFAM8() {
return D_BENFAM8;
}

public byte getD_BENFAM9() {
return D_BENFAM9;
}

public byte getD_BENFAM96() {
return D_BENFAM96;
}

public byte getD_BENHOU1() {
return D_BENHOU1;
}

public byte getD_BENHOU2() {
return D_BENHOU2;
}

public byte getD_BENHOU3() {
return D_BENHOU3;
}

public byte getD_BENHOU4() {
return D_BENHOU4;
}

public byte getD_BENHOU5() {
return D_BENHOU5;
}

public byte getD_BENHOU6() {
return D_BENHOU6;
}

public byte getD_BENHOU7() {
return D_BENHOU7;
}

public byte getD_BENHOU8() {
return D_BENHOU8;
}

public byte getD_BENHOU9() {
return D_BENHOU9;
}

public byte getD_BENHOU96() {
return D_BENHOU96;
}

public byte getD_BENLINK() {
return D_BENLINK;
}

public byte getD_BENPEN1() {
return D_BENPEN1;
}

public byte getD_BENPEN10() {
return D_BENPEN10;
}

public byte getD_BENPEN11() {
return D_BENPEN11;
}

public byte getD_BENPEN12() {
return D_BENPEN12;
}

public byte getD_BENPEN13() {
return D_BENPEN13;
}

public byte getD_BENPEN2() {
return D_BENPEN2;
}

public byte getD_BENPEN3() {
return D_BENPEN3;
}

public byte getD_BENPEN4() {
return D_BENPEN4;
}

public byte getD_BENPEN5() {
return D_BENPEN5;
}

public byte getD_BENPEN6() {
return D_BENPEN6;
}

public byte getD_BENPEN7() {
return D_BENPEN7;
}

public byte getD_BENPEN8() {
return D_BENPEN8;
}

public byte getD_BENPEN9() {
return D_BENPEN9;
}

public byte getD_BENPEN96() {
return D_BENPEN96;
}

public byte getD_BENSTA1() {
return D_BENSTA1;
}

public byte getD_BENSTA10() {
return D_BENSTA10;
}

public byte getD_BENSTA11() {
return D_BENSTA11;
}

public byte getD_BENSTA12() {
return D_BENSTA12;
}

public byte getD_BENSTA13() {
return D_BENSTA13;
}

public byte getD_BENSTA2() {
return D_BENSTA2;
}

public byte getD_BENSTA3() {
return D_BENSTA3;
}

public byte getD_BENSTA4() {
return D_BENSTA4;
}

public byte getD_BENSTA5() {
return D_BENSTA5;
}

public byte getD_BENSTA6() {
return D_BENSTA6;
}

public byte getD_BENSTA7() {
return D_BENSTA7;
}

public byte getD_BENSTA9() {
return D_BENSTA9;
}

public byte getD_BENSTA96() {
return D_BENSTA96;
}

public byte getD_BENSTA97() {
return D_BENSTA97;
}

public byte getD_BENTAX1() {
return D_BENTAX1;
}

public byte getD_BENTAX10() {
return D_BENTAX10;
}

public byte getD_BENTAX2() {
return D_BENTAX2;
}

public byte getD_BENTAX3() {
return D_BENTAX3;
}

public byte getD_BENTAX4() {
return D_BENTAX4;
}

public byte getD_BENTAX5() {
return D_BENTAX5;
}

public byte getD_BENTAX6() {
return D_BENTAX6;
}

public byte getD_BENTAX7() {
return D_BENTAX7;
}

public byte getD_BENTAX8() {
return D_BENTAX8;
}

public byte getD_BENTAX9() {
return D_BENTAX9;
}

public byte getD_BENTAX96() {
return D_BENTAX96;
}

public byte getD_BENUNEMP1() {
return D_BENUNEMP1;
}

public byte getD_BENUNEMP2() {
return D_BENUNEMP2;
}

public byte getD_BENUNEMP3() {
return D_BENUNEMP3;
}

public byte getD_BENUNEMP4() {
return D_BENUNEMP4;
}

public byte getD_BENUNEMP5() {
return D_BENUNEMP5;
}

public byte getD_BENUNEMP6() {
return D_BENUNEMP6;
}

public byte getD_BENUNEMP7() {
return D_BENUNEMP7;
}

public byte getD_BENUNEMP96() {
return D_BENUNEMP96;
}

public short getD_BIRTHY() {
return D_BIRTHY;
}

public byte getD_BRLOOP() {
return D_BRLOOP;
}

public byte getD_BTYPE1() {
return D_BTYPE1;
}

public byte getD_BTYPE10() {
return D_BTYPE10;
}

public byte getD_BTYPE11() {
return D_BTYPE11;
}

public byte getD_BTYPE12() {
return D_BTYPE12;
}

public byte getD_BTYPE13() {
return D_BTYPE13;
}

public byte getD_BTYPE14() {
return D_BTYPE14;
}

public byte getD_BTYPE2() {
return D_BTYPE2;
}

public byte getD_BTYPE3() {
return D_BTYPE3;
}

public byte getD_BTYPE4() {
return D_BTYPE4;
}

public byte getD_BTYPE5() {
return D_BTYPE5;
}

public byte getD_BTYPE6() {
return D_BTYPE6;
}

public byte getD_BTYPE7() {
return D_BTYPE7;
}

public byte getD_BTYPE8() {
return D_BTYPE8;
}

public byte getD_BTYPE9() {
return D_BTYPE9;
}

public byte getD_BTYPE96() {
return D_BTYPE96;
}

public byte getD_BUNO_DV() {
return D_BUNO_DV;
}

public byte getD_CARBUY1() {
return D_CARBUY1;
}

public byte getD_CARBUY10() {
return D_CARBUY10;
}

public byte getD_CARBUY11() {
return D_CARBUY11;
}

public byte getD_CARBUY12() {
return D_CARBUY12;
}

public byte getD_CARBUY2() {
return D_CARBUY2;
}

public byte getD_CARBUY3() {
return D_CARBUY3;
}

public byte getD_CARBUY4() {
return D_CARBUY4;
}

public byte getD_CARBUY5() {
return D_CARBUY5;
}

public byte getD_CARBUY6() {
return D_CARBUY6;
}

public byte getD_CARBUY7() {
return D_CARBUY7;
}

public byte getD_CARBUY8() {
return D_CARBUY8;
}

public byte getD_CARBUY9() {
return D_CARBUY9;
}

public byte getD_CARBUY97() {
return D_CARBUY97;
}

public int getD_CARMILES() {
return D_CARMILES;
}

public byte getD_CARSRV1() {
return D_CARSRV1;
}

public byte getD_CARSRV2() {
return D_CARSRV2;
}

public byte getD_CARSRV3() {
return D_CARSRV3;
}

public byte getD_CARUSE() {
return D_CARUSE;
}

public byte getD_CASIEND() {
return D_CASIEND;
}

public int getD_CCAMTJT() {
return D_CCAMTJT;
}

public int getD_CCAMTSOLE() {
return D_CCAMTSOLE;
}

public byte getD_CCARE() {
return D_CCARE;
}

public byte getD_CCBILLJT() {
return D_CCBILLJT;
}

public byte getD_CCBILLSOLE() {
return D_CCBILLSOLE;
}

public byte getD_CCJT() {
return D_CCJT;
}

public byte getD_CCJTP0() {
return D_CCJTP0;
}

public byte getD_CCJTP1() {
return D_CCJTP1;
}

public byte getD_CCJTP10() {
return D_CCJTP10;
}

public byte getD_CCJTP11() {
return D_CCJTP11;
}

public byte getD_CCJTP12() {
return D_CCJTP12;
}

public byte getD_CCJTP13() {
return D_CCJTP13;
}

public byte getD_CCJTP14() {
return D_CCJTP14;
}

public byte getD_CCJTP15() {
return D_CCJTP15;
}

public byte getD_CCJTP16() {
return D_CCJTP16;
}

public byte getD_CCJTP2() {
return D_CCJTP2;
}

public byte getD_CCJTP3() {
return D_CCJTP3;
}

public byte getD_CCJTP4() {
return D_CCJTP4;
}

public byte getD_CCJTP5() {
return D_CCJTP5;
}

public byte getD_CCJTP6() {
return D_CCJTP6;
}

public byte getD_CCJTP7() {
return D_CCJTP7;
}

public byte getD_CCJTP8() {
return D_CCJTP8;
}

public byte getD_CCJTP9() {
return D_CCJTP9;
}

public byte getD_CCSOLE() {
return D_CCSOLE;
}

public byte getD_CCWORK() {
return D_CCWORK;
}

public short getD_CH1BY4() {
return D_CH1BY4;
}

public short getD_CHARAM() {
return D_CHARAM;
}

public byte getD_CHARFREQ() {
return D_CHARFREQ;
}

public byte getD_CHARGV() {
return D_CHARGV;
}

public byte getD_CHBRFED01() {
return D_CHBRFED01;
}

public byte getD_CHBRFED02() {
return D_CHBRFED02;
}

public boolean getD_CHBRFED03() {
return D_CHBRFED03;
}

public boolean getD_CHBRFED04() {
return D_CHBRFED04;
}

public boolean getD_CHBRFED05() {
return D_CHBRFED05;
}

public boolean getD_CHBRFED06() {
return D_CHBRFED06;
}

public boolean getD_CHBRFED07() {
return D_CHBRFED07;
}

public boolean getD_CHBRFED08() {
return D_CHBRFED08;
}

public boolean getD_CHBRFED09() {
return D_CHBRFED09;
}

public boolean getD_CHBRFED10() {
return D_CHBRFED10;
}

public boolean getD_CHBRFED11() {
return D_CHBRFED11;
}

public boolean getD_CHBRFED12() {
return D_CHBRFED12;
}

public boolean getD_CHBRFED13() {
return D_CHBRFED13;
}

public boolean getD_CHBRFED14() {
return D_CHBRFED14;
}

public boolean getD_CHBRFED15() {
return D_CHBRFED15;
}

public boolean getD_CHBRFED16() {
return D_CHBRFED16;
}

public byte getD_CHILDPNO() {
return D_CHILDPNO;
}

public byte getD_CHKRESP() {
return D_CHKRESP;
}

public int getD_CINDTIME() {
return D_CINDTIME;
}

public byte getD_CITZN1() {
return D_CITZN1;
}

public byte getD_CITZN2() {
return D_CITZN2;
}

public byte getD_CITZN3() {
return D_CITZN3;
}

public byte getD_CJBATT() {
return D_CJBATT;
}

public byte getD_CJOB() {
return D_CJOB;
}

public byte getD_CMLSTAT1() {
return D_CMLSTAT1;
}

public byte getD_CMLSTAT2() {
return D_CMLSTAT2;
}

public byte getD_CMLSTAT3() {
return D_CMLSTAT3;
}

public byte getD_COH1BM() {
return D_COH1BM;
}

public short getD_COH1BY() {
return D_COH1BY;
}

public byte getD_COH1EM() {
return D_COH1EM;
}

public short getD_COH1EY() {
return D_COH1EY;
}

public byte getD_COH1MR() {
return D_COH1MR;
}

public byte getD_COHAB() {
return D_COHAB;
}

public byte getD_COHABN() {
return D_COHABN;
}

public boolean getD_COHAB_DV() {
return D_COHAB_DV;
}

public byte getD_CONTFT() {
return D_CONTFT;
}

public byte getD_COUNTRY() {
return D_COUNTRY;
}

public int getD_CREDAMT() {
return D_CREDAMT;
}

public byte getD_CREDITOR() {
return D_CREDITOR;
}

public int getD_CREDJT() {
return D_CREDJT;
}

public int getD_CREDSOLE() {
return D_CREDSOLE;
}

public byte getD_CSTAT() {
return D_CSTAT;
}

public byte getD_CTADD1_CODE() {
return D_CTADD1_CODE;
}

public byte getD_CTADD2_CODE() {
return D_CTADD2_CODE;
}

public byte getD_CTCNTY_CODE() {
return D_CTCNTY_CODE;
}

public byte getD_CTCONS() {
return D_CTCONS;
}

public byte getD_CTCONSCONF1() {
return D_CTCONSCONF1;
}

public byte getD_CTCONSCONF2() {
return D_CTCONSCONF2;
}

public byte getD_CTCONSCONF3() {
return D_CTCONSCONF3;
}

public byte getD_CTCONSCONF4() {
return D_CTCONSCONF4;
}

public byte getD_CTCONSCONF5() {
return D_CTCONSCONF5;
}

public byte getD_CTCONSCONF6() {
return D_CTCONSCONF6;
}

public byte getD_CTCONSCONF7() {
return D_CTCONSCONF7;
}

public byte getD_CTCONSCONF8() {
return D_CTCONSCONF8;
}

public byte getD_CTCONSCONF94() {
return D_CTCONSCONF94;
}

public byte getD_CTEMAIL_CODE() {
return D_CTEMAIL_CODE;
}

public byte getD_CTPCODE_CODE() {
return D_CTPCODE_CODE;
}

public byte getD_CTREL() {
return D_CTREL;
}

public byte getD_CTTEL1_CODE() {
return D_CTTEL1_CODE;
}

public byte getD_CTTEL2_CODE() {
return D_CTTEL2_CODE;
}

public byte getD_CTTOWN_CODE() {
return D_CTTOWN_CODE;
}

public byte getD_CURRJOB1() {
return D_CURRJOB1;
}

public byte getD_CURRJOB2() {
return D_CURRJOB2;
}

public byte getD_CURRJOB3() {
return D_CURRJOB3;
}

public byte getD_CURRJOB4() {
return D_CURRJOB4;
}

public byte getD_CURRJOB5() {
return D_CURRJOB5;
}

public byte getD_CURRJOB6() {
return D_CURRJOB6;
}

public byte getD_CURRPART1() {
return D_CURRPART1;
}

public byte getD_CURRPART2() {
return D_CURRPART2;
}

public byte getD_CURRSTAT1() {
return D_CURRSTAT1;
}

public byte getD_CURRSTAT2() {
return D_CURRSTAT2;
}

public byte getD_CURRSTAT3() {
return D_CURRSTAT3;
}

public byte getD_CURRSTAT4() {
return D_CURRSTAT4;
}

public byte getD_CURRSTAT5() {
return D_CURRSTAT5;
}

public byte getD_CURRSTAT6() {
return D_CURRSTAT6;
}

public byte getD_CURRYNOT1() {
return D_CURRYNOT1;
}

public byte getD_CURRYNOT2() {
return D_CURRYNOT2;
}

public byte getD_CURRYNOT3() {
return D_CURRYNOT3;
}

public byte getD_CURRYNOT4() {
return D_CURRYNOT4;
}

public byte getD_CURRYNOT5() {
return D_CURRYNOT5;
}

public byte getD_CURRYNOT6() {
return D_CURRYNOT6;
}

public byte getD_CURRYNOT7() {
return D_CURRYNOT7;
}

public byte getD_CURRYNOT8() {
return D_CURRYNOT8;
}

public byte getD_CURRYNOT96() {
return D_CURRYNOT96;
}

public byte getD_CURRYNOT97() {
return D_CURRYNOT97;
}

public byte getD_DEBT1() {
return D_DEBT1;
}

public byte getD_DEBT2() {
return D_DEBT2;
}

public byte getD_DEBT4() {
return D_DEBT4;
}

public byte getD_DEBT5() {
return D_DEBT5;
}

public byte getD_DEBT6() {
return D_DEBT6;
}

public byte getD_DEBT7() {
return D_DEBT7;
}

public byte getD_DEBT8() {
return D_DEBT8;
}

public byte getD_DEBT96() {
return D_DEBT96;
}

public byte getD_DEBT97() {
return D_DEBT97;
}

public byte getD_DEBTC1() {
return D_DEBTC1;
}

public byte getD_DEBTC2() {
return D_DEBTC2;
}

public byte getD_DEBTC3() {
return D_DEBTC3;
}

public byte getD_DEBTC4() {
return D_DEBTC4;
}

public byte getD_DEBTC5() {
return D_DEBTC5;
}

public byte getD_DEBTINFO1() {
return D_DEBTINFO1;
}

public byte getD_DEBTINFO10() {
return D_DEBTINFO10;
}

public byte getD_DEBTINFO11() {
return D_DEBTINFO11;
}

public byte getD_DEBTINFO2() {
return D_DEBTINFO2;
}

public byte getD_DEBTINFO3() {
return D_DEBTINFO3;
}

public byte getD_DEBTINFO4() {
return D_DEBTINFO4;
}

public byte getD_DEBTINFO5() {
return D_DEBTINFO5;
}

public byte getD_DEBTINFO6() {
return D_DEBTINFO6;
}

public byte getD_DEBTINFO7() {
return D_DEBTINFO7;
}

public byte getD_DEBTINFO8() {
return D_DEBTINFO8;
}

public byte getD_DEBTINFO9() {
return D_DEBTINFO9;
}

public byte getD_DEBTINFO97() {
return D_DEBTINFO97;
}

public byte getD_DEBTOTH1() {
return D_DEBTOTH1;
}

public byte getD_DEBTOTH2() {
return D_DEBTOTH2;
}

public byte getD_DEBTOTH3() {
return D_DEBTOTH3;
}

public byte getD_DEBTOTH4() {
return D_DEBTOTH4;
}

public byte getD_DEBTOTH96() {
return D_DEBTOTH96;
}

public byte getD_DEBTPN0() {
return D_DEBTPN0;
}

public byte getD_DEBTPN1() {
return D_DEBTPN1;
}

public byte getD_DEBTPN10() {
return D_DEBTPN10;
}

public byte getD_DEBTPN11() {
return D_DEBTPN11;
}

public byte getD_DEBTPN12() {
return D_DEBTPN12;
}

public byte getD_DEBTPN13() {
return D_DEBTPN13;
}

public byte getD_DEBTPN14() {
return D_DEBTPN14;
}

public byte getD_DEBTPN15() {
return D_DEBTPN15;
}

public byte getD_DEBTPN16() {
return D_DEBTPN16;
}

public byte getD_DEBTPN2() {
return D_DEBTPN2;
}

public byte getD_DEBTPN3() {
return D_DEBTPN3;
}

public byte getD_DEBTPN4() {
return D_DEBTPN4;
}

public byte getD_DEBTPN5() {
return D_DEBTPN5;
}

public byte getD_DEBTPN6() {
return D_DEBTPN6;
}

public byte getD_DEBTPN7() {
return D_DEBTPN7;
}

public byte getD_DEBTPN8() {
return D_DEBTPN8;
}

public byte getD_DEBTPN9() {
return D_DEBTPN9;
}

public byte getD_DEBTSJ() {
return D_DEBTSJ;
}

public int getD_DEBTSK() {
return D_DEBTSK;
}

public byte getD_DEBTWHO1() {
return D_DEBTWHO1;
}

public byte getD_DEBTWHO2() {
return D_DEBTWHO2;
}

public byte getD_DEBTWHO3() {
return D_DEBTWHO3;
}

public byte getD_DEBTWHO4() {
return D_DEBTWHO4;
}

public byte getD_DEBTWHO97() {
return D_DEBTWHO97;
}

public int getD_DEBTY() {
return D_DEBTY;
}

public boolean getD_DEPCHL_DV() {
return D_DEPCHL_DV;
}

public byte getD_DEPENTH1() {
return D_DEPENTH1;
}

public byte getD_DEPENTH2() {
return D_DEPENTH2;
}

public byte getD_DEPENTH3() {
return D_DEPENTH3;
}

public byte getD_DEPENTH4() {
return D_DEPENTH4;
}

public byte getD_DEPENTH5() {
return D_DEPENTH5;
}

public byte getD_DEPENTH6() {
return D_DEPENTH6;
}

public byte getD_DETINC1() {
return D_DETINC1;
}

public byte getD_DETINC2() {
return D_DETINC2;
}

public byte getD_DETINC3() {
return D_DETINC3;
}

public byte getD_DETINC4() {
return D_DETINC4;
}

public byte getD_DETINC5() {
return D_DETINC5;
}

public byte getD_DETINC6() {
return D_DETINC6;
}

public byte getD_DISDIF1() {
return D_DISDIF1;
}

public byte getD_DISDIF10() {
return D_DISDIF10;
}

public byte getD_DISDIF11() {
return D_DISDIF11;
}

public byte getD_DISDIF12() {
return D_DISDIF12;
}

public byte getD_DISDIF2() {
return D_DISDIF2;
}

public byte getD_DISDIF3() {
return D_DISDIF3;
}

public byte getD_DISDIF4() {
return D_DISDIF4;
}

public byte getD_DISDIF5() {
return D_DISDIF5;
}

public byte getD_DISDIF6() {
return D_DISDIF6;
}

public byte getD_DISDIF7() {
return D_DISDIF7;
}

public byte getD_DISDIF8() {
return D_DISDIF8;
}

public byte getD_DISDIF9() {
return D_DISDIF9;
}

public byte getD_DISDIF96() {
return D_DISDIF96;
}

public byte getD_DIVCHK1() {
return D_DIVCHK1;
}

public byte getD_DIVCHK2() {
return D_DIVCHK2;
}

public byte getD_DIVCHK3() {
return D_DIVCHK3;
}

public byte getD_DIVFIN1() {
return D_DIVFIN1;
}

public boolean getD_DIVFIN2() {
return D_DIVFIN2;
}

public boolean getD_DIVFIN3() {
return D_DIVFIN3;
}

public byte getD_DKLM() {
return D_DKLM;
}

public short getD_DOBY_DV() {
return D_DOBY_DV;
}

public byte getD_DONEPROXY() {
return D_DONEPROXY;
}

public byte getD_DRGMJ() {
return D_DRGMJ;
}

public byte getD_DRGOTH() {
return D_DRGOTH;
}

public byte getD_DRGSOL() {
return D_DRGSOL;
}

public byte getD_DRIVE() {
return D_DRIVE;
}

public byte getD_DRNK4W() {
return D_DRNK4W;
}

public byte getD_DVAGE() {
return D_DVAGE;
}

public byte getD_DVM1() {
return D_DVM1;
}

public boolean getD_DVM2() {
return D_DVM2;
}

public boolean getD_DVM3() {
return D_DVM3;
}

public short getD_DVY41() {
return D_DVY41;
}

public boolean getD_DVY42() {
return D_DVY42;
}

public boolean getD_DVY43() {
return D_DVY43;
}

public byte getD_EATLIVU() {
return D_EATLIVU;
}

public byte getD_EDASP() {
return D_EDASP;
}

public byte getD_EDLINK() {
return D_EDLINK;
}

public byte getD_EDLINKCONF() {
return D_EDLINKCONF;
}

public byte getD_EDLINKCONFB() {
return D_EDLINKCONFB;
}

public byte getD_EDLINKKIDE() {
return D_EDLINKKIDE;
}

public byte getD_EDLINKKIDSWN() {
return D_EDLINKKIDSWN;
}

public byte getD_EDTYPE() {
return D_EDTYPE;
}

public byte getD_EDUCATION() {
return D_EDUCATION;
}

public byte getD_EDUCISGN() {
return D_EDUCISGN;
}

public byte getD_EDUCLINKB1() {
return D_EDUCLINKB1;
}

public byte getD_EDUCLINKB2() {
return D_EDUCLINKB2;
}

public byte getD_EDUCLINKB3() {
return D_EDUCLINKB3;
}

public byte getD_EDUCRECD() {
return D_EDUCRECD;
}

public byte getD_EDUCRSGN() {
return D_EDUCRSGN;
}

public byte getD_EDUCSN() {
return D_EDUCSN;
}

public byte getD_EMPCHK() {
return D_EMPCHK;
}

public byte getD_EMPLOY() {
return D_EMPLOY;
}

public byte getD_EMPSTENDD() {
return D_EMPSTENDD;
}

public byte getD_EMPSTENDM() {
return D_EMPSTENDM;
}

public short getD_EMPSTENDY4() {
return D_EMPSTENDY4;
}

public byte getD_ENDMNTH1() {
return D_ENDMNTH1;
}

public byte getD_ENDMNTH2() {
return D_ENDMNTH2;
}

public byte getD_ENDMNTH3() {
return D_ENDMNTH3;
}

public boolean getD_ENDMNTH4() {
return D_ENDMNTH4;
}

public byte getD_ENVHABIT1() {
return D_ENVHABIT1;
}

public byte getD_ENVHABIT10() {
return D_ENVHABIT10;
}

public byte getD_ENVHABIT11() {
return D_ENVHABIT11;
}

public byte getD_ENVHABIT2() {
return D_ENVHABIT2;
}

public byte getD_ENVHABIT3() {
return D_ENVHABIT3;
}

public byte getD_ENVHABIT4() {
return D_ENVHABIT4;
}

public byte getD_ENVHABIT5() {
return D_ENVHABIT5;
}

public byte getD_ENVHABIT6() {
return D_ENVHABIT6;
}

public byte getD_ENVHABIT7() {
return D_ENVHABIT7;
}

public byte getD_ENVHABIT8() {
return D_ENVHABIT8;
}

public byte getD_ENVHABIT9() {
return D_ENVHABIT9;
}

public byte getD_EPROSH() {
return D_EPROSH;
}

public byte getD_ETHN_DV() {
return D_ETHN_DV;
}

public byte getD_EVRALC() {
return D_EVRALC;
}

public byte getD_EVRSMO() {
return D_EVRSMO;
}

public byte getD_EXPMANAGE1() {
return D_EXPMANAGE1;
}

public byte getD_EXPMANAGE10() {
return D_EXPMANAGE10;
}

public byte getD_EXPMANAGE11() {
return D_EXPMANAGE11;
}

public byte getD_EXPMANAGE2() {
return D_EXPMANAGE2;
}

public byte getD_EXPMANAGE3() {
return D_EXPMANAGE3;
}

public byte getD_EXPMANAGE4() {
return D_EXPMANAGE4;
}

public byte getD_EXPMANAGE5() {
return D_EXPMANAGE5;
}

public byte getD_EXPMANAGE6() {
return D_EXPMANAGE6;
}

public byte getD_EXPMANAGE7() {
return D_EXPMANAGE7;
}

public byte getD_EXPMANAGE8() {
return D_EXPMANAGE8;
}

public byte getD_EXPMANAGE9() {
return D_EXPMANAGE9;
}

public byte getD_EXPMANAGE97() {
return D_EXPMANAGE97;
}

public byte getD_EXTNSA() {
return D_EXTNSA;
}

protected double D_EXTRATE() {
return D_EXTRATE;
}

public byte getD_EXTREST() {
return D_EXTREST;
}

public byte getD_FAMILY() {
return D_FAMILY;
}

public byte getD_FAMSUP() {
return D_FAMSUP;
}

public byte getD_FATHER() {
return D_FATHER;
}

public byte getD_FEEND() {
return D_FEEND;
}

public byte getD_FENOW() {
return D_FENOW;
}

public byte getD_FFBRFEDLW() {
return D_FFBRFEDLW;
}

public byte getD_FF_BENTYPE01() {
return D_FF_BENTYPE01;
}

public byte getD_FF_BENTYPE02() {
return D_FF_BENTYPE02;
}

public byte getD_FF_BENTYPE03() {
return D_FF_BENTYPE03;
}

public byte getD_FF_BENTYPE04() {
return D_FF_BENTYPE04;
}

public byte getD_FF_BENTYPE05() {
return D_FF_BENTYPE05;
}

public byte getD_FF_BENTYPE06() {
return D_FF_BENTYPE06;
}

public byte getD_FF_BENTYPE07() {
return D_FF_BENTYPE07;
}

public byte getD_FF_BENTYPE08() {
return D_FF_BENTYPE08;
}

public byte getD_FF_BENTYPE09() {
return D_FF_BENTYPE09;
}

public byte getD_FF_BENTYPE10() {
return D_FF_BENTYPE10;
}

public byte getD_FF_BENTYPE11() {
return D_FF_BENTYPE11;
}

public byte getD_FF_BENTYPE12() {
return D_FF_BENTYPE12;
}

public byte getD_FF_BENTYPE13() {
return D_FF_BENTYPE13;
}

public byte getD_FF_BENTYPE14() {
return D_FF_BENTYPE14;
}

public byte getD_FF_BENTYPE15() {
return D_FF_BENTYPE15;
}

public byte getD_FF_BENTYPE16() {
return D_FF_BENTYPE16;
}

public byte getD_FF_BENTYPE17() {
return D_FF_BENTYPE17;
}

public byte getD_FF_BENTYPE18() {
return D_FF_BENTYPE18;
}

public byte getD_FF_BENTYPE19() {
return D_FF_BENTYPE19;
}

public byte getD_FF_BENTYPE20() {
return D_FF_BENTYPE20;
}

public byte getD_FF_BENTYPE21() {
return D_FF_BENTYPE21;
}

public byte getD_FF_BENTYPE22() {
return D_FF_BENTYPE22;
}

public byte getD_FF_BENTYPE23() {
return D_FF_BENTYPE23;
}

public byte getD_FF_BENTYPE24() {
return D_FF_BENTYPE24;
}

public byte getD_FF_BENTYPE25() {
return D_FF_BENTYPE25;
}

public byte getD_FF_BENTYPE26() {
return D_FF_BENTYPE26;
}

public byte getD_FF_BENTYPE27() {
return D_FF_BENTYPE27;
}

public byte getD_FF_BENTYPE28() {
return D_FF_BENTYPE28;
}

public byte getD_FF_BENTYPE29() {
return D_FF_BENTYPE29;
}

public byte getD_FF_BENTYPE30() {
return D_FF_BENTYPE30;
}

public byte getD_FF_BENTYPE31() {
return D_FF_BENTYPE31;
}

public byte getD_FF_BENTYPE32() {
return D_FF_BENTYPE32;
}

public byte getD_FF_BENTYPE33() {
return D_FF_BENTYPE33;
}

public byte getD_FF_BENTYPE34() {
return D_FF_BENTYPE34;
}

public byte getD_FF_BENTYPE35() {
return D_FF_BENTYPE35;
}

public byte getD_FF_BENTYPE36() {
return D_FF_BENTYPE36;
}

public byte getD_FF_BENTYPE37() {
return D_FF_BENTYPE37;
}

public byte getD_FF_BENTYPE38() {
return D_FF_BENTYPE38;
}

public byte getD_FF_BENTYPE39() {
return D_FF_BENTYPE39;
}

public byte getD_FF_EMPLW() {
return D_FF_EMPLW;
}

public byte getD_FF_EVERINT() {
return D_FF_EVERINT;
}

public byte getD_FF_IVINTLANG() {
return D_FF_IVINTLANG;
}

public byte getD_FF_IVLOLW() {
return D_FF_IVLOLW;
}

public byte getD_FF_JBMNGR() {
return D_FF_JBMNGR;
}

public byte getD_FF_JBSEMP() {
return D_FF_JBSEMP;
}

public byte getD_FF_JBSIZE() {
return D_FF_JBSIZE;
}

public byte getD_FF_JBSTAT() {
return D_FF_JBSTAT;
}

public byte getD_FF_OPRLG() {
return D_FF_OPRLG;
}

public byte getD_FF_OPRLG0() {
return D_FF_OPRLG0;
}

public byte getD_FF_OPRLG0NI() {
return D_FF_OPRLG0NI;
}

public byte getD_FF_TEL() {
return D_FF_TEL;
}

public byte getD_FF_UKBORN() {
return D_FF_UKBORN;
}

public short getD_FF_YR2UK4() {
return D_FF_YR2UK4;
}

protected double D_FIBENOTHR_DV() {
return D_FIBENOTHR_DV;
}

protected double D_FIBENOTHR_IF() {
return D_FIBENOTHR_IF;
}

public boolean getD_FIBENOTHR_TC() {
return D_FIBENOTHR_TC;
}

protected double D_FIMNGRS_DV() {
return D_FIMNGRS_DV;
}

protected double D_FIMNGRS_IF() {
return D_FIMNGRS_IF;
}

public boolean getD_FIMNGRS_TC() {
return D_FIMNGRS_TC;
}

protected double D_FIMNINVNET_DV() {
return D_FIMNINVNET_DV;
}

protected double D_FIMNLABGRS_DV() {
return D_FIMNLABGRS_DV;
}

protected double D_FIMNLABGRS_IF() {
return D_FIMNLABGRS_IF;
}

public boolean getD_FIMNLABGRS_TC() {
return D_FIMNLABGRS_TC;
}

protected double D_FIMNLABNET_DV() {
return D_FIMNLABNET_DV;
}

public boolean getD_FIMNLABNET_TC() {
return D_FIMNLABNET_TC;
}

protected double D_FIMNMISC_DV() {
return D_FIMNMISC_DV;
}

protected double D_FIMNNET_DV() {
return D_FIMNNET_DV;
}

protected double D_FIMNPEN_DV() {
return D_FIMNPEN_DV;
}

protected double D_FIMNPRBEN_DV() {
return D_FIMNPRBEN_DV;
}

protected double D_FIMNSBEN_DV() {
return D_FIMNSBEN_DV;
}

public byte getD_FINFUT() {
return D_FINFUT;
}

public byte getD_FINNOW() {
return D_FINNOW;
}

public byte getD_FIVEALCDR() {
return D_FIVEALCDR;
}

public byte getD_FIYRDB1() {
return D_FIYRDB1;
}

public byte getD_FIYRDB2() {
return D_FIYRDB2;
}

public byte getD_FIYRDB3() {
return D_FIYRDB3;
}

public byte getD_FIYRDB4() {
return D_FIYRDB4;
}

public byte getD_FIYRDB5() {
return D_FIYRDB5;
}

public byte getD_FIYRDB6() {
return D_FIYRDB6;
}

public int getD_FIYRDIA() {
return D_FIYRDIA;
}

protected double D_FIYRINVINC_DV() {
return D_FIYRINVINC_DV;
}

public byte getD_FIYRINVINC_IF() {
return D_FIYRINVINC_IF;
}

public boolean getD_FIYRINVINC_TC() {
return D_FIYRINVINC_TC;
}

public byte getD_FLAGLINKB1() {
return D_FLAGLINKB1;
}

public byte getD_FLAGLINKB2() {
return D_FLAGLINKB2;
}

public byte getD_FLAGLINKB3() {
return D_FLAGLINKB3;
}

public byte getD_FLYES1() {
return D_FLYES1;
}

public byte getD_FLYES2() {
return D_FLYES2;
}

public byte getD_FLYES3() {
return D_FLYES3;
}

public byte getD_FLYES4() {
return D_FLYES4;
}

public int getD_FNPID() {
return D_FNPID;
}

public byte getD_FNPNO() {
return D_FNPNO;
}

public int getD_FNSPID() {
return D_FNSPID;
}

public byte getD_FNSPNO() {
return D_FNSPNO;
}

public byte getD_FRDRG() {
return D_FRDRG;
}

public byte getD_FT2ENDM1() {
return D_FT2ENDM1;
}

public byte getD_FT2ENDM2() {
return D_FT2ENDM2;
}

public short getD_FT2ENDY41() {
return D_FT2ENDY41;
}

public short getD_FT2ENDY42() {
return D_FT2ENDY42;
}

public byte getD_FTEDANY() {
return D_FTEDANY;
}

public byte getD_FTEDEND1() {
return D_FTEDEND1;
}

public byte getD_FTEDEND2() {
return D_FTEDEND2;
}

public byte getD_FTEDMOR1() {
return D_FTEDMOR1;
}

public byte getD_FTEDMOR2() {
return D_FTEDMOR2;
}

public byte getD_FTEDSTARTM1() {
return D_FTEDSTARTM1;
}

public byte getD_FTEDSTARTM2() {
return D_FTEDSTARTM2;
}

public short getD_FTEDSTARTY41() {
return D_FTEDSTARTY41;
}

public short getD_FTEDSTARTY42() {
return D_FTEDSTARTY42;
}

public byte getD_FTENDM() {
return D_FTENDM;
}

public short getD_FTENDY4() {
return D_FTENDY4;
}

public byte getD_FTQUALS() {
return D_FTQUALS;
}

public byte getD_GOR_DV() {
return D_GOR_DV;
}

public int getD_GRFPID() {
return D_GRFPID;
}

public byte getD_GRFPNO() {
return D_GRFPNO;
}

public int getD_GRMPID() {
return D_GRMPID;
}

public byte getD_GRMPNO() {
return D_GRMPNO;
}

public byte getD_HASCURR() {
return D_HASCURR;
}

public byte getD_HASEMAIL() {
return D_HASEMAIL;
}

public byte getD_HCOND1() {
return D_HCOND1;
}

public byte getD_HCOND10() {
return D_HCOND10;
}

public byte getD_HCOND11() {
return D_HCOND11;
}

public byte getD_HCOND12() {
return D_HCOND12;
}

public byte getD_HCOND13() {
return D_HCOND13;
}

public byte getD_HCOND14() {
return D_HCOND14;
}

public byte getD_HCOND15() {
return D_HCOND15;
}

public byte getD_HCOND16() {
return D_HCOND16;
}

public byte getD_HCOND17() {
return D_HCOND17;
}

public byte getD_HCOND2() {
return D_HCOND2;
}

public byte getD_HCOND3() {
return D_HCOND3;
}

public byte getD_HCOND4() {
return D_HCOND4;
}

public byte getD_HCOND5() {
return D_HCOND5;
}

public byte getD_HCOND6() {
return D_HCOND6;
}

public byte getD_HCOND7() {
return D_HCOND7;
}

public byte getD_HCOND8() {
return D_HCOND8;
}

public byte getD_HCOND9() {
return D_HCOND9;
}

public byte getD_HCOND96() {
return D_HCOND96;
}

public byte getD_HCONDA01() {
return D_HCONDA01;
}

public byte getD_HCONDA02() {
return D_HCONDA02;
}

public byte getD_HCONDA03() {
return D_HCONDA03;
}

public byte getD_HCONDA04() {
return D_HCONDA04;
}

public byte getD_HCONDA05() {
return D_HCONDA05;
}

public byte getD_HCONDA06() {
return D_HCONDA06;
}

public byte getD_HCONDA07() {
return D_HCONDA07;
}

public byte getD_HCONDA08() {
return D_HCONDA08;
}

public byte getD_HCONDA09() {
return D_HCONDA09;
}

public byte getD_HCONDA10() {
return D_HCONDA10;
}

public byte getD_HCONDA11() {
return D_HCONDA11;
}

public byte getD_HCONDA12() {
return D_HCONDA12;
}

public byte getD_HCONDA13() {
return D_HCONDA13;
}

public byte getD_HCONDA14() {
return D_HCONDA14;
}

public byte getD_HCONDA15() {
return D_HCONDA15;
}

public byte getD_HCONDA16() {
return D_HCONDA16;
}

public byte getD_HCONDA17() {
return D_HCONDA17;
}

public byte getD_HCONDN1() {
return D_HCONDN1;
}

public byte getD_HCONDN10() {
return D_HCONDN10;
}

public byte getD_HCONDN11() {
return D_HCONDN11;
}

public byte getD_HCONDN12() {
return D_HCONDN12;
}

public byte getD_HCONDN13() {
return D_HCONDN13;
}

public byte getD_HCONDN14() {
return D_HCONDN14;
}

public byte getD_HCONDN15() {
return D_HCONDN15;
}

public byte getD_HCONDN16() {
return D_HCONDN16;
}

public byte getD_HCONDN17() {
return D_HCONDN17;
}

public byte getD_HCONDN2() {
return D_HCONDN2;
}

public byte getD_HCONDN3() {
return D_HCONDN3;
}

public byte getD_HCONDN4() {
return D_HCONDN4;
}

public byte getD_HCONDN5() {
return D_HCONDN5;
}

public byte getD_HCONDN6() {
return D_HCONDN6;
}

public byte getD_HCONDN7() {
return D_HCONDN7;
}

public byte getD_HCONDN8() {
return D_HCONDN8;
}

public byte getD_HCONDN9() {
return D_HCONDN9;
}

public byte getD_HCONDN96() {
return D_HCONDN96;
}

public byte getD_HCONDNO1() {
return D_HCONDNO1;
}

public byte getD_HCONDNO10() {
return D_HCONDNO10;
}

public byte getD_HCONDNO2() {
return D_HCONDNO2;
}

public byte getD_HCONDNO3() {
return D_HCONDNO3;
}

public byte getD_HCONDNO4() {
return D_HCONDNO4;
}

public byte getD_HCONDNO5() {
return D_HCONDNO5;
}

public byte getD_HCONDNO6() {
return D_HCONDNO6;
}

public byte getD_HCONDNO7() {
return D_HCONDNO7;
}

public byte getD_HCONDNO8() {
return D_HCONDNO8;
}

public byte getD_HCONDNO9() {
return D_HCONDNO9;
}

public byte getD_HCONDNS1() {
return D_HCONDNS1;
}

public byte getD_HCONDNS10() {
return D_HCONDNS10;
}

public byte getD_HCONDNS2() {
return D_HCONDNS2;
}

public byte getD_HCONDNS3() {
return D_HCONDNS3;
}

public byte getD_HCONDNS4() {
return D_HCONDNS4;
}

public byte getD_HCONDNS5() {
return D_HCONDNS5;
}

public byte getD_HCONDNS6() {
return D_HCONDNS6;
}

public byte getD_HCONDNS7() {
return D_HCONDNS7;
}

public byte getD_HCONDNS8() {
return D_HCONDNS8;
}

public byte getD_HCONDNS9() {
return D_HCONDNS9;
}

public byte getD_HCONDS01() {
return D_HCONDS01;
}

public byte getD_HCONDS02() {
return D_HCONDS02;
}

public byte getD_HCONDS03() {
return D_HCONDS03;
}

public byte getD_HCONDS04() {
return D_HCONDS04;
}

public byte getD_HCONDS05() {
return D_HCONDS05;
}

public byte getD_HCONDS08() {
return D_HCONDS08;
}

public byte getD_HCONDS09() {
return D_HCONDS09;
}

public byte getD_HCONDS10() {
return D_HCONDS10;
}

public byte getD_HCONDS11() {
return D_HCONDS11;
}

public byte getD_HCONDS12() {
return D_HCONDS12;
}

public byte getD_HCONDS13() {
return D_HCONDS13;
}

public byte getD_HCONDS14() {
return D_HCONDS14;
}

public byte getD_HCONDS15() {
return D_HCONDS15;
}

public byte getD_HCONDS16() {
return D_HCONDS16;
}

public byte getD_HCONDS17() {
return D_HCONDS17;
}

public byte getD_HEALTH() {
return D_HEALTH;
}

public byte getD_HEALTHSN() {
return D_HEALTHSN;
}

public byte getD_HEDLIK() {
return D_HEDLIK;
}

public byte getD_HEDNT() {
return D_HEDNT;
}

public byte getD_HEDNTO_CODE() {
return D_HEDNTO_CODE;
}

public byte getD_HGADOPTF() {
return D_HGADOPTF;
}

public byte getD_HGADOPTM() {
return D_HGADOPTM;
}

public byte getD_HGBIOF() {
return D_HGBIOF;
}

public byte getD_HGBIOM() {
return D_HGBIOM;
}

public byte getD_HGPART() {
return D_HGPART;
}

public byte getD_HHORIG() {
return D_HHORIG;
}

public byte getD_HHRESP_DV() {
return D_HHRESP_DV;
}

public byte getD_HHTYPE_DV() {
return D_HHTYPE_DV;
}

public int getD_HIDP() {
return D_HIDP;
}

public byte getD_HIQUAL_DV() {
return D_HIQUAL_DV;
}

public byte getD_HLTHISGN() {
return D_HLTHISGN;
}

public byte getD_HLTHKIDLINK() {
return D_HLTHKIDLINK;
}

public byte getD_HLTHLINK() {
return D_HLTHLINK;
}

public byte getD_HLTHLINKB1() {
return D_HLTHLINKB1;
}

public byte getD_HLTHLINKB2() {
return D_HLTHLINKB2;
}

public byte getD_HLTHLINKB3() {
return D_HLTHLINKB3;
}

public byte getD_HLTHRECD() {
return D_HLTHRECD;
}

public byte getD_HLTHRSGN() {
return D_HLTHRSGN;
}

public byte getD_HOSPC1() {
return D_HOSPC1;
}

public byte getD_HOSPC10() {
return D_HOSPC10;
}

public byte getD_HOSPC2() {
return D_HOSPC2;
}

public byte getD_HOSPC3() {
return D_HOSPC3;
}

public byte getD_HOSPC4() {
return D_HOSPC4;
}

public byte getD_HOSPC5() {
return D_HOSPC5;
}

public byte getD_HOSPC6() {
return D_HOSPC6;
}

public byte getD_HOSPC7() {
return D_HOSPC7;
}

public byte getD_HOSPC8() {
return D_HOSPC8;
}

public byte getD_HOSPC9() {
return D_HOSPC9;
}

public short getD_HOSPDC1() {
return D_HOSPDC1;
}

public boolean getD_HOSPDC10() {
return D_HOSPDC10;
}

public byte getD_HOSPDC2() {
return D_HOSPDC2;
}

public byte getD_HOSPDC3() {
return D_HOSPDC3;
}

public byte getD_HOSPDC4() {
return D_HOSPDC4;
}

public byte getD_HOSPDC5() {
return D_HOSPDC5;
}

public byte getD_HOSPDC6() {
return D_HOSPDC6;
}

public boolean getD_HOSPDC7() {
return D_HOSPDC7;
}

public byte getD_HOSPDC8() {
return D_HOSPDC8;
}

public boolean getD_HOSPDC9() {
return D_HOSPDC9;
}

public byte getD_HOUSING() {
return D_HOUSING;
}

public short getD_HOWLNG() {
return D_HOWLNG;
}

public int getD_HRPID() {
return D_HRPID;
}

public byte getD_HRPNO() {
return D_HRPNO;
}

public byte getD_HRS_SLPH() {
return D_HRS_SLPH;
}

public byte getD_HRS_SLPM() {
return D_HRS_SLPM;
}

public byte getD_HUBOSS() {
return D_HUBOSS;
}

public byte getD_HUBUYS() {
return D_HUBUYS;
}

public byte getD_HUCAR() {
return D_HUCAR;
}

public byte getD_HUDIY() {
return D_HUDIY;
}

public byte getD_HUFRYS() {
return D_HUFRYS;
}

public byte getD_HUIRON() {
return D_HUIRON;
}

public byte getD_HUMOPS() {
return D_HUMOPS;
}

public byte getD_HUPOTS() {
return D_HUPOTS;
}

public byte getD_HURUNS() {
return D_HURUNS;
}

public byte getD_HUSITS() {
return D_HUSITS;
}

public byte getD_IENDDATHH() {
return D_IENDDATHH;
}

public byte getD_IENDDATMM() {
return D_IENDDATMM;
}

public byte getD_IENDDATSS() {
return D_IENDDATSS;
}

protected double D_IND5MUS_LW() {
return D_IND5MUS_LW;
}

protected double D_IND5MUS_XW() {
return D_IND5MUS_XW;
}

protected double D_INDBD91_LW() {
return D_INDBD91_LW;
}

protected double D_INDBDUB_LW() {
return D_INDBDUB_LW;
}

protected double D_INDIN01_LW() {
return D_INDIN01_LW;
}

protected double D_INDIN91_LW() {
return D_INDIN91_LW;
}

protected double D_INDINUB_LW() {
return D_INDINUB_LW;
}

protected double D_INDINUB_XW() {
return D_INDINUB_XW;
}

protected double D_INDINUS_LW() {
return D_INDINUS_LW;
}

public boolean getD_INDMODE() {
return D_INDMODE;
}

protected double D_INDNS91_LW() {
return D_INDNS91_LW;
}

protected double D_INDNSUB_LW() {
return D_INDNSUB_LW;
}

protected double D_INDPXUB_LW() {
return D_INDPXUB_LW;
}

protected double D_INDPXUB_XW() {
return D_INDPXUB_XW;
}

protected double D_INDPXUS_LW() {
return D_INDPXUS_LW;
}

protected double D_INDSCUB_LW() {
return D_INDSCUB_LW;
}

protected double D_INDSCUB_XW() {
return D_INDSCUB_XW;
}

protected double D_INDSCUS_LW() {
return D_INDSCUS_LW;
}

public byte getD_INFSAVE1() {
return D_INFSAVE1;
}

public byte getD_INFSAVE2() {
return D_INFSAVE2;
}

public byte getD_INFSAVE3() {
return D_INFSAVE3;
}

public byte getD_INFSAVE4() {
return D_INFSAVE4;
}

public byte getD_INFSAVE5() {
return D_INFSAVE5;
}

public byte getD_INFSAVE6() {
return D_INFSAVE6;
}

public byte getD_INFSAVE96() {
return D_INFSAVE96;
}

public byte getD_INOCONTACT() {
return D_INOCONTACT;
}

public byte getD_INTCONTACT() {
return D_INTCONTACT;
}

public byte getD_INTDATD_DV() {
return D_INTDATD_DV;
}

public byte getD_INTDATM_DV() {
return D_INTDATM_DV;
}

public short getD_INTDATY_DV() {
return D_INTDATY_DV;
}

public byte getD_INTSIGNHEALTH() {
return D_INTSIGNHEALTH;
}

public byte getD_INVITRO1() {
return D_INVITRO1;
}

public boolean getD_INVITRO2() {
return D_INVITRO2;
}

public boolean getD_INVITRO3() {
return D_INVITRO3;
}

public boolean getD_INVITRO4() {
return D_INVITRO4;
}

public byte getD_IOUTCOME() {
return D_IOUTCOME;
}

public byte getD_ISTRTDATD() {
return D_ISTRTDATD;
}

public byte getD_ISTRTDATHH() {
return D_ISTRTDATHH;
}

public byte getD_ISTRTDATM() {
return D_ISTRTDATM;
}

public byte getD_ISTRTDATMM() {
return D_ISTRTDATMM;
}

public byte getD_ISTRTDATSS() {
return D_ISTRTDATSS;
}

public short getD_ISTRTDATY() {
return D_ISTRTDATY;
}

public short getD_ISYEAR() {
return D_ISYEAR;
}

public byte getD_IVAFFCT11() {
return D_IVAFFCT11;
}

public byte getD_IVAFFCT12() {
return D_IVAFFCT12;
}

public byte getD_IVAFFCT13() {
return D_IVAFFCT13;
}

public byte getD_IVAFFCT14() {
return D_IVAFFCT14;
}

public byte getD_IVAFFCT15() {
return D_IVAFFCT15;
}

public byte getD_IVAFFCT17() {
return D_IVAFFCT17;
}

public byte getD_IVAFFCT21() {
return D_IVAFFCT21;
}

public byte getD_IVAFFCT22() {
return D_IVAFFCT22;
}

public byte getD_IVAFFCT23() {
return D_IVAFFCT23;
}

public byte getD_IVAFFCT27() {
return D_IVAFFCT27;
}

public byte getD_IVAFFCT30() {
return D_IVAFFCT30;
}

public byte getD_IVAFFCT97() {
return D_IVAFFCT97;
}

public byte getD_IVCOOP() {
return D_IVCOOP;
}

public boolean getD_IVFIO() {
return D_IVFIO;
}

public byte getD_IVINFNCE() {
return D_IVINFNCE;
}

public byte getD_IVLIBAL() {
return D_IVLIBAL;
}

public byte getD_IVLIENG() {
return D_IVLIENG;
}

public byte getD_IVLITRANS() {
return D_IVLITRANS;
}

public byte getD_IVLIWHO() {
return D_IVLIWHO;
}

public byte getD_IVPRSNT() {
return D_IVPRSNT;
}

public byte getD_J1BOSS() {
return D_J1BOSS;
}

public byte getD_J1MNGR() {
return D_J1MNGR;
}

public byte getD_J1NONE() {
return D_J1NONE;
}

public byte getD_J1NSSEC5_DV() {
return D_J1NSSEC5_DV;
}

public byte getD_J1SEMP() {
return D_J1SEMP;
}

public short getD_J1SOC00_CC() {
return D_J1SOC00_CC;
}

public short getD_J1SOC10_CC() {
return D_J1SOC10_CC;
}

public byte getD_J1SOC90_CC() {
return D_J1SOC90_CC;
}

public byte getD_J2HAS() {
return D_J2HAS;
}

public short getD_J2HRS() {
return D_J2HRS;
}

public byte getD_J2NSSEC5_DV() {
return D_J2NSSEC5_DV;
}

public int getD_J2PAY() {
return D_J2PAY;
}

protected double D_J2PAYNET_DV() {
return D_J2PAYNET_DV;
}

protected double D_J2PAY_DV() {
return D_J2PAY_DV;
}

public byte getD_J2PAY_IF() {
return D_J2PAY_IF;
}

public byte getD_J2SEMP() {
return D_J2SEMP;
}

public short getD_J2SOC00_CC() {
return D_J2SOC00_CC;
}

public short getD_J2SOC10_CC() {
return D_J2SOC10_CC;
}

public byte getD_J2SOC90_CC() {
return D_J2SOC90_CC;
}

public byte getD_JBATT1() {
return D_JBATT1;
}

public byte getD_JBATT2() {
return D_JBATT2;
}

public byte getD_JBATT3() {
return D_JBATT3;
}

public byte getD_JBATT4() {
return D_JBATT4;
}

public byte getD_JBATT5() {
return D_JBATT5;
}

public byte getD_JBATT6() {
return D_JBATT6;
}

public byte getD_JBBGD() {
return D_JBBGD;
}

public byte getD_JBBGDATD() {
return D_JBBGDATD;
}

public byte getD_JBBGDATM() {
return D_JBBGDATM;
}

public short getD_JBBGDATY() {
return D_JBBGDATY;
}

public byte getD_JBBGM() {
return D_JBBGM;
}

public short getD_JBBGY() {
return D_JBBGY;
}

public byte getD_JBENDD() {
return D_JBENDD;
}

public byte getD_JBENDM() {
return D_JBENDM;
}

public byte getD_JBENDREAS() {
return D_JBENDREAS;
}

public short getD_JBENDY4() {
return D_JBENDY4;
}

public byte getD_JBES2000() {
return D_JBES2000;
}

public byte getD_JBFLEX1() {
return D_JBFLEX1;
}

public byte getD_JBFLEX2() {
return D_JBFLEX2;
}

public byte getD_JBFLEX3() {
return D_JBFLEX3;
}

public byte getD_JBFLEX4() {
return D_JBFLEX4;
}

public byte getD_JBFLEX5() {
return D_JBFLEX5;
}

public byte getD_JBFLEX6() {
return D_JBFLEX6;
}

public byte getD_JBFLEX7() {
return D_JBFLEX7;
}

public byte getD_JBFLEX8() {
return D_JBFLEX8;
}

public byte getD_JBFLEX96() {
return D_JBFLEX96;
}

public byte getD_JBFT_DV() {
return D_JBFT_DV;
}

public byte getD_JBFXINF() {
return D_JBFXINF;
}

public byte getD_JBFXUSE1() {
return D_JBFXUSE1;
}

public byte getD_JBFXUSE2() {
return D_JBFXUSE2;
}

public byte getD_JBFXUSE3() {
return D_JBFXUSE3;
}

public byte getD_JBFXUSE4() {
return D_JBFXUSE4;
}

public byte getD_JBFXUSE5() {
return D_JBFXUSE5;
}

public byte getD_JBFXUSE6() {
return D_JBFXUSE6;
}

public byte getD_JBFXUSE7() {
return D_JBFXUSE7;
}

public byte getD_JBFXUSE8() {
return D_JBFXUSE8;
}

public byte getD_JBFXUSE96() {
return D_JBFXUSE96;
}

public byte getD_JBHAD() {
return D_JBHAD;
}

public byte getD_JBHAS() {
return D_JBHAS;
}

protected double D_JBHRS() {
return D_JBHRS;
}

public byte getD_JBIINDB_DV() {
return D_JBIINDB_DV;
}

public short getD_JBISCO88_CC() {
return D_JBISCO88_CC;
}

public byte getD_JBLKCHA() {
return D_JBLKCHA;
}

public byte getD_JBLKCHB() {
return D_JBLKCHB;
}

public byte getD_JBLKCHC() {
return D_JBLKCHC;
}

public byte getD_JBLKCHD() {
return D_JBLKCHD;
}

public byte getD_JBLKCHE() {
return D_JBLKCHE;
}

public byte getD_JBMNGR() {
return D_JBMNGR;
}

public byte getD_JBMNGRCHK() {
return D_JBMNGRCHK;
}

public byte getD_JBNSSEC3_DV() {
return D_JBNSSEC3_DV;
}

public byte getD_JBNSSEC5_DV() {
return D_JBNSSEC5_DV;
}

public byte getD_JBNSSEC8_DV() {
return D_JBNSSEC8_DV;
}

public byte getD_JBNSSEC_DV() {
return D_JBNSSEC_DV;
}

public byte getD_JBOFF() {
return D_JBOFF;
}

public byte getD_JBOFFY() {
return D_JBOFFY;
}

public byte getD_JBONUS() {
return D_JBONUS;
}

public byte getD_JBOT() {
return D_JBOT;
}

public byte getD_JBOTPD() {
return D_JBOTPD;
}

public byte getD_JBPEN() {
return D_JBPEN;
}

public byte getD_JBPENM() {
return D_JBPENM;
}

public short getD_JBPENY4() {
return D_JBPENY4;
}

public byte getD_JBPERFP() {
return D_JBPERFP;
}

public byte getD_JBPL() {
return D_JBPL;
}

public byte getD_JBRGSC_DV() {
return D_JBRGSC_DV;
}

public byte getD_JBRISE() {
return D_JBRISE;
}

public byte getD_JBSAMR() {
return D_JBSAMR;
}

public byte getD_JBSAT() {
return D_JBSAT;
}

public byte getD_JBSEC() {
return D_JBSEC;
}

public byte getD_JBSECT() {
return D_JBSECT;
}

public byte getD_JBSECTPUB() {
return D_JBSECTPUB;
}

public byte getD_JBSEG_DV() {
return D_JBSEG_DV;
}

public byte getD_JBSEMP() {
return D_JBSEMP;
}

public byte getD_JBSEMPCHK() {
return D_JBSEMPCHK;
}

public byte getD_JBSIC07CHK() {
return D_JBSIC07CHK;
}

public byte getD_JBSIC07_CC() {
return D_JBSIC07_CC;
}

public byte getD_JBSIZE() {
return D_JBSIZE;
}

public byte getD_JBSIZECHK() {
return D_JBSIZECHK;
}

public byte getD_JBSOC00CHK() {
return D_JBSOC00CHK;
}

public short getD_JBSOC00_CC() {
return D_JBSOC00_CC;
}

public short getD_JBSOC10_CC() {
return D_JBSOC10_CC;
}

public byte getD_JBSOCGR_DV() {
return D_JBSOCGR_DV;
}

public byte getD_JBSTAT() {
return D_JBSTAT;
}

public byte getD_JBTERM1() {
return D_JBTERM1;
}

public byte getD_JBTERM2() {
return D_JBTERM2;
}

public short getD_JBTTWT() {
return D_JBTTWT;
}

public byte getD_JBXPCHA() {
return D_JBXPCHA;
}

public byte getD_JBXPCHB() {
return D_JBXPCHB;
}

public byte getD_JBXPCHC() {
return D_JBXPCHC;
}

public byte getD_JBXPCHD() {
return D_JBXPCHD;
}

public byte getD_JBXPCHE() {
return D_JBXPCHE;
}

public byte getD_JLBOSS() {
return D_JLBOSS;
}

public byte getD_JLENDM() {
return D_JLENDM;
}

public short getD_JLENDY() {
return D_JLENDY;
}

public byte getD_JLES2000() {
return D_JLES2000;
}

public byte getD_JLIINDB_DV() {
return D_JLIINDB_DV;
}

public short getD_JLISCO88_CC() {
return D_JLISCO88_CC;
}

public byte getD_JLMNGR() {
return D_JLMNGR;
}

public byte getD_JLNSSEC3_DV() {
return D_JLNSSEC3_DV;
}

public byte getD_JLNSSEC5_DV() {
return D_JLNSSEC5_DV;
}

public byte getD_JLNSSEC8_DV() {
return D_JLNSSEC8_DV;
}

public byte getD_JLNSSEC_DV() {
return D_JLNSSEC_DV;
}

public byte getD_JLRGSC_DV() {
return D_JLRGSC_DV;
}

public byte getD_JLSEG_DV() {
return D_JLSEG_DV;
}

public byte getD_JLSEMP() {
return D_JLSEMP;
}

public byte getD_JLSIC07_CC() {
return D_JLSIC07_CC;
}

public byte getD_JLSIZE() {
return D_JLSIZE;
}

public short getD_JLSOC00_CC() {
return D_JLSOC00_CC;
}

public short getD_JLSOC10_CC() {
return D_JLSOC10_CC;
}

public byte getD_JOBHOURS1() {
return D_JOBHOURS1;
}

public byte getD_JOBHOURS2() {
return D_JOBHOURS2;
}

public byte getD_JOBHOURS3() {
return D_JOBHOURS3;
}

public byte getD_JOBHOURS4() {
return D_JOBHOURS4;
}

public byte getD_JOBHOURS5() {
return D_JOBHOURS5;
}

public boolean getD_JOBHOURS6() {
return D_JOBHOURS6;
}

public byte getD_JSACCS() {
return D_JSACCS;
}

public byte getD_JSBOSS() {
return D_JSBOSS;
}

public byte getD_JSHRS() {
return D_JSHRS;
}

public byte getD_JSPART() {
return D_JSPART;
}

public int getD_JSPAYU() {
return D_JSPAYU;
}

public byte getD_JSPAYW() {
return D_JSPAYW;
}

public byte getD_JSPL() {
return D_JSPL;
}

public byte getD_JSPRBM() {
return D_JSPRBM;
}

public short getD_JSPRBY4() {
return D_JSPRBY4;
}

public byte getD_JSPREM() {
return D_JSPREM;
}

public short getD_JSPREY4() {
return D_JSPREY4;
}

public int getD_JSPRF() {
return D_JSPRF;
}

public byte getD_JSPRLS() {
return D_JSPRLS;
}

public byte getD_JSPRNI() {
return D_JSPRNI;
}

public byte getD_JSPRTX() {
return D_JSPRTX;
}

public byte getD_JSPYNI() {
return D_JSPYNI;
}

public byte getD_JSPYTX() {
return D_JSPYTX;
}

public byte getD_JSSIZE() {
return D_JSSIZE;
}

public byte getD_JSTTWT() {
return D_JSTTWT;
}

public short getD_JSTTWTB() {
return D_JSTTWTB;
}

public byte getD_JSTYPEB() {
return D_JSTYPEB;
}

public byte getD_JSWORKTRAV() {
return D_JSWORKTRAV;
}

public byte getD_JUBGN() {
return D_JUBGN;
}

public byte getD_JULK4WK() {
return D_JULK4WK;
}

public byte getD_JULK4X1() {
return D_JULK4X1;
}

public byte getD_JULK4X2() {
return D_JULK4X2;
}

public byte getD_JULK4X3() {
return D_JULK4X3;
}

public byte getD_JULK4X4() {
return D_JULK4X4;
}

public byte getD_JULK4X5() {
return D_JULK4X5;
}

public byte getD_JULK4X6() {
return D_JULK4X6;
}

public byte getD_JULK4X96() {
return D_JULK4X96;
}

public byte getD_JULKJB() {
return D_JULKJB;
}

public byte getD_JWBS1_DV() {
return D_JWBS1_DV;
}

public byte getD_JWBS2_DV() {
return D_JWBS2_DV;
}

public byte getD_LADOPT() {
return D_LADOPT;
}

public byte getD_LATE() {
return D_LATE;
}

public byte getD_LCHMULTI1() {
return D_LCHMULTI1;
}

public byte getD_LCHMULTI2() {
return D_LCHMULTI2;
}

public boolean getD_LCHMULTI3() {
return D_LCHMULTI3;
}

public boolean getD_LCHMULTI4() {
return D_LCHMULTI4;
}

public byte getD_LCOHNPI() {
return D_LCOHNPI;
}

protected double D_LENINDINTV() {
return D_LENINDINTV;
}

public byte getD_LIENG() {
return D_LIENG;
}

public byte getD_LIHOW() {
return D_LIHOW;
}

public byte getD_LINGUA() {
return D_LINGUA;
}

public byte getD_LITRANS() {
return D_LITRANS;
}

public byte getD_LIVESP() {
return D_LIVESP;
}

public boolean getD_LIVESP_DV() {
return D_LIVESP_DV;
}

public byte getD_LIVEWITH() {
return D_LIVEWITH;
}

public byte getD_LIWHO() {
return D_LIWHO;
}

public byte getD_LKMOVE() {
return D_LKMOVE;
}

public byte getD_LMAR1M() {
return D_LMAR1M;
}

public short getD_LMAR1Y() {
return D_LMAR1Y;
}

public byte getD_LMCBM1() {
return D_LMCBM1;
}

public byte getD_LMCBM2() {
return D_LMCBM2;
}

public short getD_LMCBY41() {
return D_LMCBY41;
}

public short getD_LMCBY42() {
return D_LMCBY42;
}

public byte getD_LMSPM1() {
return D_LMSPM1;
}

public byte getD_LMSPM2() {
return D_LMSPM2;
}

public short getD_LMSPY41() {
return D_LMSPY41;
}

public short getD_LMSPY42() {
return D_LMSPY42;
}

public byte getD_LNADOPT() {
return D_LNADOPT;
}

public byte getD_LNPRNT() {
return D_LNPRNT;
}

public byte getD_LPRNT() {
return D_LPRNT;
}

public byte getD_LVHM() {
return D_LVHM;
}

public byte getD_LVMTHP() {
return D_LVMTHP;
}

public byte getD_LVSCHDO() {
return D_LVSCHDO;
}

public byte getD_LVWHY() {
return D_LVWHY;
}

public short getD_LVYRP() {
return D_LVYRP;
}

public byte getD_LWWRONG() {
return D_LWWRONG;
}

public byte getD_MACOB() {
return D_MACOB;
}

public byte getD_MAJU() {
return D_MAJU;
}

public byte getD_MANSSEC5_DV() {
return D_MANSSEC5_DV;
}

public byte getD_MARSTAT() {
return D_MARSTAT;
}

public short getD_MASOC00_CC() {
return D_MASOC00_CC;
}

public short getD_MASOC10_CC() {
return D_MASOC10_CC;
}

public byte getD_MASOC90_CC() {
return D_MASOC90_CC;
}

public byte getD_MASTAT_DV() {
return D_MASTAT_DV;
}

public byte getD_MATLEAVE() {
return D_MATLEAVE;
}

public byte getD_MATLV() {
return D_MATLV;
}

public byte getD_MATLVENDD() {
return D_MATLVENDD;
}

public byte getD_MATLVENDM() {
return D_MATLVENDM;
}

public short getD_MATLVENDY4() {
return D_MATLVENDY4;
}

public byte getD_MATLVSTD() {
return D_MATLVSTD;
}

public byte getD_MATLVSTM() {
return D_MATLVSTM;
}

public short getD_MATLVSTY4() {
return D_MATLVSTY4;
}

public byte getD_MAYRUK() {
return D_MAYRUK;
}

public byte getD_MED_SLP() {
return D_MED_SLP;
}

public byte getD_MEMORIG() {
return D_MEMORIG;
}

public byte getD_MEMPLOY() {
return D_MEMPLOY;
}

public byte getD_MLAGST() {
return D_MLAGST;
}

public byte getD_MLAGSTU() {
return D_MLAGSTU;
}

public byte getD_MLFUTR() {
return D_MLFUTR;
}

public byte getD_MLRNOT1() {
return D_MLRNOT1;
}

public byte getD_MLRNOT10() {
return D_MLRNOT10;
}

public byte getD_MLRNOT11() {
return D_MLRNOT11;
}

public byte getD_MLRNOT12() {
return D_MLRNOT12;
}

public byte getD_MLRNOT13() {
return D_MLRNOT13;
}

public byte getD_MLRNOT2() {
return D_MLRNOT2;
}

public byte getD_MLRNOT3() {
return D_MLRNOT3;
}

public byte getD_MLRNOT4() {
return D_MLRNOT4;
}

public byte getD_MLRNOT5() {
return D_MLRNOT5;
}

public byte getD_MLRNOT6() {
return D_MLRNOT6;
}

public byte getD_MLRNOT7() {
return D_MLRNOT7;
}

public byte getD_MLRNOT8() {
return D_MLRNOT8;
}

public byte getD_MLRNOT9() {
return D_MLRNOT9;
}

public byte getD_MLRNOT97() {
return D_MLRNOT97;
}

public byte getD_MLSTAT() {
return D_MLSTAT;
}

public byte getD_MLSTATCHK() {
return D_MLSTATCHK;
}

public byte getD_MLWKFPT() {
return D_MLWKFPT;
}

public int getD_MNPID() {
return D_MNPID;
}

public byte getD_MNPNO() {
return D_MNPNO;
}

public int getD_MNSPID() {
return D_MNSPID;
}

public byte getD_MNSPNO() {
return D_MNSPNO;
}

public byte getD_MOBUSE() {
return D_MOBUSE;
}

public byte getD_MONTH() {
return D_MONTH;
}

public byte getD_MOVDIR() {
return D_MOVDIR;
}

public byte getD_MOVEOTH_CODE() {
return D_MOVEOTH_CODE;
}

public byte getD_MOVY11() {
return D_MOVY11;
}

public byte getD_MOVY12() {
return D_MOVY12;
}

public byte getD_MOVY13() {
return D_MOVY13;
}

public byte getD_MOVY14() {
return D_MOVY14;
}

public byte getD_MOVY15() {
return D_MOVY15;
}

public byte getD_MOVY16() {
return D_MOVY16;
}

public byte getD_MSTATCH1() {
return D_MSTATCH1;
}

public byte getD_MSTATCH2() {
return D_MSTATCH2;
}

public byte getD_MSTATCH3() {
return D_MSTATCH3;
}

public byte getD_MSTATSAM() {
return D_MSTATSAM;
}

public byte getD_MSTATSAMN() {
return D_MSTATSAMN;
}

public byte getD_MVEVER() {
return D_MVEVER;
}

public byte getD_MVMNTH() {
return D_MVMNTH;
}

public short getD_MVYR() {
return D_MVYR;
}

public byte getD_NADOPTCH() {
return D_NADOPTCH;
}

public byte getD_NAIDXHH() {
return D_NAIDXHH;
}

public byte getD_NATCH01() {
return D_NATCH01;
}

public byte getD_NATCH02() {
return D_NATCH02;
}

public byte getD_NATCH03() {
return D_NATCH03;
}

public byte getD_NATCH04() {
return D_NATCH04;
}

public byte getD_NATCH05() {
return D_NATCH05;
}

public byte getD_NATCH06() {
return D_NATCH06;
}

public byte getD_NATCH07() {
return D_NATCH07;
}

public byte getD_NATCH08() {
return D_NATCH08;
}

public byte getD_NATCH09() {
return D_NATCH09;
}

public byte getD_NATCH10() {
return D_NATCH10;
}

public byte getD_NATCH11() {
return D_NATCH11;
}

public byte getD_NATCH12() {
return D_NATCH12;
}

public boolean getD_NATCH13() {
return D_NATCH13;
}

public boolean getD_NATCH14() {
return D_NATCH14;
}

public boolean getD_NATCH15() {
return D_NATCH15;
}

public boolean getD_NATCH16() {
return D_NATCH16;
}

public byte getD_NATID1() {
return D_NATID1;
}

public byte getD_NATID2() {
return D_NATID2;
}

public byte getD_NATID3() {
return D_NATID3;
}

public byte getD_NATID4() {
return D_NATID4;
}

public byte getD_NATID5() {
return D_NATID5;
}

public byte getD_NATID6() {
return D_NATID6;
}

public byte getD_NATID97() {
return D_NATID97;
}

public byte getD_NCARS() {
return D_NCARS;
}

public byte getD_NCCJT() {
return D_NCCJT;
}

public byte getD_NCCSOLE() {
return D_NCCSOLE;
}

public byte getD_NCH10() {
return D_NCH10;
}

public byte getD_NCH10TO15() {
return D_NCH10TO15;
}

public byte getD_NCH14RESP() {
return D_NCH14RESP;
}

public byte getD_NCH3RESP() {
return D_NCH3RESP;
}

public byte getD_NCH415RESP() {
return D_NCH415RESP;
}

public byte getD_NCH5RESP() {
return D_NCH5RESP;
}

public byte getD_NCH5TO15() {
return D_NCH5TO15;
}

public byte getD_NCH8RESP() {
return D_NCH8RESP;
}

public byte getD_NCHILD() {
return D_NCHILD;
}

public byte getD_NCHILD_DV() {
return D_NCHILD_DV;
}

public byte getD_NCHRESP() {
return D_NCHRESP;
}

public byte getD_NCHUND18RESP() {
return D_NCHUND18RESP;
}

public byte getD_NCHUNDER16() {
return D_NCHUNDER16;
}

public byte getD_NCRR1() {
return D_NCRR1;
}

public byte getD_NCRR11() {
return D_NCRR11;
}

public byte getD_NCRR12() {
return D_NCRR12;
}

public byte getD_NCRR3() {
return D_NCRR3;
}

public byte getD_NCRR4() {
return D_NCRR4;
}

public byte getD_NCRR5() {
return D_NCRR5;
}

public byte getD_NCRR6() {
return D_NCRR6;
}

public byte getD_NCRR8() {
return D_NCRR8;
}

public byte getD_NCRR9() {
return D_NCRR9;
}

public byte getD_NCRRM() {
return D_NCRRM;
}

public short getD_NCRRY4() {
return D_NCRRY4;
}

public byte getD_NDEPCHL_DV() {
return D_NDEPCHL_DV;
}

public byte getD_NETPUSE() {
return D_NETPUSE;
}

public byte getD_NETUSE() {
return D_NETUSE;
}

public byte getD_NEXT() {
return D_NEXT;
}

public byte getD_NEXT1() {
return D_NEXT1;
}

public byte getD_NEXT2() {
return D_NEXT2;
}

public byte getD_NEXT3() {
return D_NEXT3;
}

public byte getD_NEXT4() {
return D_NEXT4;
}

public byte getD_NEXT5() {
return D_NEXT5;
}

public byte getD_NEXT6() {
return D_NEXT6;
}

public byte getD_NEXTELSE1() {
return D_NEXTELSE1;
}

public byte getD_NEXTELSE2() {
return D_NEXTELSE2;
}

public byte getD_NEXTELSE3() {
return D_NEXTELSE3;
}

public byte getD_NEXTELSE4() {
return D_NEXTELSE4;
}

public byte getD_NEXTELSE5() {
return D_NEXTELSE5;
}

public byte getD_NEXTELSE6() {
return D_NEXTELSE6;
}

public byte getD_NEXTJOB1() {
return D_NEXTJOB1;
}

public byte getD_NEXTJOB2() {
return D_NEXTJOB2;
}

public byte getD_NEXTJOB3() {
return D_NEXTJOB3;
}

public byte getD_NEXTJOB4() {
return D_NEXTJOB4;
}

public byte getD_NEXTJOB5() {
return D_NEXTJOB5;
}

public byte getD_NEXTJOB6() {
return D_NEXTJOB6;
}

public byte getD_NEXTSTAT1() {
return D_NEXTSTAT1;
}

public byte getD_NEXTSTAT2() {
return D_NEXTSTAT2;
}

public byte getD_NEXTSTAT3() {
return D_NEXTSTAT3;
}

public byte getD_NEXTSTAT4() {
return D_NEXTSTAT4;
}

public byte getD_NEXTSTAT5() {
return D_NEXTSTAT5;
}

public byte getD_NEXTSTAT6() {
return D_NEXTSTAT6;
}

public byte getD_NFH01() {
return D_NFH01;
}

public byte getD_NFH02() {
return D_NFH02;
}

public byte getD_NFH03() {
return D_NFH03;
}

public byte getD_NFH04() {
return D_NFH04;
}

public byte getD_NFH05() {
return D_NFH05;
}

public byte getD_NFH06() {
return D_NFH06;
}

public byte getD_NFH07() {
return D_NFH07;
}

public byte getD_NFH08() {
return D_NFH08;
}

public byte getD_NFH09() {
return D_NFH09;
}

public byte getD_NFH10() {
return D_NFH10;
}

public byte getD_NFH11() {
return D_NFH11;
}

public byte getD_NFH12() {
return D_NFH12;
}

public byte getD_NFH13() {
return D_NFH13;
}

public byte getD_NFH14() {
return D_NFH14;
}

public byte getD_NFH15() {
return D_NFH15;
}

public byte getD_NFH16() {
return D_NFH16;
}

public byte getD_NFH17() {
return D_NFH17;
}

public byte getD_NFH18() {
return D_NFH18;
}

public byte getD_NFH19() {
return D_NFH19;
}

public byte getD_NFH20() {
return D_NFH20;
}

public byte getD_NFH21() {
return D_NFH21;
}

public byte getD_NFH22() {
return D_NFH22;
}

public byte getD_NFH23() {
return D_NFH23;
}

public byte getD_NFH24() {
return D_NFH24;
}

public byte getD_NFH25() {
return D_NFH25;
}

public byte getD_NFH26() {
return D_NFH26;
}

public byte getD_NFH27() {
return D_NFH27;
}

public byte getD_NFH28() {
return D_NFH28;
}

public byte getD_NFH29() {
return D_NFH29;
}

public byte getD_NFH30() {
return D_NFH30;
}

public byte getD_NFH31() {
return D_NFH31;
}

public byte getD_NFH32() {
return D_NFH32;
}

public byte getD_NFH33() {
return D_NFH33;
}

public byte getD_NFH34() {
return D_NFH34;
}

public byte getD_NFH35() {
return D_NFH35;
}

public byte getD_NFH36() {
return D_NFH36;
}

public byte getD_NFH37() {
return D_NFH37;
}

public byte getD_NFH38() {
return D_NFH38;
}

public byte getD_NFH39() {
return D_NFH39;
}

public byte getD_NFLYEU() {
return D_NFLYEU;
}

public byte getD_NFLYIN() {
return D_NFLYIN;
}

public byte getD_NFLYOS() {
return D_NFLYOS;
}

public byte getD_NGRP_DV() {
return D_NGRP_DV;
}

public byte getD_NHIQUAL_DV() {
return D_NHIQUAL_DV;
}

public byte getD_NIACT() {
return D_NIACT;
}

public byte getD_NIREL() {
return D_NIREL;
}

public byte getD_NISERPS() {
return D_NISERPS;
}

public byte getD_NMAR() {
return D_NMAR;
}

public byte getD_NMPSP_DV() {
return D_NMPSP_DV;
}

public byte getD_NNATCH() {
return D_NNATCH;
}

public byte getD_NNEWBORN() {
return D_NNEWBORN;
}

public byte getD_NNMPSP_DV() {
return D_NNMPSP_DV;
}

public byte getD_NNSIB_DV() {
return D_NNSIB_DV;
}

public byte getD_NNSSIB_DV() {
return D_NNSSIB_DV;
}

public byte getD_NOSVY() {
return D_NOSVY;
}

public byte getD_NOTEMPCHK() {
return D_NOTEMPCHK;
}

public byte getD_NPENSIONER_DV() {
return D_NPENSIONER_DV;
}

public byte getD_NPNS_DV() {
return D_NPNS_DV;
}

public byte getD_NPN_DV() {
return D_NPN_DV;
}

public byte getD_NQFHIGH_DV() {
return D_NQFHIGH_DV;
}

public byte getD_NUNMPSP_DV() {
return D_NUNMPSP_DV;
}

public byte getD_NXTJBENDD() {
return D_NXTJBENDD;
}

public byte getD_NXTJBENDM() {
return D_NXTJBENDM;
}

public short getD_NXTJBENDY4() {
return D_NXTJBENDY4;
}

public byte getD_NXTJBES() {
return D_NXTJBES;
}

public byte getD_NXTJBHRS() {
return D_NXTJBHRS;
}

public byte getD_NXTST() {
return D_NXTST;
}

public byte getD_NXTSTELSE() {
return D_NXTSTELSE;
}

public byte getD_NXTSTENDD() {
return D_NXTSTENDD;
}

public byte getD_NXTSTENDM() {
return D_NXTSTENDM;
}

public short getD_NXTSTENDY4() {
return D_NXTSTENDY4;
}

public byte getD_OLYMACT11() {
return D_OLYMACT11;
}

public byte getD_OLYMACT12() {
return D_OLYMACT12;
}

public byte getD_OLYMACT13() {
return D_OLYMACT13;
}

public byte getD_OLYMACT14() {
return D_OLYMACT14;
}

public byte getD_OLYMACT15() {
return D_OLYMACT15;
}

public byte getD_OLYMACT16() {
return D_OLYMACT16;
}

public byte getD_OLYMACT17() {
return D_OLYMACT17;
}

public byte getD_OLYMACT18() {
return D_OLYMACT18;
}

public byte getD_OLYMACT196() {
return D_OLYMACT196;
}

public byte getD_OLYMACT198() {
return D_OLYMACT198;
}

public byte getD_OLYMACT21() {
return D_OLYMACT21;
}

public byte getD_OLYMACT22() {
return D_OLYMACT22;
}

public byte getD_OLYMACT23() {
return D_OLYMACT23;
}

public byte getD_OLYMACT24() {
return D_OLYMACT24;
}

public byte getD_OLYMACT25() {
return D_OLYMACT25;
}

public byte getD_OLYMACT26() {
return D_OLYMACT26;
}

public byte getD_OLYMACT27() {
return D_OLYMACT27;
}

public byte getD_OLYMACT28() {
return D_OLYMACT28;
}

public byte getD_OLYMACT296() {
return D_OLYMACT296;
}

public byte getD_OLYMACT298() {
return D_OLYMACT298;
}

public byte getD_OLYMACT31() {
return D_OLYMACT31;
}

public byte getD_OLYMACT32() {
return D_OLYMACT32;
}

public byte getD_OLYMACT33() {
return D_OLYMACT33;
}

public byte getD_OLYMACT34() {
return D_OLYMACT34;
}

public byte getD_OLYMACT35() {
return D_OLYMACT35;
}

public byte getD_OLYMACT36() {
return D_OLYMACT36;
}

public byte getD_OLYMACT37() {
return D_OLYMACT37;
}

public byte getD_OLYMACT38() {
return D_OLYMACT38;
}

public byte getD_OLYMACT396() {
return D_OLYMACT396;
}

public byte getD_OLYMACT398() {
return D_OLYMACT398;
}

public byte getD_OLYMPAS11() {
return D_OLYMPAS11;
}

public byte getD_OLYMPAS12() {
return D_OLYMPAS12;
}

public byte getD_OLYMPAS13() {
return D_OLYMPAS13;
}

public byte getD_OLYMPAS14() {
return D_OLYMPAS14;
}

public byte getD_OLYMPAS15() {
return D_OLYMPAS15;
}

public byte getD_OLYMPAS196() {
return D_OLYMPAS196;
}

public byte getD_OLYMPAS198() {
return D_OLYMPAS198;
}

public byte getD_OLYMPAS21() {
return D_OLYMPAS21;
}

public byte getD_OLYMPAS22() {
return D_OLYMPAS22;
}

public byte getD_OLYMPAS23() {
return D_OLYMPAS23;
}

public byte getD_OLYMPAS24() {
return D_OLYMPAS24;
}

public byte getD_OLYMPAS25() {
return D_OLYMPAS25;
}

public byte getD_OLYMPAS296() {
return D_OLYMPAS296;
}

public byte getD_OLYMPAS298() {
return D_OLYMPAS298;
}

public byte getD_OLYMPAS31() {
return D_OLYMPAS31;
}

public byte getD_OLYMPAS32() {
return D_OLYMPAS32;
}

public byte getD_OLYMPAS33() {
return D_OLYMPAS33;
}

public byte getD_OLYMPAS34() {
return D_OLYMPAS34;
}

public byte getD_OLYMPAS35() {
return D_OLYMPAS35;
}

public byte getD_OLYMPAS396() {
return D_OLYMPAS396;
}

public byte getD_OLYMPAS398() {
return D_OLYMPAS398;
}

public byte getD_OPRLG() {
return D_OPRLG;
}

public byte getD_OPRLG0() {
return D_OPRLG0;
}

public byte getD_OPRLG0NI() {
return D_OPRLG0NI;
}

public byte getD_OPRLG1() {
return D_OPRLG1;
}

public byte getD_OPRLG2() {
return D_OPRLG2;
}

public byte getD_OPRLG3() {
return D_OPRLG3;
}

public byte getD_OPSERV1() {
return D_OPSERV1;
}

public byte getD_OPSERV10() {
return D_OPSERV10;
}

public byte getD_OPSERV2() {
return D_OPSERV2;
}

public byte getD_OPSERV3() {
return D_OPSERV3;
}

public byte getD_OPSERV4() {
return D_OPSERV4;
}

public byte getD_OPSERV5() {
return D_OPSERV5;
}

public byte getD_OPSERV6() {
return D_OPSERV6;
}

public byte getD_OPSERV7() {
return D_OPSERV7;
}

public byte getD_OPSERV8() {
return D_OPSERV8;
}

public byte getD_OPSERV9() {
return D_OPSERV9;
}

public boolean getD_ORIGADD() {
return D_ORIGADD;
}

public byte getD_OTHCONT() {
return D_OTHCONT;
}

public byte getD_OVTNSA() {
return D_OVTNSA;
}

public byte getD_OVTPAY() {
return D_OVTPAY;
}

protected double D_OVTRATE() {
return D_OVTRATE;
}

public byte getD_OVTREST() {
return D_OVTREST;
}

public byte getD_PACOB() {
return D_PACOB;
}

public byte getD_PAJU() {
return D_PAJU;
}

public byte getD_PANSSEC5_DV() {
return D_PANSSEC5_DV;
}

public short getD_PASOC00_CC() {
return D_PASOC00_CC;
}

public short getD_PASOC10_CC() {
return D_PASOC10_CC;
}

public byte getD_PASOC90_CC() {
return D_PASOC90_CC;
}

public int getD_PAYGL() {
return D_PAYGL;
}

protected double D_PAYGU_DV() {
return D_PAYGU_DV;
}

public byte getD_PAYGU_IF() {
return D_PAYGU_IF;
}

public byte getD_PAYGWC() {
return D_PAYGWC;
}

protected double D_PAYG_DV() {
return D_PAYG_DV;
}

public int getD_PAYNL() {
return D_PAYNL;
}

protected double D_PAYNU_DV() {
return D_PAYNU_DV;
}

public byte getD_PAYNU_IF() {
return D_PAYNU_IF;
}

public byte getD_PAYNWC() {
return D_PAYNWC;
}

protected double D_PAYN_DV() {
return D_PAYN_DV;
}

public byte getD_PAYRUK() {
return D_PAYRUK;
}

public byte getD_PAYTYP() {
return D_PAYTYP;
}

public int getD_PAYU() {
return D_PAYU;
}

public byte getD_PAYUG() {
return D_PAYUG;
}

public byte getD_PAYUSL() {
return D_PAYUSL;
}

public byte getD_PAYUWC() {
return D_PAYUWC;
}

protected double D_PAYU_DV() {
return D_PAYU_DV;
}

public byte getD_PBNFT1() {
return D_PBNFT1;
}

public byte getD_PBNFT10() {
return D_PBNFT10;
}

public byte getD_PBNFT11() {
return D_PBNFT11;
}

public byte getD_PBNFT12() {
return D_PBNFT12;
}

public byte getD_PBNFT13() {
return D_PBNFT13;
}

public byte getD_PBNFT2() {
return D_PBNFT2;
}

public byte getD_PBNFT3() {
return D_PBNFT3;
}

public byte getD_PBNFT4() {
return D_PBNFT4;
}

public byte getD_PBNFT5() {
return D_PBNFT5;
}

public byte getD_PBNFT6() {
return D_PBNFT6;
}

public byte getD_PBNFT7() {
return D_PBNFT7;
}

public byte getD_PBNFT8() {
return D_PBNFT8;
}

public byte getD_PBNFT9() {
return D_PBNFT9;
}

public byte getD_PBNFT96() {
return D_PBNFT96;
}

public byte getD_PENMCN() {
return D_PENMCN;
}

public byte getD_PENMEX() {
return D_PENMEX;
}

protected double D_PENMPY() {
return D_PENMPY;
}

public byte getD_PENMTP() {
return D_PENMTP;
}

public boolean getD_PENSIONER_DV() {
return D_PENSIONER_DV;
}

public byte getD_PENSPB() {
return D_PENSPB;
}

public byte getD_PJBPTFT() {
return D_PJBPTFT;
}

public byte getD_PJSPTFT() {
return D_PJSPTFT;
}

public byte getD_PJULK4WK() {
return D_PJULK4WK;
}

public byte getD_PLBORNC() {
return D_PLBORNC;
}

public byte getD_PLIVPAR() {
return D_PLIVPAR;
}

public byte getD_PLNOWM() {
return D_PLNOWM;
}

public short getD_PLNOWY4() {
return D_PLNOWY4;
}

public int getD_PN1PID() {
return D_PN1PID;
}

public byte getD_PN1PNO() {
return D_PN1PNO;
}

public byte getD_PN1SEX() {
return D_PN1SEX;
}

public int getD_PN2PID() {
return D_PN2PID;
}

public byte getD_PN2PNO() {
return D_PN2PNO;
}

public byte getD_PN2SEX() {
return D_PN2SEX;
}

public byte getD_PNCARS() {
return D_PNCARS;
}

public byte getD_PNO() {
return D_PNO;
}

public int getD_PNS1PID() {
return D_PNS1PID;
}

public byte getD_PNS1PNO() {
return D_PNS1PNO;
}

public byte getD_PNS1SEX() {
return D_PNS1SEX;
}

public int getD_PNS2PID() {
return D_PNS2PID;
}

public byte getD_PNS2PNO() {
return D_PNS2PNO;
}

public byte getD_PNS2SEX() {
return D_PNS2SEX;
}

public byte getD_PPEN() {
return D_PPEN;
}

public byte getD_PPENSIONER() {
return D_PPENSIONER;
}

public byte getD_PPENT() {
return D_PPENT;
}

public int getD_PPID() {
return D_PPID;
}

public byte getD_PPNO() {
return D_PPNO;
}

public byte getD_PPPEX() {
return D_PPPEX;
}

public byte getD_PPPEXM() {
return D_PPPEXM;
}

public int getD_PPRAM() {
return D_PPRAM;
}

public byte getD_PPRAMPC() {
return D_PPRAMPC;
}

public byte getD_PPREG() {
return D_PPREG;
}

public byte getD_PPSEX() {
return D_PPSEX;
}

public short getD_PPYRS() {
return D_PPYRS;
}

public byte getD_PRAYFREQ() {
return D_PRAYFREQ;
}

public byte getD_PREARN() {
return D_PREARN;
}

public byte getD_PREARNA() {
return D_PREARNA;
}

public byte getD_PREARNW() {
return D_PREARNW;
}

public byte getD_PREASON() {
return D_PREASON;
}

public byte getD_PREG() {
return D_PREG;
}

public byte getD_PREGEND1() {
return D_PREGEND1;
}

public byte getD_PREGEND2() {
return D_PREGEND2;
}

public byte getD_PREGEND3() {
return D_PREGEND3;
}

public boolean getD_PREGEND4() {
return D_PREGEND4;
}

public byte getD_PREGFERT1() {
return D_PREGFERT1;
}

public byte getD_PREGFERT2() {
return D_PREGFERT2;
}

public byte getD_PREGFERT3() {
return D_PREGFERT3;
}

public boolean getD_PREGFERT4() {
return D_PREGFERT4;
}

public byte getD_PREGM1() {
return D_PREGM1;
}

public byte getD_PREGM2() {
return D_PREGM2;
}

public byte getD_PREGM3() {
return D_PREGM3;
}

public boolean getD_PREGM4() {
return D_PREGM4;
}

public byte getD_PREGOUT1() {
return D_PREGOUT1;
}

public byte getD_PREGOUT2() {
return D_PREGOUT2;
}

public byte getD_PREGOUT3() {
return D_PREGOUT3;
}

public byte getD_PREGOUT4() {
return D_PREGOUT4;
}

public byte getD_PREGSMK11() {
return D_PREGSMK11;
}

public boolean getD_PREGSMK12() {
return D_PREGSMK12;
}

public boolean getD_PREGSMK13() {
return D_PREGSMK13;
}

public boolean getD_PREGSMK14() {
return D_PREGSMK14;
}

public byte getD_PREGSMK21() {
return D_PREGSMK21;
}

public boolean getD_PREGSMK22() {
return D_PREGSMK22;
}

public boolean getD_PREGSMK23() {
return D_PREGSMK23;
}

public boolean getD_PREGSMK24() {
return D_PREGSMK24;
}

public byte getD_PREGSMK31() {
return D_PREGSMK31;
}

public boolean getD_PREGSMK32() {
return D_PREGSMK32;
}

public boolean getD_PREGSMK33() {
return D_PREGSMK33;
}

public boolean getD_PREGSMK34() {
return D_PREGSMK34;
}

public byte getD_PREGSMOKE1() {
return D_PREGSMOKE1;
}

public byte getD_PREGSMOKE2() {
return D_PREGSMOKE2;
}

public boolean getD_PREGSMOKE3() {
return D_PREGSMOKE3;
}

public boolean getD_PREGSMOKE4() {
return D_PREGSMOKE4;
}

public short getD_PREGY41() {
return D_PREGY41;
}

public short getD_PREGY42() {
return D_PREGY42;
}

public short getD_PREGY43() {
return D_PREGY43;
}

public boolean getD_PREGY44() {
return D_PREGY44;
}

public byte getD_PREL() {
return D_PREL;
}

public byte getD_PRFITB() {
return D_PRFITB;
}

public byte getD_PRFITBA() {
return D_PRFITBA;
}

public byte getD_PRFITBW() {
return D_PRFITBW;
}

public byte getD_PRIPN() {
return D_PRIPN;
}

public byte getD_PS1() {
return D_PS1;
}

public byte getD_PS10() {
return D_PS10;
}

public byte getD_PS11() {
return D_PS11;
}

public byte getD_PS12() {
return D_PS12;
}

public byte getD_PS13() {
return D_PS13;
}

public byte getD_PS14() {
return D_PS14;
}

public byte getD_PS15() {
return D_PS15;
}

public byte getD_PS16() {
return D_PS16;
}

public byte getD_PS17() {
return D_PS17;
}

public byte getD_PS18() {
return D_PS18;
}

public byte getD_PS19() {
return D_PS19;
}

public byte getD_PS2() {
return D_PS2;
}

public byte getD_PS20() {
return D_PS20;
}

public byte getD_PS21() {
return D_PS21;
}

public byte getD_PS22() {
return D_PS22;
}

public byte getD_PS23() {
return D_PS23;
}

public byte getD_PS24() {
return D_PS24;
}

public byte getD_PS25() {
return D_PS25;
}

public byte getD_PS26() {
return D_PS26;
}

public byte getD_PS27() {
return D_PS27;
}

public byte getD_PS28() {
return D_PS28;
}

public byte getD_PS29() {
return D_PS29;
}

public byte getD_PS3() {
return D_PS3;
}

public byte getD_PS30() {
return D_PS30;
}

public byte getD_PS31() {
return D_PS31;
}

public byte getD_PS32() {
return D_PS32;
}

public byte getD_PS4() {
return D_PS4;
}

public byte getD_PS5() {
return D_PS5;
}

public byte getD_PS6() {
return D_PS6;
}

public byte getD_PS7() {
return D_PS7;
}

public byte getD_PS8() {
return D_PS8;
}

public byte getD_PS9() {
return D_PS9;
}

public byte getD_PSDQA_DV() {
return D_PSDQA_DV;
}

public byte getD_PSDQB_DV() {
return D_PSDQB_DV;
}

public byte getD_PSDQC_DV() {
return D_PSDQC_DV;
}

public byte getD_PSIBLINGS() {
return D_PSIBLINGS;
}

public byte getD_PSNUMCH() {
return D_PSNUMCH;
}

public int getD_PSU() {
return D_PSU;
}

public byte getD_QFHIGH() {
return D_QFHIGH;
}

public boolean getD_QFHIGHFL_DV() {
return D_QFHIGHFL_DV;
}

public byte getD_QFHIGH_DV() {
return D_QFHIGH_DV;
}

public byte getD_QFVOC1() {
return D_QFVOC1;
}

public byte getD_QFVOC10() {
return D_QFVOC10;
}

public byte getD_QFVOC11() {
return D_QFVOC11;
}

public byte getD_QFVOC12() {
return D_QFVOC12;
}

public byte getD_QFVOC13() {
return D_QFVOC13;
}

public byte getD_QFVOC14() {
return D_QFVOC14;
}

public byte getD_QFVOC15() {
return D_QFVOC15;
}

public byte getD_QFVOC2() {
return D_QFVOC2;
}

public byte getD_QFVOC3() {
return D_QFVOC3;
}

public byte getD_QFVOC4() {
return D_QFVOC4;
}

public byte getD_QFVOC5() {
return D_QFVOC5;
}

public byte getD_QFVOC6() {
return D_QFVOC6;
}

public byte getD_QFVOC7() {
return D_QFVOC7;
}

public byte getD_QFVOC8() {
return D_QFVOC8;
}

public byte getD_QFVOC9() {
return D_QFVOC9;
}

public byte getD_QFVOC96() {
return D_QFVOC96;
}

public byte getD_QUALNE() {
return D_QUALNE;
}

public byte getD_QUALNEW1() {
return D_QUALNEW1;
}

public byte getD_QUALNEW10() {
return D_QUALNEW10;
}

public byte getD_QUALNEW11() {
return D_QUALNEW11;
}

public byte getD_QUALNEW13() {
return D_QUALNEW13;
}

public byte getD_QUALNEW15() {
return D_QUALNEW15;
}

public byte getD_QUALNEW16() {
return D_QUALNEW16;
}

public byte getD_QUALNEW17() {
return D_QUALNEW17;
}

public byte getD_QUALNEW18() {
return D_QUALNEW18;
}

public byte getD_QUALNEW19() {
return D_QUALNEW19;
}

public byte getD_QUALNEW2() {
return D_QUALNEW2;
}

public byte getD_QUALNEW20() {
return D_QUALNEW20;
}

public byte getD_QUALNEW21() {
return D_QUALNEW21;
}

public byte getD_QUALNEW22() {
return D_QUALNEW22;
}

public byte getD_QUALNEW23() {
return D_QUALNEW23;
}

public byte getD_QUALNEW24() {
return D_QUALNEW24;
}

public byte getD_QUALNEW25() {
return D_QUALNEW25;
}

public byte getD_QUALNEW26() {
return D_QUALNEW26;
}

public byte getD_QUALNEW27() {
return D_QUALNEW27;
}

public byte getD_QUALNEW28() {
return D_QUALNEW28;
}

public byte getD_QUALNEW29() {
return D_QUALNEW29;
}

public byte getD_QUALNEW3() {
return D_QUALNEW3;
}

public byte getD_QUALNEW30() {
return D_QUALNEW30;
}

public byte getD_QUALNEW31() {
return D_QUALNEW31;
}

public byte getD_QUALNEW5() {
return D_QUALNEW5;
}

public byte getD_QUALNEW6() {
return D_QUALNEW6;
}

public byte getD_QUALNEW7() {
return D_QUALNEW7;
}

public byte getD_QUALNEW8() {
return D_QUALNEW8;
}

public byte getD_QUALNEW9() {
return D_QUALNEW9;
}

public byte getD_QUALOC() {
return D_QUALOC;
}

public byte getD_RACEL() {
return D_RACEL;
}

public byte getD_RACELAT() {
return D_RACELAT;
}

public byte getD_RACELBT() {
return D_RACELBT;
}

public byte getD_RACELMT() {
return D_RACELMT;
}

public byte getD_RACELOT_CODE() {
return D_RACELOT_CODE;
}

public byte getD_RACELO_CODE() {
return D_RACELO_CODE;
}

public byte getD_RACELT() {
return D_RACELT;
}

public byte getD_RACELWT() {
return D_RACELWT;
}

public byte getD_RACEL_DV() {
return D_RACEL_DV;
}

public byte getD_RACH16_DV() {
return D_RACH16_DV;
}

public byte getD_RCOTHERD_CODE() {
return D_RCOTHERD_CODE;
}

public byte getD_REASEND1() {
return D_REASEND1;
}

public byte getD_REASEND2() {
return D_REASEND2;
}

public byte getD_REASEND3() {
return D_REASEND3;
}

public byte getD_REASEND4() {
return D_REASEND4;
}

public byte getD_REASEND5() {
return D_REASEND5;
}

public boolean getD_REASEND6() {
return D_REASEND6;
}

public byte getD_REFBANK() {
return D_REFBANK;
}

public byte getD_REFBNKY() {
return D_REFBNKY;
}

public byte getD_RELUP() {
return D_RELUP;
}

public byte getD_REMAIL_CODE() {
return D_REMAIL_CODE;
}

public byte getD_REMCNTRY1() {
return D_REMCNTRY1;
}

public byte getD_REMCNTRY2() {
return D_REMCNTRY2;
}

public byte getD_REMCNTRY3() {
return D_REMCNTRY3;
}

public byte getD_REMCNTRY4() {
return D_REMCNTRY4;
}

public byte getD_REMHO() {
return D_REMHO;
}

public byte getD_REMHOW1() {
return D_REMHOW1;
}

public byte getD_REMHOW2() {
return D_REMHOW2;
}

public byte getD_REMHOW3() {
return D_REMHOW3;
}

public byte getD_REMIT1() {
return D_REMIT1;
}

public byte getD_REMIT2() {
return D_REMIT2;
}

public byte getD_REMIT3() {
return D_REMIT3;
}

public byte getD_REMIT4() {
return D_REMIT4;
}

public byte getD_REMIT5() {
return D_REMIT5;
}

public short getD_REMITAMT1() {
return D_REMITAMT1;
}

public int getD_REMITAMT2() {
return D_REMITAMT2;
}

public short getD_REMITAMT3() {
return D_REMITAMT3;
}

public int getD_REMITAMT4() {
return D_REMITAMT4;
}

public byte getD_REMITFREQ1() {
return D_REMITFREQ1;
}

public byte getD_REMITFREQ2() {
return D_REMITFREQ2;
}

public byte getD_REMITFREQ3() {
return D_REMITFREQ3;
}

public byte getD_REMITFREQ4() {
return D_REMITFREQ4;
}

public byte getD_REMITREG1() {
return D_REMITREG1;
}

public byte getD_REMITREG2() {
return D_REMITREG2;
}

public byte getD_REMITREG3() {
return D_REMITREG3;
}

public byte getD_REMITREG4() {
return D_REMITREG4;
}

public byte getD_REMITUSUAL1() {
return D_REMITUSUAL1;
}

public byte getD_REMITUSUAL2() {
return D_REMITUSUAL2;
}

public byte getD_REMITUSUAL3() {
return D_REMITUSUAL3;
}

public byte getD_REMITUSUAL4() {
return D_REMITUSUAL4;
}

public boolean getD_RESPF16() {
return D_RESPF16;
}

public boolean getD_RESPF16_DV() {
return D_RESPF16_DV;
}

public boolean getD_RESPM16() {
return D_RESPM16;
}

public boolean getD_RESPM16_DV() {
return D_RESPM16_DV;
}

public byte getD_RETAMT() {
return D_RETAMT;
}

public byte getD_RETCHK() {
return D_RETCHK;
}

public byte getD_RETSUF() {
return D_RETSUF;
}

public byte getD_RHLAND_CODE() {
return D_RHLAND_CODE;
}

public byte getD_RLCHARITY() {
return D_RLCHARITY;
}

public byte getD_RLDRNK() {
return D_RLDRNK;
}

public byte getD_RLEAT() {
return D_RLEAT;
}

public byte getD_RLFRIENDS() {
return D_RLFRIENDS;
}

public byte getD_RLJOB() {
return D_RLJOB;
}

public byte getD_RLJOBY1() {
return D_RLJOBY1;
}

public byte getD_RLJOBY2() {
return D_RLJOBY2;
}

public byte getD_RLJOBY3() {
return D_RLJOBY3;
}

public byte getD_RLJOBY4() {
return D_RLJOBY4;
}

public byte getD_RLJOBY5() {
return D_RLJOBY5;
}

public byte getD_RLJOBY6() {
return D_RLJOBY6;
}

public byte getD_RLJOBY97() {
return D_RLJOBY97;
}

public byte getD_RLMARG() {
return D_RLMARG;
}

public byte getD_RLSAVE() {
return D_RLSAVE;
}

public byte getD_RLSCHL() {
return D_RLSCHL;
}

public byte getD_RLWEAR() {
return D_RLWEAR;
}

public byte getD_RPHMOB_CODE() {
return D_RPHMOB_CODE;
}

public byte getD_RPHWRK_CODE() {
return D_RPHWRK_CODE;
}

public byte getD_RTCON1() {
return D_RTCON1;
}

public byte getD_RTCON2() {
return D_RTCON2;
}

public byte getD_RTCON3() {
return D_RTCON3;
}

public byte getD_RTCON4() {
return D_RTCON4;
}

public byte getD_RTEXPJB() {
return D_RTEXPJB;
}

public byte getD_RTFND1() {
return D_RTFND1;
}

public byte getD_RTFND10() {
return D_RTFND10;
}

public byte getD_RTFND2() {
return D_RTFND2;
}

public byte getD_RTFND3() {
return D_RTFND3;
}

public byte getD_RTFND4() {
return D_RTFND4;
}

public byte getD_RTFND5() {
return D_RTFND5;
}

public byte getD_RTFND6() {
return D_RTFND6;
}

public byte getD_RTFND7() {
return D_RTFND7;
}

public byte getD_RTFND8() {
return D_RTFND8;
}

public byte getD_RTFND9() {
return D_RTFND9;
}

public byte getD_RTFND96() {
return D_RTFND96;
}

public byte getD_RTPRO1() {
return D_RTPRO1;
}

public byte getD_RTPRO2() {
return D_RTPRO2;
}

public byte getD_RTPRO3() {
return D_RTPRO3;
}

public byte getD_RTPRO4() {
return D_RTPRO4;
}

public byte getD_RTPRO5() {
return D_RTPRO5;
}

public byte getD_RTPRO6() {
return D_RTPRO6;
}

public byte getD_SAMEJOB() {
return D_SAMEJOB;
}

public byte getD_SAMPST() {
return D_SAMPST;
}

public byte getD_SAVDOCS() {
return D_SAVDOCS;
}

public byte getD_SAVE() {
return D_SAVE;
}

public int getD_SAVED() {
return D_SAVED;
}

public byte getD_SAVLT() {
return D_SAVLT;
}

public byte getD_SAVREG() {
return D_SAVREG;
}

public byte getD_SCAC() {
return D_SCAC;
}

public byte getD_SCEND() {
return D_SCEND;
}

public byte getD_SCENV_BCCC() {
return D_SCENV_BCCC;
}

public byte getD_SCENV_CANC() {
return D_SCENV_CANC;
}

public byte getD_SCENV_CREX() {
return D_SCENV_CREX;
}

public byte getD_SCENV_CRLF() {
return D_SCENV_CRLF;
}

public byte getD_SCENV_FITL() {
return D_SCENV_FITL;
}

public byte getD_SCENV_FTST() {
return D_SCENV_FTST;
}

public byte getD_SCENV_GRN() {
return D_SCENV_GRN;
}

public byte getD_SCENV_MEDS() {
return D_SCENV_MEDS;
}

public byte getD_SCENV_NOOT() {
return D_SCENV_NOOT;
}

public byte getD_SCENV_NOWO() {
return D_SCENV_NOWO;
}

public byte getD_SCENV_PMEP() {
return D_SCENV_PMEP;
}

public byte getD_SCENV_TLAT() {
return D_SCENV_TLAT;
}

public boolean getD_SCFLAG_DV() {
return D_SCFLAG_DV;
}

public byte getD_SCGHQ1_DV() {
return D_SCGHQ1_DV;
}

public byte getD_SCGHQ2_DV() {
return D_SCGHQ2_DV;
}

public byte getD_SCGHQA() {
return D_SCGHQA;
}

public byte getD_SCGHQB() {
return D_SCGHQB;
}

public byte getD_SCGHQC() {
return D_SCGHQC;
}

public byte getD_SCGHQD() {
return D_SCGHQD;
}

public byte getD_SCGHQE() {
return D_SCGHQE;
}

public byte getD_SCGHQF() {
return D_SCGHQF;
}

public byte getD_SCGHQG() {
return D_SCGHQG;
}

public byte getD_SCGHQH() {
return D_SCGHQH;
}

public byte getD_SCGHQI() {
return D_SCGHQI;
}

public byte getD_SCGHQJ() {
return D_SCGHQJ;
}

public byte getD_SCGHQK() {
return D_SCGHQK;
}

public byte getD_SCGHQL() {
return D_SCGHQL;
}

public byte getD_SCHLLOC() {
return D_SCHLLOC;
}

public byte getD_SCHOK() {
return D_SCHOK;
}

public byte getD_SCHOOL() {
return D_SCHOOL;
}

public byte getD_SCHOOLCNTRY1() {
return D_SCHOOLCNTRY1;
}

public byte getD_SCHOOLCNTRY2() {
return D_SCHOOLCNTRY2;
}

public byte getD_SCHOOLCNTRY3() {
return D_SCHOOLCNTRY3;
}

public byte getD_SCHOOLCNTRY4() {
return D_SCHOOLCNTRY4;
}

public byte getD_SCHOOLCNTRY5() {
return D_SCHOOLCNTRY5;
}

public byte getD_SCLFSAT1() {
return D_SCLFSAT1;
}

public byte getD_SCLFSAT2() {
return D_SCLFSAT2;
}

public byte getD_SCLFSAT7() {
return D_SCLFSAT7;
}

public byte getD_SCLFSATO() {
return D_SCLFSATO;
}

public byte getD_SCOPECL200() {
return D_SCOPECL200;
}

public byte getD_SCOPECL30() {
return D_SCOPECL30;
}

public byte getD_SCOPFAMA() {
return D_SCOPFAMA;
}

public byte getD_SCOPFAMB() {
return D_SCOPFAMB;
}

public byte getD_SCOPFAMD() {
return D_SCOPFAMD;
}

public byte getD_SCOPFAMF() {
return D_SCOPFAMF;
}

public byte getD_SCOPFAMH() {
return D_SCOPFAMH;
}

public byte getD_SCRF1() {
return D_SCRF1;
}

public byte getD_SCRF2() {
return D_SCRF2;
}

public byte getD_SCRF3() {
return D_SCRF3;
}

public byte getD_SCRF4() {
return D_SCRF4;
}

public byte getD_SCRF5() {
return D_SCRF5;
}

public byte getD_SCRF6() {
return D_SCRF6;
}

public byte getD_SCRF97() {
return D_SCRF97;
}

public byte getD_SCRX_CODE() {
return D_SCRX_CODE;
}

public byte getD_SCSF1() {
return D_SCSF1;
}

public byte getD_SCSF2A() {
return D_SCSF2A;
}

public byte getD_SCSF2B() {
return D_SCSF2B;
}

public byte getD_SCSF3A() {
return D_SCSF3A;
}

public byte getD_SCSF3B() {
return D_SCSF3B;
}

public byte getD_SCSF4A() {
return D_SCSF4A;
}

public byte getD_SCSF4B() {
return D_SCSF4B;
}

public byte getD_SCSF5() {
return D_SCSF5;
}

public byte getD_SCSF6A() {
return D_SCSF6A;
}

public byte getD_SCSF6B() {
return D_SCSF6B;
}

public byte getD_SCSF6C() {
return D_SCSF6C;
}

public byte getD_SCSF7() {
return D_SCSF7;
}

public byte getD_SCUN1() {
return D_SCUN1;
}

public byte getD_SCUN2() {
return D_SCUN2;
}

public byte getD_SCUN3() {
return D_SCUN3;
}

public byte getD_SCUN97() {
return D_SCUN97;
}

public byte getD_SCUX_CODE() {
return D_SCUX_CODE;
}

public byte getD_SCWEMWBA() {
return D_SCWEMWBA;
}

public byte getD_SCWEMWBB() {
return D_SCWEMWBB;
}

public byte getD_SCWEMWBC() {
return D_SCWEMWBC;
}

public byte getD_SCWEMWBD() {
return D_SCWEMWBD;
}

public byte getD_SCWEMWBE() {
return D_SCWEMWBE;
}

public byte getD_SCWEMWBF() {
return D_SCWEMWBF;
}

public byte getD_SCWEMWBG() {
return D_SCWEMWBG;
}

public byte getD_SCWKIMP() {
return D_SCWKIMP;
}

public byte getD_SCWKOR1() {
return D_SCWKOR1;
}

public byte getD_SCWKOR10() {
return D_SCWKOR10;
}

public byte getD_SCWKOR11() {
return D_SCWKOR11;
}

public byte getD_SCWKOR12() {
return D_SCWKOR12;
}

public byte getD_SCWKOR13() {
return D_SCWKOR13;
}

public byte getD_SCWKOR14() {
return D_SCWKOR14;
}

public byte getD_SCWKOR15() {
return D_SCWKOR15;
}

public byte getD_SCWKOR2() {
return D_SCWKOR2;
}

public byte getD_SCWKOR3() {
return D_SCWKOR3;
}

public byte getD_SCWKOR4() {
return D_SCWKOR4;
}

public byte getD_SCWKOR5() {
return D_SCWKOR5;
}

public byte getD_SCWKOR6() {
return D_SCWKOR6;
}

public byte getD_SCWKOR7() {
return D_SCWKOR7;
}

public byte getD_SCWKOR8() {
return D_SCWKOR8;
}

public byte getD_SCWKOR9() {
return D_SCWKOR9;
}

protected double D_SEEARNGRS_DV() {
return D_SEEARNGRS_DV;
}

public byte getD_SEEARNGRS_IF() {
return D_SEEARNGRS_IF;
}

protected double D_SEEARNNET_DV() {
return D_SEEARNNET_DV;
}

public byte getD_SERVUSE1() {
return D_SERVUSE1;
}

public byte getD_SERVUSE10() {
return D_SERVUSE10;
}

public byte getD_SERVUSE2() {
return D_SERVUSE2;
}

public byte getD_SERVUSE3() {
return D_SERVUSE3;
}

public byte getD_SERVUSE4() {
return D_SERVUSE4;
}

public byte getD_SERVUSE5() {
return D_SERVUSE5;
}

public byte getD_SERVUSE6() {
return D_SERVUSE6;
}

public byte getD_SERVUSE7() {
return D_SERVUSE7;
}

public byte getD_SERVUSE8() {
return D_SERVUSE8;
}

public byte getD_SERVUSE9() {
return D_SERVUSE9;
}

public byte getD_SERVUSE96() {
return D_SERVUSE96;
}

public boolean getD_SEX() {
return D_SEX;
}

public byte getD_SEX_DV() {
return D_SEX_DV;
}

public byte getD_SF1() {
return D_SF1;
}

protected double D_SF12MCS_DV() {
return D_SF12MCS_DV;
}

protected double D_SF12PCS_DV() {
return D_SF12PCS_DV;
}

public byte getD_SIGNEDUCKIDS1() {
return D_SIGNEDUCKIDS1;
}

public byte getD_SIGNEDUCKIDS2() {
return D_SIGNEDUCKIDS2;
}

public byte getD_SIGNHEALTHKI1() {
return D_SIGNHEALTHKI1;
}

public byte getD_SIGNHEALTHKI2() {
return D_SIGNHEALTHKI2;
}

public boolean getD_SINGLE_DV() {
return D_SINGLE_DV;
}

public byte getD_SLP_QUAL() {
return D_SLP_QUAL;
}

public byte getD_SMKMNTH11() {
return D_SMKMNTH11;
}

public boolean getD_SMKMNTH12() {
return D_SMKMNTH12;
}

public boolean getD_SMKMNTH13() {
return D_SMKMNTH13;
}

public boolean getD_SMKMNTH14() {
return D_SMKMNTH14;
}

public byte getD_SMKMNTH21() {
return D_SMKMNTH21;
}

public boolean getD_SMKMNTH22() {
return D_SMKMNTH22;
}

public boolean getD_SMKMNTH23() {
return D_SMKMNTH23;
}

public boolean getD_SMKMNTH24() {
return D_SMKMNTH24;
}

public byte getD_SMKMNTH31() {
return D_SMKMNTH31;
}

public boolean getD_SMKMNTH32() {
return D_SMKMNTH32;
}

public boolean getD_SMKMNTH33() {
return D_SMKMNTH33;
}

public boolean getD_SMKMNTH34() {
return D_SMKMNTH34;
}

public byte getD_SMOFRQ() {
return D_SMOFRQ;
}

public byte getD_SOCCONT() {
return D_SOCCONT;
}

public byte getD_SPPEN() {
return D_SPPEN;
}

public int getD_SPPID() {
return D_SPPID;
}

public byte getD_SPPNO() {
return D_SPPNO;
}

public byte getD_SRVYNOT1() {
return D_SRVYNOT1;
}

public byte getD_SRVYNOT10() {
return D_SRVYNOT10;
}

public byte getD_SRVYNOT2() {
return D_SRVYNOT2;
}

public byte getD_SRVYNOT3() {
return D_SRVYNOT3;
}

public byte getD_SRVYNOT4() {
return D_SRVYNOT4;
}

public byte getD_SRVYNOT5() {
return D_SRVYNOT5;
}

public byte getD_SRVYNOT6() {
return D_SRVYNOT6;
}

public byte getD_SRVYNOT7() {
return D_SRVYNOT7;
}

public byte getD_SRVYNOT8() {
return D_SRVYNOT8;
}

public byte getD_SRVYNOT9() {
return D_SRVYNOT9;
}

public byte getD_STATCM1() {
return D_STATCM1;
}

public byte getD_STATCM2() {
return D_STATCM2;
}

public byte getD_STATCM3() {
return D_STATCM3;
}

public short getD_STATCY41() {
return D_STATCY41;
}

public short getD_STATCY42() {
return D_STATCY42;
}

public short getD_STATCY43() {
return D_STATCY43;
}

public byte getD_STATENDD1() {
return D_STATENDD1;
}

public byte getD_STATENDD2() {
return D_STATENDD2;
}

public byte getD_STATENDD3() {
return D_STATENDD3;
}

public byte getD_STATENDD4() {
return D_STATENDD4;
}

public byte getD_STATENDD5() {
return D_STATENDD5;
}

public boolean getD_STATENDD6() {
return D_STATENDD6;
}

public byte getD_STATENDM1() {
return D_STATENDM1;
}

public byte getD_STATENDM2() {
return D_STATENDM2;
}

public byte getD_STATENDM3() {
return D_STATENDM3;
}

public byte getD_STATENDM4() {
return D_STATENDM4;
}

public byte getD_STATENDM5() {
return D_STATENDM5;
}

public boolean getD_STATENDM6() {
return D_STATENDM6;
}

public short getD_STATENDY41() {
return D_STATENDY41;
}

public short getD_STATENDY42() {
return D_STATENDY42;
}

public short getD_STATENDY43() {
return D_STATENDY43;
}

public short getD_STATENDY44() {
return D_STATENDY44;
}

public short getD_STATENDY45() {
return D_STATENDY45;
}

public boolean getD_STATENDY46() {
return D_STATENDY46;
}

public byte getD_STENDREAS() {
return D_STENDREAS;
}

public short getD_STRATA() {
return D_STRATA;
}

public byte getD_SUSP() {
return D_SUSP;
}

public byte getD_SVACTS1() {
return D_SVACTS1;
}

public byte getD_SVACTS2() {
return D_SVACTS2;
}

public byte getD_SVACTS3() {
return D_SVACTS3;
}

public byte getD_SVACTS4() {
return D_SVACTS4;
}

public byte getD_SVACTS5() {
return D_SVACTS5;
}

public byte getD_SVACTS96() {
return D_SVACTS96;
}

public byte getD_SVACTS97() {
return D_SVACTS97;
}

public int getD_SVAMT1() {
return D_SVAMT1;
}

public int getD_SVAMT2() {
return D_SVAMT2;
}

public int getD_SVAMT3() {
return D_SVAMT3;
}

public int getD_SVAMT4() {
return D_SVAMT4;
}

public int getD_SVAMT5() {
return D_SVAMT5;
}

public int getD_SVAMT6() {
return D_SVAMT6;
}

public byte getD_SVB1_1() {
return D_SVB1_1;
}

public byte getD_SVB1_2() {
return D_SVB1_2;
}

public byte getD_SVB1_3() {
return D_SVB1_3;
}

public byte getD_SVB1_4() {
return D_SVB1_4;
}

public byte getD_SVB1_5() {
return D_SVB1_5;
}

public byte getD_SVB1_6() {
return D_SVB1_6;
}

public byte getD_SVB2_1() {
return D_SVB2_1;
}

public byte getD_SVB2_2() {
return D_SVB2_2;
}

public byte getD_SVB2_3() {
return D_SVB2_3;
}

public byte getD_SVB2_4() {
return D_SVB2_4;
}

public byte getD_SVB2_5() {
return D_SVB2_5;
}

public byte getD_SVB2_6() {
return D_SVB2_6;
}

public byte getD_SVB3_1() {
return D_SVB3_1;
}

public byte getD_SVB3_2() {
return D_SVB3_2;
}

public byte getD_SVB3_3() {
return D_SVB3_3;
}

public byte getD_SVB3_4() {
return D_SVB3_4;
}

public byte getD_SVB3_5() {
return D_SVB3_5;
}

public byte getD_SVB3_6() {
return D_SVB3_6;
}

public byte getD_SVB4_1() {
return D_SVB4_1;
}

public byte getD_SVB4_2() {
return D_SVB4_2;
}

public byte getD_SVB4_3() {
return D_SVB4_3;
}

public byte getD_SVB4_4() {
return D_SVB4_4;
}

public byte getD_SVB4_5() {
return D_SVB4_5;
}

public byte getD_SVB4_6() {
return D_SVB4_6;
}

public byte getD_SVB5_1() {
return D_SVB5_1;
}

public byte getD_SVB5_2() {
return D_SVB5_2;
}

public byte getD_SVB5_3() {
return D_SVB5_3;
}

public byte getD_SVB5_4() {
return D_SVB5_4;
}

public byte getD_SVB5_5() {
return D_SVB5_5;
}

public byte getD_SVB5_6() {
return D_SVB5_6;
}

public byte getD_SVPN0_1() {
return D_SVPN0_1;
}

public byte getD_SVPN0_2() {
return D_SVPN0_2;
}

public boolean getD_SVPN0_3() {
return D_SVPN0_3;
}

public boolean getD_SVPN0_4() {
return D_SVPN0_4;
}

public boolean getD_SVPN0_5() {
return D_SVPN0_5;
}

public boolean getD_SVPN0_6() {
return D_SVPN0_6;
}

public byte getD_SVPN10_1() {
return D_SVPN10_1;
}

public byte getD_SVPN10_2() {
return D_SVPN10_2;
}

public boolean getD_SVPN10_3() {
return D_SVPN10_3;
}

public boolean getD_SVPN10_4() {
return D_SVPN10_4;
}

public boolean getD_SVPN10_5() {
return D_SVPN10_5;
}

public boolean getD_SVPN10_6() {
return D_SVPN10_6;
}

public byte getD_SVPN11_1() {
return D_SVPN11_1;
}

public byte getD_SVPN11_2() {
return D_SVPN11_2;
}

public boolean getD_SVPN11_3() {
return D_SVPN11_3;
}

public boolean getD_SVPN11_4() {
return D_SVPN11_4;
}

public boolean getD_SVPN11_5() {
return D_SVPN11_5;
}

public boolean getD_SVPN11_6() {
return D_SVPN11_6;
}

public byte getD_SVPN12_1() {
return D_SVPN12_1;
}

public byte getD_SVPN12_2() {
return D_SVPN12_2;
}

public boolean getD_SVPN12_3() {
return D_SVPN12_3;
}

public boolean getD_SVPN12_4() {
return D_SVPN12_4;
}

public boolean getD_SVPN12_5() {
return D_SVPN12_5;
}

public boolean getD_SVPN12_6() {
return D_SVPN12_6;
}

public byte getD_SVPN13_1() {
return D_SVPN13_1;
}

public byte getD_SVPN13_2() {
return D_SVPN13_2;
}

public boolean getD_SVPN13_3() {
return D_SVPN13_3;
}

public boolean getD_SVPN13_4() {
return D_SVPN13_4;
}

public boolean getD_SVPN13_5() {
return D_SVPN13_5;
}

public boolean getD_SVPN13_6() {
return D_SVPN13_6;
}

public byte getD_SVPN14_1() {
return D_SVPN14_1;
}

public byte getD_SVPN14_2() {
return D_SVPN14_2;
}

public boolean getD_SVPN14_3() {
return D_SVPN14_3;
}

public boolean getD_SVPN14_4() {
return D_SVPN14_4;
}

public boolean getD_SVPN14_5() {
return D_SVPN14_5;
}

public boolean getD_SVPN14_6() {
return D_SVPN14_6;
}

public byte getD_SVPN15_1() {
return D_SVPN15_1;
}

public byte getD_SVPN15_2() {
return D_SVPN15_2;
}

public boolean getD_SVPN15_3() {
return D_SVPN15_3;
}

public boolean getD_SVPN15_4() {
return D_SVPN15_4;
}

public boolean getD_SVPN15_5() {
return D_SVPN15_5;
}

public boolean getD_SVPN15_6() {
return D_SVPN15_6;
}

public byte getD_SVPN16_1() {
return D_SVPN16_1;
}

public byte getD_SVPN16_2() {
return D_SVPN16_2;
}

public boolean getD_SVPN16_3() {
return D_SVPN16_3;
}

public boolean getD_SVPN16_4() {
return D_SVPN16_4;
}

public boolean getD_SVPN16_5() {
return D_SVPN16_5;
}

public boolean getD_SVPN16_6() {
return D_SVPN16_6;
}

public byte getD_SVPN1_1() {
return D_SVPN1_1;
}

public byte getD_SVPN1_2() {
return D_SVPN1_2;
}

public boolean getD_SVPN1_3() {
return D_SVPN1_3;
}

public boolean getD_SVPN1_4() {
return D_SVPN1_4;
}

public boolean getD_SVPN1_5() {
return D_SVPN1_5;
}

public boolean getD_SVPN1_6() {
return D_SVPN1_6;
}

public byte getD_SVPN2_1() {
return D_SVPN2_1;
}

public byte getD_SVPN2_2() {
return D_SVPN2_2;
}

public boolean getD_SVPN2_3() {
return D_SVPN2_3;
}

public boolean getD_SVPN2_4() {
return D_SVPN2_4;
}

public boolean getD_SVPN2_5() {
return D_SVPN2_5;
}

public boolean getD_SVPN2_6() {
return D_SVPN2_6;
}

public byte getD_SVPN3_1() {
return D_SVPN3_1;
}

public byte getD_SVPN3_2() {
return D_SVPN3_2;
}

public boolean getD_SVPN3_3() {
return D_SVPN3_3;
}

public boolean getD_SVPN3_4() {
return D_SVPN3_4;
}

public boolean getD_SVPN3_5() {
return D_SVPN3_5;
}

public boolean getD_SVPN3_6() {
return D_SVPN3_6;
}

public byte getD_SVPN4_1() {
return D_SVPN4_1;
}

public byte getD_SVPN4_2() {
return D_SVPN4_2;
}

public boolean getD_SVPN4_3() {
return D_SVPN4_3;
}

public boolean getD_SVPN4_4() {
return D_SVPN4_4;
}

public boolean getD_SVPN4_5() {
return D_SVPN4_5;
}

public boolean getD_SVPN4_6() {
return D_SVPN4_6;
}

public byte getD_SVPN5_1() {
return D_SVPN5_1;
}

public byte getD_SVPN5_2() {
return D_SVPN5_2;
}

public boolean getD_SVPN5_3() {
return D_SVPN5_3;
}

public boolean getD_SVPN5_4() {
return D_SVPN5_4;
}

public boolean getD_SVPN5_5() {
return D_SVPN5_5;
}

public boolean getD_SVPN5_6() {
return D_SVPN5_6;
}

public byte getD_SVPN6_1() {
return D_SVPN6_1;
}

public byte getD_SVPN6_2() {
return D_SVPN6_2;
}

public boolean getD_SVPN6_3() {
return D_SVPN6_3;
}

public boolean getD_SVPN6_4() {
return D_SVPN6_4;
}

public boolean getD_SVPN6_5() {
return D_SVPN6_5;
}

public boolean getD_SVPN6_6() {
return D_SVPN6_6;
}

public byte getD_SVPN7_1() {
return D_SVPN7_1;
}

public byte getD_SVPN7_2() {
return D_SVPN7_2;
}

public boolean getD_SVPN7_3() {
return D_SVPN7_3;
}

public boolean getD_SVPN7_4() {
return D_SVPN7_4;
}

public boolean getD_SVPN7_5() {
return D_SVPN7_5;
}

public boolean getD_SVPN7_6() {
return D_SVPN7_6;
}

public byte getD_SVPN8_1() {
return D_SVPN8_1;
}

public byte getD_SVPN8_2() {
return D_SVPN8_2;
}

public boolean getD_SVPN8_3() {
return D_SVPN8_3;
}

public boolean getD_SVPN8_4() {
return D_SVPN8_4;
}

public boolean getD_SVPN8_5() {
return D_SVPN8_5;
}

public boolean getD_SVPN8_6() {
return D_SVPN8_6;
}

public byte getD_SVPN9_1() {
return D_SVPN9_1;
}

public byte getD_SVPN9_2() {
return D_SVPN9_2;
}

public boolean getD_SVPN9_3() {
return D_SVPN9_3;
}

public boolean getD_SVPN9_4() {
return D_SVPN9_4;
}

public boolean getD_SVPN9_5() {
return D_SVPN9_5;
}

public boolean getD_SVPN9_6() {
return D_SVPN9_6;
}

public byte getD_SVSJ1() {
return D_SVSJ1;
}

public byte getD_SVSJ2() {
return D_SVSJ2;
}

public boolean getD_SVSJ3() {
return D_SVSJ3;
}

public boolean getD_SVSJ4() {
return D_SVSJ4;
}

public boolean getD_SVSJ5() {
return D_SVSJ5;
}

public boolean getD_SVSJ6() {
return D_SVSJ6;
}

public int getD_SVSK1() {
return D_SVSK1;
}

public int getD_SVSK2() {
return D_SVSK2;
}

public boolean getD_SVSK3() {
return D_SVSK3;
}

public boolean getD_SVSK4() {
return D_SVSK4;
}

public boolean getD_SVSK5() {
return D_SVSK5;
}

public boolean getD_SVSK6() {
return D_SVSK6;
}

public byte getD_SWEMWBS_DV() {
return D_SWEMWBS_DV;
}

public byte getD_TF_JBSEMP() {
return D_TF_JBSEMP;
}

public short getD_TMTIME() {
return D_TMTIME;
}

public byte getD_TRAINANY() {
return D_TRAINANY;
}

public short getD_TRAINDAYS1() {
return D_TRAINDAYS1;
}

public short getD_TRAINDAYS2() {
return D_TRAINDAYS2;
}

public short getD_TRAINDAYS3() {
return D_TRAINDAYS3;
}

public byte getD_TRAINEND1() {
return D_TRAINEND1;
}

public byte getD_TRAINEND2() {
return D_TRAINEND2;
}

public byte getD_TRAINEND3() {
return D_TRAINEND3;
}

public byte getD_TRAINHRS1() {
return D_TRAINHRS1;
}

public byte getD_TRAINHRS2() {
return D_TRAINHRS2;
}

public byte getD_TRAINHRS3() {
return D_TRAINHRS3;
}

public byte getD_TRAINN() {
return D_TRAINN;
}

public byte getD_TRAINPURP11() {
return D_TRAINPURP11;
}

public byte getD_TRAINPURP12() {
return D_TRAINPURP12;
}

public byte getD_TRAINPURP13() {
return D_TRAINPURP13;
}

public byte getD_TRAINPURP21() {
return D_TRAINPURP21;
}

public byte getD_TRAINPURP22() {
return D_TRAINPURP22;
}

public byte getD_TRAINPURP23() {
return D_TRAINPURP23;
}

public byte getD_TRAINPURP31() {
return D_TRAINPURP31;
}

public byte getD_TRAINPURP32() {
return D_TRAINPURP32;
}

public byte getD_TRAINPURP33() {
return D_TRAINPURP33;
}

public byte getD_TRAINPURP41() {
return D_TRAINPURP41;
}

public byte getD_TRAINPURP42() {
return D_TRAINPURP42;
}

public byte getD_TRAINPURP43() {
return D_TRAINPURP43;
}

public byte getD_TRAINPURP51() {
return D_TRAINPURP51;
}

public byte getD_TRAINPURP52() {
return D_TRAINPURP52;
}

public byte getD_TRAINPURP53() {
return D_TRAINPURP53;
}

public byte getD_TRAINPURP61() {
return D_TRAINPURP61;
}

public byte getD_TRAINPURP62() {
return D_TRAINPURP62;
}

public byte getD_TRAINPURP63() {
return D_TRAINPURP63;
}

public byte getD_TRAINPURP71() {
return D_TRAINPURP71;
}

public byte getD_TRAINPURP72() {
return D_TRAINPURP72;
}

public byte getD_TRAINPURP73() {
return D_TRAINPURP73;
}

public byte getD_TRAINQUAL1() {
return D_TRAINQUAL1;
}

public byte getD_TRAINQUAL2() {
return D_TRAINQUAL2;
}

public byte getD_TRAINQUAL3() {
return D_TRAINQUAL3;
}

public byte getD_TRBIKEFQ() {
return D_TRBIKEFQ;
}

public byte getD_TRBUSFQ() {
return D_TRBUSFQ;
}

public byte getD_TRCARFQ() {
return D_TRCARFQ;
}

public byte getD_TRQUAL1() {
return D_TRQUAL1;
}

public byte getD_TRQUAL10() {
return D_TRQUAL10;
}

public byte getD_TRQUAL11() {
return D_TRQUAL11;
}

public byte getD_TRQUAL13() {
return D_TRQUAL13;
}

public byte getD_TRQUAL15() {
return D_TRQUAL15;
}

public byte getD_TRQUAL16() {
return D_TRQUAL16;
}

public byte getD_TRQUAL17() {
return D_TRQUAL17;
}

public byte getD_TRQUAL18() {
return D_TRQUAL18;
}

public byte getD_TRQUAL19() {
return D_TRQUAL19;
}

public byte getD_TRQUAL2() {
return D_TRQUAL2;
}

public byte getD_TRQUAL20() {
return D_TRQUAL20;
}

public byte getD_TRQUAL21() {
return D_TRQUAL21;
}

public byte getD_TRQUAL22() {
return D_TRQUAL22;
}

public byte getD_TRQUAL23() {
return D_TRQUAL23;
}

public byte getD_TRQUAL24() {
return D_TRQUAL24;
}

public byte getD_TRQUAL25() {
return D_TRQUAL25;
}

public byte getD_TRQUAL26() {
return D_TRQUAL26;
}

public byte getD_TRQUAL27() {
return D_TRQUAL27;
}

public byte getD_TRQUAL28() {
return D_TRQUAL28;
}

public byte getD_TRQUAL29() {
return D_TRQUAL29;
}

public byte getD_TRQUAL3() {
return D_TRQUAL3;
}

public byte getD_TRQUAL30() {
return D_TRQUAL30;
}

public byte getD_TRQUAL31() {
return D_TRQUAL31;
}

public byte getD_TRQUAL4() {
return D_TRQUAL4;
}

public byte getD_TRQUAL5() {
return D_TRQUAL5;
}

public byte getD_TRQUAL6() {
return D_TRQUAL6;
}

public byte getD_TRQUAL7() {
return D_TRQUAL7;
}

public byte getD_TRQUAL8() {
return D_TRQUAL8;
}

public byte getD_TRQUAL9() {
return D_TRQUAL9;
}

public byte getD_TRTRNFQ() {
return D_TRTRNFQ;
}

public byte getD_TRWHO1() {
return D_TRWHO1;
}

public byte getD_TRWHO2() {
return D_TRWHO2;
}

public byte getD_TRWHO3() {
return D_TRWHO3;
}

public byte getD_TSLP_30M() {
return D_TSLP_30M;
}

public byte getD_TSLP_CGH() {
return D_TSLP_CGH;
}

public byte getD_TSLP_WAK() {
return D_TSLP_WAK;
}

public byte getD_TSTA_AWK() {
return D_TSTA_AWK;
}

public byte getD_TUIN1() {
return D_TUIN1;
}

public byte getD_TUJBPL() {
return D_TUJBPL;
}

public byte getD_TWKCAR() {
return D_TWKCAR;
}

public byte getD_TWKDIFF1() {
return D_TWKDIFF1;
}

public byte getD_TWKDIFF2() {
return D_TWKDIFF2;
}

public byte getD_TWKDIFF3() {
return D_TWKDIFF3;
}

public byte getD_TWKDIFF4() {
return D_TWKDIFF4;
}

public byte getD_TWKDIFF5() {
return D_TWKDIFF5;
}

public byte getD_TWKDIFF6() {
return D_TWKDIFF6;
}

public byte getD_TWKDIFF7() {
return D_TWKDIFF7;
}

public byte getD_TWKDIFF8() {
return D_TWKDIFF8;
}

public byte getD_TWKDIFF97() {
return D_TWKDIFF97;
}

public byte getD_TWKDIFFM() {
return D_TWKDIFFM;
}

public byte getD_UKBORN() {
return D_UKBORN;
}

public byte getD_UNDQUS() {
return D_UNDQUS;
}

public byte getD_UNUSEXP() {
return D_UNUSEXP;
}

public byte getD_UPSET() {
return D_UPSET;
}

public byte getD_URBAN_DV() {
return D_URBAN_DV;
}

public byte getD_VOLFREQ() {
return D_VOLFREQ;
}

public short getD_VOLHRS() {
return D_VOLHRS;
}

public byte getD_VOLUN() {
return D_VOLUN;
}

public byte getD_VOTE1() {
return D_VOTE1;
}

public byte getD_VOTE2() {
return D_VOTE2;
}

public byte getD_VOTE3() {
return D_VOTE3;
}

public byte getD_VOTE4() {
return D_VOTE4;
}

public byte getD_VOTE5() {
return D_VOTE5;
}

public byte getD_VOTE6() {
return D_VOTE6;
}

public byte getD_WHORUAGE() {
return D_WHORUAGE;
}

public byte getD_WHORUEDU() {
return D_WHORUEDU;
}

public byte getD_WHORUFAM() {
return D_WHORUFAM;
}

public byte getD_WHORUPOL() {
return D_WHORUPOL;
}

public byte getD_WHORUPRO() {
return D_WHORUPRO;
}

public byte getD_WHORURAC() {
return D_WHORURAC;
}

public byte getD_WHORUSEX() {
return D_WHORUSEX;
}

public byte getD_WKAUT1() {
return D_WKAUT1;
}

public byte getD_WKAUT2() {
return D_WKAUT2;
}

public byte getD_WKAUT3() {
return D_WKAUT3;
}

public byte getD_WKAUT4() {
return D_WKAUT4;
}

public byte getD_WKAUT5() {
return D_WKAUT5;
}

public byte getD_WKENDS() {
return D_WKENDS;
}

public byte getD_WKPLSAM() {
return D_WKPLSAM;
}

public byte getD_WKTIME() {
return D_WKTIME;
}

public short getD_WORKDIS() {
return D_WORKDIS;
}

public byte getD_WORKTRAV() {
return D_WORKTRAV;
}

public byte getD_XPMOVE() {
return D_XPMOVE;
}

public byte getD_XPMVMNTH() {
return D_XPMVMNTH;
}

public byte getD_XPMVWHN() {
return D_XPMVWHN;
}

public byte getD_XPMVWHR() {
return D_XPMVWHR;
}

public short getD_XPMVYR() {
return D_XPMVYR;
}

public byte getD_XTRA5MINOSM_DV() {
return D_XTRA5MINOSM_DV;
}

public byte getD_XTRA5MIN_DV() {
return D_XTRA5MIN_DV;
}

public byte getD_YAFUTA() {
return D_YAFUTA;
}

public byte getD_YAFUTB() {
return D_YAFUTB;
}

public byte getD_YAJBSRV1() {
return D_YAJBSRV1;
}

public byte getD_YAJBSRV2() {
return D_YAJBSRV2;
}

public byte getD_YAJBSRV3() {
return D_YAJBSRV3;
}

public byte getD_YAJBSRV4() {
return D_YAJBSRV4;
}

public byte getD_YAJBSRV5() {
return D_YAJBSRV5;
}

public byte getD_YAJBSRV7() {
return D_YAJBSRV7;
}

public byte getD_YAJBSRV8() {
return D_YAJBSRV8;
}

public byte getD_YAJBSRV96() {
return D_YAJBSRV96;
}

public byte getD_YANSSEC5_DV() {
return D_YANSSEC5_DV;
}

public short getD_YASOC00_CC() {
return D_YASOC00_CC;
}

public short getD_YASOC10_CC() {
return D_YASOC10_CC;
}

public byte getD_YASOC90_CC() {
return D_YASOC90_CC;
}

public byte getD_YNOTBIKE1() {
return D_YNOTBIKE1;
}

public byte getD_YNOTBIKE2() {
return D_YNOTBIKE2;
}

public byte getD_YNOTBIKE3() {
return D_YNOTBIKE3;
}

public byte getD_YNOTBIKE96() {
return D_YNOTBIKE96;
}

public byte getD_YPAMAR() {
return D_YPAMAR;
}

public byte getD_YPAPAR() {
return D_YPAPAR;
}

public byte getD_YPESTA() {
return D_YPESTA;
}

public byte getD_YPESTB() {
return D_YPESTB;
}

public byte getD_YPESTC() {
return D_YPESTC;
}

public byte getD_YPESTE() {
return D_YPESTE;
}

public byte getD_YPESTF() {
return D_YPESTF;
}

public byte getD_YPESTI() {
return D_YPESTI;
}

public byte getD_YPESTJ() {
return D_YPESTJ;
}

public byte getD_YPESTK() {
return D_YPESTK;
}

public byte getD_YPNETCHT() {
return D_YPNETCHT;
}

public byte getD_YPNPAL() {
return D_YPNPAL;
}

public byte getD_YPSOCWEB() {
return D_YPSOCWEB;
}

public short getD_YR2UK4() {
return D_YR2UK4;
}

public US_Wave4_HHOLD_Record(String line) {
s = line.split("\t");
initPIDP(s[0]);
initPID(s[1]);
initD_HIDP(s[2]);
initD_PNO(s[3]);
initD_CHILDPNO(s[4]);
initD_HHORIG(s[5]);
initD_MEMORIG(s[6]);
initD_PSU(s[7]);
initD_STRATA(s[8]);
initD_SAMPST(s[9]);
initD_MONTH(s[10]);
initD_IVFIO(s[11]);
initD_IOUTCOME(s[12]);
initD_SEX(s[13]);
initD_DVAGE(s[14]);
initD_BIRTHY(s[15]);
initD_CINDTIME(s[16]);
initD_TMTIME(s[17]);
initD_NCARS(s[18]);
initD_LVWHY(s[19]);
initD_LVMTHP(s[20]);
initD_LVYRP(s[21]);
initD_ISYEAR(s[22]);
initD_ADSTATUS(s[23]);
initD_PLIVPAR(s[24]);
initD_PSIBLINGS(s[25]);
initD_PPENSIONER(s[26]);
initD_TF_JBSEMP(s[27]);
initD_INOCONTACT(s[28]);
initD_NCH14RESP(s[29]);
initD_NCH3RESP(s[30]);
initD_NCH5RESP(s[31]);
initD_NCH8RESP(s[32]);
initD_NCH415RESP(s[33]);
initD_NCHRESP(s[34]);
initD_NCHUND18RESP(s[35]);
initD_NATCH01(s[36]);
initD_NATCH02(s[37]);
initD_NATCH03(s[38]);
initD_NATCH04(s[39]);
initD_NATCH05(s[40]);
initD_NATCH06(s[41]);
initD_NATCH07(s[42]);
initD_NATCH08(s[43]);
initD_NATCH09(s[44]);
initD_NATCH10(s[45]);
initD_NATCH11(s[46]);
initD_NATCH12(s[47]);
initD_NATCH13(s[48]);
initD_NATCH14(s[49]);
initD_NATCH15(s[50]);
initD_NATCH16(s[51]);
initD_NNATCH(s[52]);
initD_NADOPTCH(s[53]);
initD_ADOPTCH01(s[54]);
initD_ADOPTCH02(s[55]);
initD_ADOPTCH03(s[56]);
initD_ADOPTCH04(s[57]);
initD_ADOPTCH05(s[58]);
initD_ADOPTCH06(s[59]);
initD_ADOPTCH07(s[60]);
initD_ADOPTCH08(s[61]);
initD_ADOPTCH09(s[62]);
initD_ADOPTCH10(s[63]);
initD_ADOPTCH11(s[64]);
initD_ADOPTCH12(s[65]);
initD_ADOPTCH13(s[66]);
initD_ADOPTCH14(s[67]);
initD_ADOPTCH15(s[68]);
initD_ADOPTCH16(s[69]);
initD_NCHUNDER16(s[70]);
initD_NCH5TO15(s[71]);
initD_NCH10TO15(s[72]);
initD_NCH10(s[73]);
initD_FFBRFEDLW(s[74]);
initD_CHBRFED01(s[75]);
initD_CHBRFED02(s[76]);
initD_CHBRFED03(s[77]);
initD_CHBRFED04(s[78]);
initD_CHBRFED05(s[79]);
initD_CHBRFED06(s[80]);
initD_CHBRFED07(s[81]);
initD_CHBRFED08(s[82]);
initD_CHBRFED09(s[83]);
initD_CHBRFED10(s[84]);
initD_CHBRFED11(s[85]);
initD_CHBRFED12(s[86]);
initD_CHBRFED13(s[87]);
initD_CHBRFED14(s[88]);
initD_CHBRFED15(s[89]);
initD_CHBRFED16(s[90]);
initD_ALLCH01(s[91]);
initD_ALLCH02(s[92]);
initD_ALLCH03(s[93]);
initD_ALLCH04(s[94]);
initD_ALLCH05(s[95]);
initD_ALLCH06(s[96]);
initD_ALLCH07(s[97]);
initD_ALLCH08(s[98]);
initD_ALLCH09(s[99]);
initD_ALLCH10(s[100]);
initD_ALLCH11(s[101]);
initD_ALLCH12(s[102]);
initD_ALLCH13(s[103]);
initD_ALLCH14(s[104]);
initD_ALLCH15(s[105]);
initD_ALLCH16(s[106]);
initD_ISTRTDATY(s[107]);
initD_ISTRTDATM(s[108]);
initD_ISTRTDATD(s[109]);
initD_LIENG(s[110]);
initD_LITRANS(s[111]);
initD_LIWHO(s[112]);
initD_LIHOW(s[113]);
initD_CHKRESP(s[114]);
initD_MVEVER(s[115]);
initD_MVMNTH(s[116]);
initD_MVYR(s[117]);
initD_LKMOVE(s[118]);
initD_XPMVWHN(s[119]);
initD_XPMVMNTH(s[120]);
initD_XPMVWHR(s[121]);
initD_XPMOVE(s[122]);
initD_JBSTAT(s[123]);
initD_MLSTATCHK(s[124]);
initD_MLSTAT(s[125]);
initD_DRIVE(s[126]);
initD_CARUSE(s[127]);
initD_MOBUSE(s[128]);
initD_NETPUSE(s[129]);
initD_XPMVYR(s[130]);
initD_UKBORN(s[131]);
initD_PLBORNC(s[132]);
initD_YR2UK4(s[133]);
initD_CITZN1(s[134]);
initD_CITZN2(s[135]);
initD_CITZN3(s[136]);
initD_QFHIGH(s[137]);
initD_QUALOC(s[138]);
initD_QFVOC1(s[139]);
initD_QFVOC2(s[140]);
initD_QFVOC3(s[141]);
initD_QFVOC4(s[142]);
initD_QFVOC5(s[143]);
initD_QFVOC6(s[144]);
initD_QFVOC7(s[145]);
initD_QFVOC8(s[146]);
initD_QFVOC9(s[147]);
initD_QFVOC10(s[148]);
initD_QFVOC11(s[149]);
initD_QFVOC12(s[150]);
initD_QFVOC13(s[151]);
initD_QFVOC14(s[152]);
initD_QFVOC15(s[153]);
initD_QFVOC96(s[154]);
initD_SCHOOL(s[155]);
initD_SCEND(s[156]);
initD_SCHLLOC(s[157]);
initD_SCHOK(s[158]);
initD_FENOW(s[159]);
initD_FEEND(s[160]);
initD_EDTYPE(s[161]);
initD_EDASP(s[162]);
initD_LVSCHDO(s[163]);
initD_AHVWELL(s[164]);
initD_HEDLIK(s[165]);
initD_HEDNT(s[166]);
initD_J1NONE(s[167]);
initD_J1SEMP(s[168]);
initD_J1BOSS(s[169]);
initD_J1MNGR(s[170]);
initD_YPAMAR(s[171]);
initD_YPAPAR(s[172]);
initD_LVHM(s[173]);
initD_PAJU(s[174]);
initD_MAJU(s[175]);
initD_PACOB(s[176]);
initD_PAYRUK(s[177]);
initD_MACOB(s[178]);
initD_MAYRUK(s[179]);
initD_NATID1(s[180]);
initD_NATID2(s[181]);
initD_NATID3(s[182]);
initD_NATID4(s[183]);
initD_NATID5(s[184]);
initD_NATID6(s[185]);
initD_NATID97(s[186]);
initD_RACEL(s[187]);
initD_RACELO_CODE(s[188]);
initD_RACELT(s[189]);
initD_RACELWT(s[190]);
initD_RACELMT(s[191]);
initD_RACELAT(s[192]);
initD_RACELBT(s[193]);
initD_RACELOT_CODE(s[194]);
initD_OPRLG(s[195]);
initD_OPRLG0(s[196]);
initD_OPRLG1(s[197]);
initD_OPRLG0NI(s[198]);
initD_NIREL(s[199]);
initD_NIACT(s[200]);
initD_OPRLG2(s[201]);
initD_PRAYFREQ(s[202]);
initD_OPRLG3(s[203]);
initD_RLEAT(s[204]);
initD_RLDRNK(s[205]);
initD_RLWEAR(s[206]);
initD_RLMARG(s[207]);
initD_RLSCHL(s[208]);
initD_RLCHARITY(s[209]);
initD_RLSAVE(s[210]);
initD_RLFRIENDS(s[211]);
initD_RLJOB(s[212]);
initD_RLJOBY1(s[213]);
initD_RLJOBY2(s[214]);
initD_RLJOBY3(s[215]);
initD_RLJOBY4(s[216]);
initD_RLJOBY5(s[217]);
initD_RLJOBY6(s[218]);
initD_RLJOBY97(s[219]);
initD_SERVUSE1(s[220]);
initD_SERVUSE2(s[221]);
initD_SERVUSE3(s[222]);
initD_SERVUSE4(s[223]);
initD_SERVUSE5(s[224]);
initD_SERVUSE6(s[225]);
initD_SERVUSE7(s[226]);
initD_SERVUSE8(s[227]);
initD_SERVUSE9(s[228]);
initD_SERVUSE10(s[229]);
initD_SERVUSE96(s[230]);
initD_OPSERV1(s[231]);
initD_SRVYNOT1(s[232]);
initD_OPSERV2(s[233]);
initD_SRVYNOT2(s[234]);
initD_OPSERV3(s[235]);
initD_SRVYNOT3(s[236]);
initD_OPSERV4(s[237]);
initD_SRVYNOT4(s[238]);
initD_OPSERV5(s[239]);
initD_SRVYNOT5(s[240]);
initD_OPSERV6(s[241]);
initD_SRVYNOT6(s[242]);
initD_OPSERV7(s[243]);
initD_SRVYNOT7(s[244]);
initD_OPSERV8(s[245]);
initD_SRVYNOT8(s[246]);
initD_OPSERV9(s[247]);
initD_SRVYNOT9(s[248]);
initD_OPSERV10(s[249]);
initD_SRVYNOT10(s[250]);
initD_SF1(s[251]);
initD_HEALTH(s[252]);
initD_HOSPC1(s[253]);
initD_HOSPDC1(s[254]);
initD_HOSPC2(s[255]);
initD_HOSPDC2(s[256]);
initD_HOSPC3(s[257]);
initD_HOSPDC3(s[258]);
initD_HOSPC4(s[259]);
initD_HOSPDC4(s[260]);
initD_HOSPC5(s[261]);
initD_HOSPDC5(s[262]);
initD_HOSPC6(s[263]);
initD_HOSPDC6(s[264]);
initD_HOSPC7(s[265]);
initD_HOSPDC7(s[266]);
initD_HOSPC8(s[267]);
initD_HOSPDC8(s[268]);
initD_HOSPC9(s[269]);
initD_HOSPDC9(s[270]);
initD_HOSPC10(s[271]);
initD_HOSPDC10(s[272]);
initD_DISDIF1(s[273]);
initD_DISDIF2(s[274]);
initD_DISDIF3(s[275]);
initD_DISDIF4(s[276]);
initD_DISDIF5(s[277]);
initD_DISDIF6(s[278]);
initD_DISDIF7(s[279]);
initD_DISDIF8(s[280]);
initD_DISDIF9(s[281]);
initD_DISDIF10(s[282]);
initD_DISDIF11(s[283]);
initD_DISDIF12(s[284]);
initD_DISDIF96(s[285]);
initD_HRS_SLPH(s[286]);
initD_TSLP_30M(s[287]);
initD_TSLP_WAK(s[288]);
initD_TSLP_CGH(s[289]);
initD_MED_SLP(s[290]);
initD_TSTA_AWK(s[291]);
initD_SLP_QUAL(s[292]);
initD_HRS_SLPM(s[293]);
initD_HCOND1(s[294]);
initD_HCOND2(s[295]);
initD_HCOND3(s[296]);
initD_HCOND4(s[297]);
initD_HCOND5(s[298]);
initD_HCOND6(s[299]);
initD_HCOND7(s[300]);
initD_HCOND8(s[301]);
initD_HCOND9(s[302]);
initD_HCOND10(s[303]);
initD_HCOND11(s[304]);
initD_HCOND12(s[305]);
initD_HCOND13(s[306]);
initD_HCOND14(s[307]);
initD_HCOND15(s[308]);
initD_HCOND16(s[309]);
initD_HCOND17(s[310]);
initD_HCOND96(s[311]);
initD_HCONDS01(s[312]);
initD_HCONDS02(s[313]);
initD_HCONDS03(s[314]);
initD_HCONDS04(s[315]);
initD_HCONDS05(s[316]);
initD_HCONDS08(s[317]);
initD_HCONDS09(s[318]);
initD_HCONDS10(s[319]);
initD_HCONDS11(s[320]);
initD_HCONDS12(s[321]);
initD_HCONDS13(s[322]);
initD_HCONDS14(s[323]);
initD_HCONDS15(s[324]);
initD_HCONDS16(s[325]);
initD_HCONDS17(s[326]);
initD_HCONDA01(s[327]);
initD_HCONDA02(s[328]);
initD_HCONDA03(s[329]);
initD_HCONDA04(s[330]);
initD_HCONDA05(s[331]);
initD_HCONDA06(s[332]);
initD_HCONDA07(s[333]);
initD_HCONDA08(s[334]);
initD_HCONDA09(s[335]);
initD_HCONDA10(s[336]);
initD_HCONDA11(s[337]);
initD_HCONDA12(s[338]);
initD_HCONDA13(s[339]);
initD_HCONDA14(s[340]);
initD_HCONDA15(s[341]);
initD_HCONDA16(s[342]);
initD_HCONDA17(s[343]);
initD_AIDHH(s[344]);
initD_AIDHUA1(s[345]);
initD_AIDHUA2(s[346]);
initD_AIDHUA3(s[347]);
initD_AIDHUA4(s[348]);
initD_AIDHUA5(s[349]);
initD_AIDHUA6(s[350]);
initD_AIDHUA7(s[351]);
initD_AIDHUA8(s[352]);
initD_AIDHUA9(s[353]);
initD_AIDHUA10(s[354]);
initD_AIDHUA11(s[355]);
initD_AIDHUA12(s[356]);
initD_AIDHUA13(s[357]);
initD_AIDHUA14(s[358]);
initD_AIDHUA15(s[359]);
initD_AIDHUA16(s[360]);
initD_AIDXHH(s[361]);
initD_NAIDXHH(s[362]);
initD_AIDHU1(s[363]);
initD_AIDHU2(s[364]);
initD_AIDHRS(s[365]);
initD_AIDEFT(s[366]);
initD_LCOHNPI(s[367]);
initD_COH1BM(s[368]);
initD_COH1BY(s[369]);
initD_COH1MR(s[370]);
initD_COH1EM(s[371]);
initD_COH1EY(s[372]);
initD_NMAR(s[373]);
initD_LMAR1M(s[374]);
initD_LMAR1Y(s[375]);
initD_LADOPT(s[376]);
initD_LNADOPT(s[377]);
initD_LPRNT(s[378]);
initD_LNPRNT(s[379]);
initD_CH1BY4(s[380]);
initD_ADCTS(s[381]);
initD_MOVY11(s[382]);
initD_MOVY12(s[383]);
initD_MOVY13(s[384]);
initD_MOVY14(s[385]);
initD_MOVY15(s[386]);
initD_MOVY16(s[387]);
initD_FAMILY(s[388]);
initD_EDUCATION(s[389]);
initD_MEMPLOY(s[390]);
initD_HOUSING(s[391]);
initD_AREA(s[392]);
initD_MOVEOTH_CODE(s[393]);
initD_MOVDIR(s[394]);
initD_PLNOWM(s[395]);
initD_PLNOWY4(s[396]);
initD_RELUP(s[397]);
initD_MSTATSAM(s[398]);
initD_LWWRONG(s[399]);
initD_MSTATSAMN(s[400]);
initD_MSTATCH1(s[401]);
initD_STATCM1(s[402]);
initD_STATCY41(s[403]);
initD_DIVCHK1(s[404]);
initD_DIVFIN1(s[405]);
initD_DVM1(s[406]);
initD_DVY41(s[407]);
initD_CMLSTAT1(s[408]);
initD_MSTATCH2(s[409]);
initD_STATCM2(s[410]);
initD_STATCY42(s[411]);
initD_DIVCHK2(s[412]);
initD_DIVFIN2(s[413]);
initD_DVM2(s[414]);
initD_DVY42(s[415]);
initD_CMLSTAT2(s[416]);
initD_MSTATCH3(s[417]);
initD_STATCM3(s[418]);
initD_STATCY43(s[419]);
initD_DIVCHK3(s[420]);
initD_DIVFIN3(s[421]);
initD_DVM3(s[422]);
initD_DVY43(s[423]);
initD_CMLSTAT3(s[424]);
initD_COHAB(s[425]);
initD_COHABN(s[426]);
initD_LMCBM1(s[427]);
initD_LMCBY41(s[428]);
initD_CURRPART1(s[429]);
initD_LMSPM1(s[430]);
initD_LMSPY41(s[431]);
initD_LMCBM2(s[432]);
initD_LMCBY42(s[433]);
initD_CURRPART2(s[434]);
initD_LMSPM2(s[435]);
initD_LMSPY42(s[436]);
initD_FATHER(s[437]);
initD_NCHILD(s[438]);
initD_PREG(s[439]);
initD_PREGM1(s[440]);
initD_PREGY41(s[441]);
initD_PREGFERT1(s[442]);
initD_INVITRO1(s[443]);
initD_PREGOUT1(s[444]);
initD_PREGEND1(s[445]);
initD_ENDMNTH1(s[446]);
initD_PREGSMOKE1(s[447]);
initD_SMKMNTH11(s[448]);
initD_SMKMNTH21(s[449]);
initD_SMKMNTH31(s[450]);
initD_PREGSMK11(s[451]);
initD_PREGSMK21(s[452]);
initD_PREGSMK31(s[453]);
initD_AEDROF1(s[454]);
initD_AEPUWK1(s[455]);
initD_AEPUDA1(s[456]);
initD_LCHMULTI1(s[457]);
initD_PREGM2(s[458]);
initD_PREGY42(s[459]);
initD_PREGFERT2(s[460]);
initD_INVITRO2(s[461]);
initD_PREGOUT2(s[462]);
initD_PREGEND2(s[463]);
initD_ENDMNTH2(s[464]);
initD_PREGSMOKE2(s[465]);
initD_SMKMNTH12(s[466]);
initD_SMKMNTH22(s[467]);
initD_SMKMNTH32(s[468]);
initD_PREGSMK12(s[469]);
initD_PREGSMK22(s[470]);
initD_PREGSMK32(s[471]);
initD_AEDROF2(s[472]);
initD_AEPUWK2(s[473]);
initD_AEPUDA2(s[474]);
initD_LCHMULTI2(s[475]);
initD_PREGM3(s[476]);
initD_PREGY43(s[477]);
initD_PREGFERT3(s[478]);
initD_INVITRO3(s[479]);
initD_PREGOUT3(s[480]);
initD_PREGEND3(s[481]);
initD_ENDMNTH3(s[482]);
initD_PREGSMOKE3(s[483]);
initD_SMKMNTH13(s[484]);
initD_SMKMNTH23(s[485]);
initD_SMKMNTH33(s[486]);
initD_PREGSMK13(s[487]);
initD_PREGSMK23(s[488]);
initD_PREGSMK33(s[489]);
initD_AEDROF3(s[490]);
initD_AEPUWK3(s[491]);
initD_AEPUDA3(s[492]);
initD_LCHMULTI3(s[493]);
initD_PREGM4(s[494]);
initD_PREGY44(s[495]);
initD_PREGFERT4(s[496]);
initD_INVITRO4(s[497]);
initD_PREGOUT4(s[498]);
initD_PREGEND4(s[499]);
initD_ENDMNTH4(s[500]);
initD_PREGSMOKE4(s[501]);
initD_SMKMNTH14(s[502]);
initD_SMKMNTH24(s[503]);
initD_SMKMNTH34(s[504]);
initD_PREGSMK14(s[505]);
initD_PREGSMK24(s[506]);
initD_PREGSMK34(s[507]);
initD_AEDROF4(s[508]);
initD_AEPUWK4(s[509]);
initD_AEPUDA4(s[510]);
initD_LCHMULTI4(s[511]);
initD_NNEWBORN(s[512]);
initD_HCONDNO1(s[513]);
initD_HCONDNS1(s[514]);
initD_HCONDNO2(s[515]);
initD_HCONDNS2(s[516]);
initD_HCONDNO3(s[517]);
initD_HCONDNS3(s[518]);
initD_HCONDNO4(s[519]);
initD_HCONDNS4(s[520]);
initD_HCONDNO5(s[521]);
initD_HCONDNS5(s[522]);
initD_HCONDNO6(s[523]);
initD_HCONDNS6(s[524]);
initD_HCONDNO7(s[525]);
initD_HCONDNS7(s[526]);
initD_HCONDNO8(s[527]);
initD_HCONDNS8(s[528]);
initD_HCONDNO9(s[529]);
initD_HCONDNS9(s[530]);
initD_HCONDNO10(s[531]);
initD_HCONDNS10(s[532]);
initD_HCONDN1(s[533]);
initD_HCONDN2(s[534]);
initD_HCONDN3(s[535]);
initD_HCONDN4(s[536]);
initD_HCONDN5(s[537]);
initD_HCONDN6(s[538]);
initD_HCONDN7(s[539]);
initD_HCONDN8(s[540]);
initD_HCONDN9(s[541]);
initD_HCONDN10(s[542]);
initD_HCONDN11(s[543]);
initD_HCONDN12(s[544]);
initD_HCONDN13(s[545]);
initD_HCONDN14(s[546]);
initD_HCONDN15(s[547]);
initD_HCONDN16(s[548]);
initD_HCONDN17(s[549]);
initD_HCONDN96(s[550]);
initD_CONTFT(s[551]);
initD_FTENDM(s[552]);
initD_FTENDY4(s[553]);
initD_FTEDANY(s[554]);
initD_FTQUALS(s[555]);
initD_FTEDSTARTM1(s[556]);
initD_FTEDSTARTY41(s[557]);
initD_FTEDEND1(s[558]);
initD_FT2ENDM1(s[559]);
initD_FT2ENDY41(s[560]);
initD_FTEDMOR1(s[561]);
initD_FTEDSTARTM2(s[562]);
initD_FTEDSTARTY42(s[563]);
initD_FTEDEND2(s[564]);
initD_FT2ENDM2(s[565]);
initD_FT2ENDY42(s[566]);
initD_FTEDMOR2(s[567]);
initD_QUALNEW1(s[568]);
initD_QUALNEW2(s[569]);
initD_QUALNEW3(s[570]);
initD_QUALNE(s[571]);
initD_QUALNEW5(s[572]);
initD_QUALNEW6(s[573]);
initD_QUALNEW7(s[574]);
initD_QUALNEW8(s[575]);
initD_QUALNEW9(s[576]);
initD_QUALNEW10(s[577]);
initD_QUALNEW11(s[578]);
initD_QUALNEW13(s[579]);
initD_QUALNEW15(s[580]);
initD_QUALNEW16(s[581]);
initD_QUALNEW17(s[582]);
initD_QUALNEW18(s[583]);
initD_QUALNEW19(s[584]);
initD_QUALNEW20(s[585]);
initD_QUALNEW21(s[586]);
initD_QUALNEW22(s[587]);
initD_QUALNEW23(s[588]);
initD_QUALNEW24(s[589]);
initD_QUALNEW25(s[590]);
initD_QUALNEW26(s[591]);
initD_QUALNEW27(s[592]);
initD_QUALNEW28(s[593]);
initD_QUALNEW29(s[594]);
initD_QUALNEW30(s[595]);
initD_QUALNEW31(s[596]);
initD_TRAINANY(s[597]);
initD_TRWHO1(s[598]);
initD_TRAINDAYS1(s[599]);
initD_TRAINHRS1(s[600]);
initD_TRAINEND1(s[601]);
initD_TRAINPURP11(s[602]);
initD_TRAINPURP21(s[603]);
initD_TRAINPURP31(s[604]);
initD_TRAINPURP41(s[605]);
initD_TRAINPURP51(s[606]);
initD_TRAINPURP61(s[607]);
initD_TRAINPURP71(s[608]);
initD_TRAINQUAL1(s[609]);
initD_TRWHO2(s[610]);
initD_TRAINDAYS2(s[611]);
initD_TRAINHRS2(s[612]);
initD_TRAINEND2(s[613]);
initD_TRAINPURP12(s[614]);
initD_TRAINPURP22(s[615]);
initD_TRAINPURP32(s[616]);
initD_TRAINPURP42(s[617]);
initD_TRAINPURP52(s[618]);
initD_TRAINPURP62(s[619]);
initD_TRAINPURP72(s[620]);
initD_TRAINQUAL2(s[621]);
initD_TRWHO3(s[622]);
initD_TRAINDAYS3(s[623]);
initD_TRAINHRS3(s[624]);
initD_TRAINEND3(s[625]);
initD_TRAINPURP13(s[626]);
initD_TRAINPURP23(s[627]);
initD_TRAINPURP33(s[628]);
initD_TRAINPURP43(s[629]);
initD_TRAINPURP53(s[630]);
initD_TRAINPURP63(s[631]);
initD_TRAINPURP73(s[632]);
initD_TRAINQUAL3(s[633]);
initD_TRAINN(s[634]);
initD_TRQUAL1(s[635]);
initD_TRQUAL2(s[636]);
initD_TRQUAL3(s[637]);
initD_TRQUAL4(s[638]);
initD_TRQUAL5(s[639]);
initD_TRQUAL6(s[640]);
initD_TRQUAL7(s[641]);
initD_TRQUAL8(s[642]);
initD_TRQUAL9(s[643]);
initD_TRQUAL10(s[644]);
initD_TRQUAL11(s[645]);
initD_TRQUAL13(s[646]);
initD_TRQUAL15(s[647]);
initD_TRQUAL16(s[648]);
initD_TRQUAL17(s[649]);
initD_TRQUAL18(s[650]);
initD_TRQUAL19(s[651]);
initD_TRQUAL20(s[652]);
initD_TRQUAL21(s[653]);
initD_TRQUAL22(s[654]);
initD_TRQUAL23(s[655]);
initD_TRQUAL24(s[656]);
initD_TRQUAL25(s[657]);
initD_TRQUAL26(s[658]);
initD_TRQUAL27(s[659]);
initD_TRQUAL28(s[660]);
initD_TRQUAL29(s[661]);
initD_TRQUAL30(s[662]);
initD_TRQUAL31(s[663]);
initD_NOTEMPCHK(s[664]);
initD_EMPCHK(s[665]);
initD_EMPSTENDD(s[666]);
initD_EMPSTENDM(s[667]);
initD_EMPSTENDY4(s[668]);
initD_STENDREAS(s[669]);
initD_NXTST(s[670]);
initD_NEXT1(s[671]);
initD_NEXTSTAT1(s[672]);
initD_NEXTELSE1(s[673]);
initD_CURRSTAT1(s[674]);
initD_NEXTJOB1(s[675]);
initD_CURRJOB1(s[676]);
initD_JOBHOURS1(s[677]);
initD_REASEND1(s[678]);
initD_JBATT1(s[679]);
initD_STATENDD1(s[680]);
initD_STATENDM1(s[681]);
initD_STATENDY41(s[682]);
initD_NEXT2(s[683]);
initD_NEXTSTAT2(s[684]);
initD_NEXTELSE2(s[685]);
initD_CURRSTAT2(s[686]);
initD_NEXTJOB2(s[687]);
initD_CURRJOB2(s[688]);
initD_JOBHOURS2(s[689]);
initD_REASEND2(s[690]);
initD_JBATT2(s[691]);
initD_STATENDD2(s[692]);
initD_STATENDM2(s[693]);
initD_STATENDY42(s[694]);
initD_NEXT3(s[695]);
initD_NEXTSTAT3(s[696]);
initD_NEXTELSE3(s[697]);
initD_CURRSTAT3(s[698]);
initD_NEXTJOB3(s[699]);
initD_CURRJOB3(s[700]);
initD_JOBHOURS3(s[701]);
initD_REASEND3(s[702]);
initD_JBATT3(s[703]);
initD_STATENDD3(s[704]);
initD_STATENDM3(s[705]);
initD_STATENDY43(s[706]);
initD_NEXT4(s[707]);
initD_NEXTSTAT4(s[708]);
initD_NEXTELSE4(s[709]);
initD_CURRSTAT4(s[710]);
initD_NEXTJOB4(s[711]);
initD_CURRJOB4(s[712]);
initD_JOBHOURS4(s[713]);
initD_REASEND4(s[714]);
initD_JBATT4(s[715]);
initD_STATENDD4(s[716]);
initD_STATENDM4(s[717]);
initD_STATENDY44(s[718]);
initD_NEXT5(s[719]);
initD_NEXTSTAT5(s[720]);
initD_NEXTELSE5(s[721]);
initD_CURRSTAT5(s[722]);
initD_NEXTJOB5(s[723]);
initD_CURRJOB5(s[724]);
initD_JOBHOURS5(s[725]);
initD_REASEND5(s[726]);
initD_JBATT5(s[727]);
initD_STATENDD5(s[728]);
initD_STATENDM5(s[729]);
initD_STATENDY45(s[730]);
initD_NEXT6(s[731]);
initD_NEXTSTAT6(s[732]);
initD_NEXTELSE6(s[733]);
initD_CURRSTAT6(s[734]);
initD_NEXTJOB6(s[735]);
initD_CURRJOB6(s[736]);
initD_JOBHOURS6(s[737]);
initD_REASEND6(s[738]);
initD_JBATT6(s[739]);
initD_STATENDD6(s[740]);
initD_STATENDM6(s[741]);
initD_STATENDY46(s[742]);
initD_NXTSTELSE(s[743]);
initD_CSTAT(s[744]);
initD_NXTSTENDD(s[745]);
initD_NXTSTENDM(s[746]);
initD_NXTSTENDY4(s[747]);
initD_JBSAMR(s[748]);
initD_WKPLSAM(s[749]);
initD_SAMEJOB(s[750]);
initD_MATLV(s[751]);
initD_MATLVSTD(s[752]);
initD_MATLVSTM(s[753]);
initD_MATLVSTY4(s[754]);
initD_MATLVENDD(s[755]);
initD_MATLVENDM(s[756]);
initD_MATLVENDY4(s[757]);
initD_JBENDD(s[758]);
initD_JBENDM(s[759]);
initD_JBENDY4(s[760]);
initD_JBENDREAS(s[761]);
initD_CJOB(s[762]);
initD_NXTJBHRS(s[763]);
initD_NXTJBES(s[764]);
initD_NXTJBENDD(s[765]);
initD_NXTJBENDM(s[766]);
initD_NXTJBENDY4(s[767]);
initD_CJBATT(s[768]);
initD_NEXT(s[769]);
initD_JBHAS(s[770]);
initD_JBOFF(s[771]);
initD_JBOFFY(s[772]);
initD_JBTERM1(s[773]);
initD_JBTERM2(s[774]);
initD_JBSIC07CHK(s[775]);
initD_JBSOC00CHK(s[776]);
initD_JBSEMPCHK(s[777]);
initD_JBSEMP(s[778]);
initD_JBBGDATY(s[779]);
initD_JBBGDATM(s[780]);
initD_JBBGDATD(s[781]);
initD_JBBGD(s[782]);
initD_JBBGM(s[783]);
initD_JBBGY(s[784]);
initD_JBMNGRCHK(s[785]);
initD_JBMNGR(s[786]);
initD_JBSIZECHK(s[787]);
initD_JBSIZE(s[788]);
initD_JBSECT(s[789]);
initD_JBSECTPUB(s[790]);
initD_JBHRS(s[791]);
initD_JBOT(s[792]);
initD_JBOTPD(s[793]);
initD_PAYGWC(s[794]);
initD_PAYNWC(s[795]);
initD_PAYUSL(s[796]);
initD_PAYU(s[797]);
initD_PAYUWC(s[798]);
initD_PAYUG(s[799]);
initD_PAYTYP(s[800]);
initD_OVTPAY(s[801]);
initD_EXTNSA(s[802]);
initD_EXTRATE(s[803]);
initD_EXTREST(s[804]);
initD_BASNSA(s[805]);
initD_BASRATE(s[806]);
initD_BASREST(s[807]);
initD_OVTNSA(s[808]);
initD_OVTRATE(s[809]);
initD_OVTREST(s[810]);
initD_JBPL(s[811]);
initD_JBTTWT(s[812]);
initD_WORKTRAV(s[813]);
initD_JSBOSS(s[814]);
initD_JSSIZE(s[815]);
initD_JSHRS(s[816]);
initD_JSTYPEB(s[817]);
initD_JSACCS(s[818]);
initD_JSPART(s[819]);
initD_JSPRBM(s[820]);
initD_JSPRBY4(s[821]);
initD_JSPREM(s[822]);
initD_JSPREY4(s[823]);
initD_JSPRLS(s[824]);
initD_JSPRTX(s[825]);
initD_JSPRNI(s[826]);
initD_JSPAYU(s[827]);
initD_JSPAYW(s[828]);
initD_JSPYTX(s[829]);
initD_JSPYNI(s[830]);
initD_JSPL(s[831]);
initD_JSTTWT(s[832]);
initD_JSTTWTB(s[833]);
initD_JSWORKTRAV(s[834]);
initD_WORKDIS(s[835]);
initD_TWKDIFF1(s[836]);
initD_TWKDIFF2(s[837]);
initD_TWKDIFF3(s[838]);
initD_TWKDIFF4(s[839]);
initD_TWKDIFF5(s[840]);
initD_TWKDIFF6(s[841]);
initD_TWKDIFF7(s[842]);
initD_TWKDIFF8(s[843]);
initD_TWKDIFF97(s[844]);
initD_TWKDIFFM(s[845]);
initD_TWKCAR(s[846]);
initD_JBSAT(s[847]);
initD_JBPERFP(s[848]);
initD_JBONUS(s[849]);
initD_JBRISE(s[850]);
initD_TUJBPL(s[851]);
initD_TUIN1(s[852]);
initD_JBPEN(s[853]);
initD_JBPENM(s[854]);
initD_JBPENY4(s[855]);
initD_PENMCN(s[856]);
initD_PENMPY(s[857]);
initD_PENMTP(s[858]);
initD_PENSPB(s[859]);
initD_WKTIME(s[860]);
initD_WKENDS(s[861]);
initD_JBFLEX1(s[862]);
initD_JBFLEX2(s[863]);
initD_JBFLEX3(s[864]);
initD_JBFLEX4(s[865]);
initD_JBFLEX5(s[866]);
initD_JBFLEX6(s[867]);
initD_JBFLEX7(s[868]);
initD_JBFLEX8(s[869]);
initD_JBFLEX96(s[870]);
initD_JBFXUSE1(s[871]);
initD_JBFXUSE2(s[872]);
initD_JBFXUSE3(s[873]);
initD_JBFXUSE4(s[874]);
initD_JBFXUSE5(s[875]);
initD_JBFXUSE6(s[876]);
initD_JBFXUSE7(s[877]);
initD_JBFXUSE8(s[878]);
initD_JBFXUSE96(s[879]);
initD_JBFXINF(s[880]);
initD_WKAUT1(s[881]);
initD_WKAUT2(s[882]);
initD_WKAUT3(s[883]);
initD_WKAUT4(s[884]);
initD_WKAUT5(s[885]);
initD_DEPENTH1(s[886]);
initD_DEPENTH2(s[887]);
initD_DEPENTH3(s[888]);
initD_DEPENTH4(s[889]);
initD_DEPENTH5(s[890]);
initD_DEPENTH6(s[891]);
initD_JBLKCHA(s[892]);
initD_JBXPCHA(s[893]);
initD_JBLKCHB(s[894]);
initD_JBXPCHB(s[895]);
initD_JBLKCHC(s[896]);
initD_JBXPCHC(s[897]);
initD_JBLKCHD(s[898]);
initD_JBXPCHD(s[899]);
initD_JBLKCHE(s[900]);
initD_JBXPCHE(s[901]);
initD_JBSEC(s[902]);
initD_JULK4WK(s[903]);
initD_JULKJB(s[904]);
initD_JUBGN(s[905]);
initD_JULK4X1(s[906]);
initD_JULK4X2(s[907]);
initD_JULK4X3(s[908]);
initD_JULK4X4(s[909]);
initD_JULK4X5(s[910]);
initD_JULK4X6(s[911]);
initD_JULK4X96(s[912]);
initD_JBHAD(s[913]);
initD_JLENDM(s[914]);
initD_JLENDY(s[915]);
initD_JLSEMP(s[916]);
initD_JLBOSS(s[917]);
initD_JLMNGR(s[918]);
initD_JLSIZE(s[919]);
initD_EPROSH(s[920]);
initD_MLFUTR(s[921]);
initD_MLRNOT1(s[922]);
initD_MLRNOT2(s[923]);
initD_MLRNOT3(s[924]);
initD_MLRNOT4(s[925]);
initD_MLRNOT5(s[926]);
initD_MLRNOT6(s[927]);
initD_MLRNOT7(s[928]);
initD_MLRNOT8(s[929]);
initD_MLRNOT9(s[930]);
initD_MLRNOT10(s[931]);
initD_MLRNOT11(s[932]);
initD_MLRNOT12(s[933]);
initD_MLRNOT13(s[934]);
initD_MLRNOT97(s[935]);
initD_MLAGST(s[936]);
initD_MLAGSTU(s[937]);
initD_MLWKFPT(s[938]);
initD_MATLEAVE(s[939]);
initD_J2HAS(s[940]);
initD_J2SEMP(s[941]);
initD_J2HRS(s[942]);
initD_J2PAY(s[943]);
initD_VOLUN(s[944]);
initD_VOLFREQ(s[945]);
initD_VOLHRS(s[946]);
initD_CHARGV(s[947]);
initD_CHARFREQ(s[948]);
initD_CHARAM(s[949]);
initD_TRCARFQ(s[950]);
initD_TRBUSFQ(s[951]);
initD_TRTRNFQ(s[952]);
initD_TRBIKEFQ(s[953]);
initD_YNOTBIKE1(s[954]);
initD_YNOTBIKE2(s[955]);
initD_YNOTBIKE3(s[956]);
initD_YNOTBIKE96(s[957]);
initD_CARSRV1(s[958]);
initD_CARSRV2(s[959]);
initD_CARSRV3(s[960]);
initD_PNCARS(s[961]);
initD_HUCAR(s[962]);
initD_CARBUY1(s[963]);
initD_CARBUY2(s[964]);
initD_CARBUY3(s[965]);
initD_CARBUY4(s[966]);
initD_CARBUY5(s[967]);
initD_CARBUY6(s[968]);
initD_CARBUY7(s[969]);
initD_CARBUY8(s[970]);
initD_CARBUY9(s[971]);
initD_CARBUY10(s[972]);
initD_CARBUY11(s[973]);
initD_CARBUY12(s[974]);
initD_CARBUY97(s[975]);
initD_CCARE(s[976]);
initD_CCWORK(s[977]);
initD_REMIT1(s[978]);
initD_REMIT2(s[979]);
initD_REMIT3(s[980]);
initD_REMIT4(s[981]);
initD_REMIT5(s[982]);
initD_REMITFREQ1(s[983]);
initD_REMITREG1(s[984]);
initD_REMITAMT1(s[985]);
initD_REMCNTRY1(s[986]);
initD_REMITUSUAL1(s[987]);
initD_REMHOW1(s[988]);
initD_REMITFREQ2(s[989]);
initD_REMITREG2(s[990]);
initD_REMITAMT2(s[991]);
initD_REMCNTRY2(s[992]);
initD_REMITUSUAL2(s[993]);
initD_REMHOW2(s[994]);
initD_REMITFREQ3(s[995]);
initD_REMITREG3(s[996]);
initD_REMITAMT3(s[997]);
initD_REMCNTRY3(s[998]);
initD_REMITUSUAL3(s[999]);
initD_REMHOW3(s[1000]);
initD_REMITFREQ4(s[1001]);
initD_REMITREG4(s[1002]);
initD_REMITAMT4(s[1003]);
initD_REMCNTRY4(s[1004]);
initD_REMITUSUAL4(s[1005]);
initD_REMHO(s[1006]);
initD_BTYPE1(s[1007]);
initD_BTYPE2(s[1008]);
initD_BTYPE10(s[1009]);
initD_BTYPE3(s[1010]);
initD_BTYPE4(s[1011]);
initD_BTYPE5(s[1012]);
initD_BTYPE6(s[1013]);
initD_BTYPE7(s[1014]);
initD_BTYPE8(s[1015]);
initD_BTYPE9(s[1016]);
initD_BTYPE11(s[1017]);
initD_BTYPE12(s[1018]);
initD_BTYPE13(s[1019]);
initD_BTYPE14(s[1020]);
initD_BTYPE96(s[1021]);
initD_BENUNEMP1(s[1022]);
initD_BENUNEMP2(s[1023]);
initD_BENUNEMP3(s[1024]);
initD_BENUNEMP4(s[1025]);
initD_BENUNEMP5(s[1026]);
initD_BENUNEMP6(s[1027]);
initD_BENUNEMP7(s[1028]);
initD_BENUNEMP96(s[1029]);
initD_BENDIS1(s[1030]);
initD_BENDIS11(s[1031]);
initD_BENDIS2(s[1032]);
initD_BENDIS3(s[1033]);
initD_BENDIS4(s[1034]);
initD_BENDIS5(s[1035]);
initD_BENDIS12(s[1036]);
initD_BENDIS6(s[1037]);
initD_BENDIS7(s[1038]);
initD_BENDIS8(s[1039]);
initD_BENDIS9(s[1040]);
initD_BENDIS10(s[1041]);
initD_BENDIS13(s[1042]);
initD_BENDIS14(s[1043]);
initD_BENDIS15(s[1044]);
initD_BENDIS16(s[1045]);
initD_BENDIS96(s[1046]);
initD_BENDIS97(s[1047]);
initD_BENPEN1(s[1048]);
initD_BENPEN2(s[1049]);
initD_BENPEN3(s[1050]);
initD_BENPEN4(s[1051]);
initD_BENPEN5(s[1052]);
initD_BENPEN6(s[1053]);
initD_BENPEN7(s[1054]);
initD_BENPEN8(s[1055]);
initD_BENPEN9(s[1056]);
initD_BENPEN10(s[1057]);
initD_BENPEN11(s[1058]);
initD_BENPEN12(s[1059]);
initD_BENPEN13(s[1060]);
initD_BENPEN96(s[1061]);
initD_NISERPS(s[1062]);
initD_BENCB(s[1063]);
initD_BENCTC(s[1064]);
initD_BENFAM1(s[1065]);
initD_BENFAM2(s[1066]);
initD_BENFAM3(s[1067]);
initD_BENFAM4(s[1068]);
initD_BENFAM5(s[1069]);
initD_BENFAM6(s[1070]);
initD_BENFAM7(s[1071]);
initD_BENFAM8(s[1072]);
initD_BENFAM9(s[1073]);
initD_BENFAM10(s[1074]);
initD_BENFAM96(s[1075]);
initD_BENTAX6(s[1076]);
initD_BENTAX1(s[1077]);
initD_BENTAX2(s[1078]);
initD_BENTAX3(s[1079]);
initD_BENTAX4(s[1080]);
initD_BENTAX5(s[1081]);
initD_BENTAX7(s[1082]);
initD_BENTAX8(s[1083]);
initD_BENTAX9(s[1084]);
initD_BENTAX10(s[1085]);
initD_BENTAX96(s[1086]);
initD_BENHOU1(s[1087]);
initD_BENHOU2(s[1088]);
initD_BENHOU3(s[1089]);
initD_BENHOU4(s[1090]);
initD_BENHOU5(s[1091]);
initD_BENHOU6(s[1092]);
initD_BENHOU7(s[1093]);
initD_BENHOU8(s[1094]);
initD_BENHOU9(s[1095]);
initD_BENHOU96(s[1096]);
initD_BENSTA1(s[1097]);
initD_BENSTA2(s[1098]);
initD_BENSTA3(s[1099]);
initD_BENSTA4(s[1100]);
initD_BENSTA5(s[1101]);
initD_BENSTA6(s[1102]);
initD_BENSTA7(s[1103]);
initD_BENSTA9(s[1104]);
initD_BENSTA10(s[1105]);
initD_BENSTA11(s[1106]);
initD_BENSTA12(s[1107]);
initD_BENSTA13(s[1108]);
initD_BENSTA96(s[1109]);
initD_BENSTA97(s[1110]);
initD_NFH01(s[1111]);
initD_NFH02(s[1112]);
initD_NFH03(s[1113]);
initD_NFH04(s[1114]);
initD_NFH05(s[1115]);
initD_NFH06(s[1116]);
initD_NFH07(s[1117]);
initD_NFH08(s[1118]);
initD_NFH09(s[1119]);
initD_NFH10(s[1120]);
initD_NFH11(s[1121]);
initD_NFH12(s[1122]);
initD_NFH13(s[1123]);
initD_NFH14(s[1124]);
initD_NFH15(s[1125]);
initD_NFH16(s[1126]);
initD_NFH17(s[1127]);
initD_NFH18(s[1128]);
initD_NFH19(s[1129]);
initD_NFH20(s[1130]);
initD_NFH21(s[1131]);
initD_NFH22(s[1132]);
initD_NFH23(s[1133]);
initD_NFH24(s[1134]);
initD_NFH25(s[1135]);
initD_NFH26(s[1136]);
initD_NFH27(s[1137]);
initD_NFH28(s[1138]);
initD_NFH29(s[1139]);
initD_NFH30(s[1140]);
initD_NFH31(s[1141]);
initD_NFH32(s[1142]);
initD_NFH33(s[1143]);
initD_NFH34(s[1144]);
initD_NFH35(s[1145]);
initD_NFH36(s[1146]);
initD_NFH37(s[1147]);
initD_NFH38(s[1148]);
initD_NFH39(s[1149]);
initD_FIYRDIA(s[1150]);
initD_FIYRDB1(s[1151]);
initD_FIYRDB2(s[1152]);
initD_FIYRDB3(s[1153]);
initD_FIYRDB4(s[1154]);
initD_FIYRDB5(s[1155]);
initD_FIYRDB6(s[1156]);
initD_FINNOW(s[1157]);
initD_FINFUT(s[1158]);
initD_SAVE(s[1159]);
initD_SAVED(s[1160]);
initD_SAVREG(s[1161]);
initD_SAVLT(s[1162]);
initD_PPEN(s[1163]);
initD_PPENT(s[1164]);
initD_PPYRS(s[1165]);
initD_PPREG(s[1166]);
initD_PPRAM(s[1167]);
initD_PPRAMPC(s[1168]);
initD_HASCURR(s[1169]);
initD_CURRYNOT1(s[1170]);
initD_CURRYNOT2(s[1171]);
initD_CURRYNOT3(s[1172]);
initD_CURRYNOT4(s[1173]);
initD_CURRYNOT5(s[1174]);
initD_CURRYNOT6(s[1175]);
initD_CURRYNOT7(s[1176]);
initD_CURRYNOT8(s[1177]);
initD_CURRYNOT97(s[1178]);
initD_CURRYNOT96(s[1179]);
initD_REFBANK(s[1180]);
initD_REFBNKY(s[1181]);
initD_SVACTS1(s[1182]);
initD_SVACTS2(s[1183]);
initD_SVACTS3(s[1184]);
initD_SVACTS4(s[1185]);
initD_SVACTS5(s[1186]);
initD_SVACTS97(s[1187]);
initD_SVACTS96(s[1188]);
initD_NOSVY(s[1189]);
initD_SVAMT1(s[1190]);
initD_SVB1_1(s[1191]);
initD_SVB2_1(s[1192]);
initD_SVB3_1(s[1193]);
initD_SVB5_1(s[1194]);
initD_SVB4_1(s[1195]);
initD_SVSJ1(s[1196]);
initD_SVPN0_1(s[1197]);
initD_SVPN1_1(s[1198]);
initD_SVPN2_1(s[1199]);
initD_SVPN3_1(s[1200]);
initD_SVPN4_1(s[1201]);
initD_SVPN5_1(s[1202]);
initD_SVPN6_1(s[1203]);
initD_SVPN7_1(s[1204]);
initD_SVPN8_1(s[1205]);
initD_SVPN9_1(s[1206]);
initD_SVPN10_1(s[1207]);
initD_SVPN11_1(s[1208]);
initD_SVPN12_1(s[1209]);
initD_SVPN13_1(s[1210]);
initD_SVPN14_1(s[1211]);
initD_SVPN15_1(s[1212]);
initD_SVPN16_1(s[1213]);
initD_SVSK1(s[1214]);
initD_SVAMT2(s[1215]);
initD_SVB1_2(s[1216]);
initD_SVB2_2(s[1217]);
initD_SVB3_2(s[1218]);
initD_SVB5_2(s[1219]);
initD_SVB4_2(s[1220]);
initD_SVSJ2(s[1221]);
initD_SVPN0_2(s[1222]);
initD_SVPN1_2(s[1223]);
initD_SVPN2_2(s[1224]);
initD_SVPN3_2(s[1225]);
initD_SVPN4_2(s[1226]);
initD_SVPN5_2(s[1227]);
initD_SVPN6_2(s[1228]);
initD_SVPN7_2(s[1229]);
initD_SVPN8_2(s[1230]);
initD_SVPN9_2(s[1231]);
initD_SVPN10_2(s[1232]);
initD_SVPN11_2(s[1233]);
initD_SVPN12_2(s[1234]);
initD_SVPN13_2(s[1235]);
initD_SVPN14_2(s[1236]);
initD_SVPN15_2(s[1237]);
initD_SVPN16_2(s[1238]);
initD_SVSK2(s[1239]);
initD_SVAMT3(s[1240]);
initD_SVB1_3(s[1241]);
initD_SVB2_3(s[1242]);
initD_SVB3_3(s[1243]);
initD_SVB5_3(s[1244]);
initD_SVB4_3(s[1245]);
initD_SVSJ3(s[1246]);
initD_SVPN0_3(s[1247]);
initD_SVPN1_3(s[1248]);
initD_SVPN2_3(s[1249]);
initD_SVPN3_3(s[1250]);
initD_SVPN4_3(s[1251]);
initD_SVPN5_3(s[1252]);
initD_SVPN6_3(s[1253]);
initD_SVPN7_3(s[1254]);
initD_SVPN8_3(s[1255]);
initD_SVPN9_3(s[1256]);
initD_SVPN10_3(s[1257]);
initD_SVPN11_3(s[1258]);
initD_SVPN12_3(s[1259]);
initD_SVPN13_3(s[1260]);
initD_SVPN14_3(s[1261]);
initD_SVPN15_3(s[1262]);
initD_SVPN16_3(s[1263]);
initD_SVSK3(s[1264]);
initD_SVAMT4(s[1265]);
initD_SVB1_4(s[1266]);
initD_SVB2_4(s[1267]);
initD_SVB3_4(s[1268]);
initD_SVB5_4(s[1269]);
initD_SVB4_4(s[1270]);
initD_SVSJ4(s[1271]);
initD_SVPN0_4(s[1272]);
initD_SVPN1_4(s[1273]);
initD_SVPN2_4(s[1274]);
initD_SVPN3_4(s[1275]);
initD_SVPN4_4(s[1276]);
initD_SVPN5_4(s[1277]);
initD_SVPN6_4(s[1278]);
initD_SVPN7_4(s[1279]);
initD_SVPN8_4(s[1280]);
initD_SVPN9_4(s[1281]);
initD_SVPN10_4(s[1282]);
initD_SVPN11_4(s[1283]);
initD_SVPN12_4(s[1284]);
initD_SVPN13_4(s[1285]);
initD_SVPN14_4(s[1286]);
initD_SVPN15_4(s[1287]);
initD_SVPN16_4(s[1288]);
initD_SVSK4(s[1289]);
initD_SVAMT5(s[1290]);
initD_SVB1_5(s[1291]);
initD_SVB2_5(s[1292]);
initD_SVB3_5(s[1293]);
initD_SVB5_5(s[1294]);
initD_SVB4_5(s[1295]);
initD_SVSJ5(s[1296]);
initD_SVPN0_5(s[1297]);
initD_SVPN1_5(s[1298]);
initD_SVPN2_5(s[1299]);
initD_SVPN3_5(s[1300]);
initD_SVPN4_5(s[1301]);
initD_SVPN5_5(s[1302]);
initD_SVPN6_5(s[1303]);
initD_SVPN7_5(s[1304]);
initD_SVPN8_5(s[1305]);
initD_SVPN9_5(s[1306]);
initD_SVPN10_5(s[1307]);
initD_SVPN11_5(s[1308]);
initD_SVPN12_5(s[1309]);
initD_SVPN13_5(s[1310]);
initD_SVPN14_5(s[1311]);
initD_SVPN15_5(s[1312]);
initD_SVPN16_5(s[1313]);
initD_SVSK5(s[1314]);
initD_SVAMT6(s[1315]);
initD_SVB1_6(s[1316]);
initD_SVB2_6(s[1317]);
initD_SVB3_6(s[1318]);
initD_SVB5_6(s[1319]);
initD_SVB4_6(s[1320]);
initD_SVSJ6(s[1321]);
initD_SVPN0_6(s[1322]);
initD_SVPN1_6(s[1323]);
initD_SVPN2_6(s[1324]);
initD_SVPN3_6(s[1325]);
initD_SVPN4_6(s[1326]);
initD_SVPN5_6(s[1327]);
initD_SVPN6_6(s[1328]);
initD_SVPN7_6(s[1329]);
initD_SVPN8_6(s[1330]);
initD_SVPN9_6(s[1331]);
initD_SVPN10_6(s[1332]);
initD_SVPN11_6(s[1333]);
initD_SVPN12_6(s[1334]);
initD_SVPN13_6(s[1335]);
initD_SVPN14_6(s[1336]);
initD_SVPN15_6(s[1337]);
initD_SVPN16_6(s[1338]);
initD_SVSK6(s[1339]);
initD_INFSAVE1(s[1340]);
initD_INFSAVE2(s[1341]);
initD_INFSAVE3(s[1342]);
initD_INFSAVE4(s[1343]);
initD_INFSAVE5(s[1344]);
initD_INFSAVE6(s[1345]);
initD_INFSAVE96(s[1346]);
initD_CCSOLE(s[1347]);
initD_NCCSOLE(s[1348]);
initD_CREDSOLE(s[1349]);
initD_CCBILLSOLE(s[1350]);
initD_CCAMTSOLE(s[1351]);
initD_CCJT(s[1352]);
initD_NCCJT(s[1353]);
initD_CCJTP0(s[1354]);
initD_CCJTP1(s[1355]);
initD_CCJTP2(s[1356]);
initD_CCJTP3(s[1357]);
initD_CCJTP4(s[1358]);
initD_CCJTP5(s[1359]);
initD_CCJTP6(s[1360]);
initD_CCJTP7(s[1361]);
initD_CCJTP8(s[1362]);
initD_CCJTP9(s[1363]);
initD_CCJTP10(s[1364]);
initD_CCJTP11(s[1365]);
initD_CCJTP12(s[1366]);
initD_CCJTP13(s[1367]);
initD_CCJTP14(s[1368]);
initD_CCJTP15(s[1369]);
initD_CCJTP16(s[1370]);
initD_CREDJT(s[1371]);
initD_CCBILLJT(s[1372]);
initD_CCAMTJT(s[1373]);
initD_DEBT1(s[1374]);
initD_DEBT2(s[1375]);
initD_DEBT4(s[1376]);
initD_DEBT5(s[1377]);
initD_DEBT6(s[1378]);
initD_DEBT7(s[1379]);
initD_DEBT8(s[1380]);
initD_DEBT97(s[1381]);
initD_DEBT96(s[1382]);
initD_DEBTINFO1(s[1383]);
initD_DEBTINFO2(s[1384]);
initD_DEBTINFO3(s[1385]);
initD_DEBTINFO4(s[1386]);
initD_DEBTINFO5(s[1387]);
initD_DEBTINFO6(s[1388]);
initD_DEBTINFO7(s[1389]);
initD_DEBTINFO8(s[1390]);
initD_DEBTINFO9(s[1391]);
initD_DEBTINFO10(s[1392]);
initD_DEBTINFO11(s[1393]);
initD_DEBTINFO97(s[1394]);
initD_DEBTY(s[1395]);
initD_DEBTC1(s[1396]);
initD_DEBTC2(s[1397]);
initD_DEBTC3(s[1398]);
initD_DEBTC5(s[1399]);
initD_DEBTC4(s[1400]);
initD_DEBTSJ(s[1401]);
initD_DEBTPN0(s[1402]);
initD_DEBTPN1(s[1403]);
initD_DEBTPN2(s[1404]);
initD_DEBTPN3(s[1405]);
initD_DEBTPN4(s[1406]);
initD_DEBTPN5(s[1407]);
initD_DEBTPN6(s[1408]);
initD_DEBTPN7(s[1409]);
initD_DEBTPN8(s[1410]);
initD_DEBTPN9(s[1411]);
initD_DEBTPN10(s[1412]);
initD_DEBTPN11(s[1413]);
initD_DEBTPN12(s[1414]);
initD_DEBTPN13(s[1415]);
initD_DEBTPN14(s[1416]);
initD_DEBTPN15(s[1417]);
initD_DEBTPN16(s[1418]);
initD_DEBTSK(s[1419]);
initD_DEBTWHO1(s[1420]);
initD_DEBTWHO2(s[1421]);
initD_DEBTWHO3(s[1422]);
initD_DEBTWHO4(s[1423]);
initD_DEBTWHO97(s[1424]);
initD_DEBTOTH1(s[1425]);
initD_DEBTOTH2(s[1426]);
initD_DEBTOTH3(s[1427]);
initD_DEBTOTH4(s[1428]);
initD_DEBTOTH96(s[1429]);
initD_CREDITOR(s[1430]);
initD_CREDAMT(s[1431]);
initD_UNUSEXP(s[1432]);
initD_EXPMANAGE1(s[1433]);
initD_EXPMANAGE2(s[1434]);
initD_EXPMANAGE3(s[1435]);
initD_EXPMANAGE4(s[1436]);
initD_EXPMANAGE5(s[1437]);
initD_EXPMANAGE6(s[1438]);
initD_EXPMANAGE7(s[1439]);
initD_EXPMANAGE8(s[1440]);
initD_EXPMANAGE9(s[1441]);
initD_EXPMANAGE10(s[1442]);
initD_EXPMANAGE11(s[1443]);
initD_EXPMANAGE97(s[1444]);
initD_HURUNS(s[1445]);
initD_SAVDOCS(s[1446]);
initD_RETCHK(s[1447]);
initD_AGERET(s[1448]);
initD_RTPRO1(s[1449]);
initD_RTPRO2(s[1450]);
initD_RTPRO3(s[1451]);
initD_RTPRO4(s[1452]);
initD_RTPRO5(s[1453]);
initD_RTPRO6(s[1454]);
initD_RTCON1(s[1455]);
initD_RTCON2(s[1456]);
initD_RTCON3(s[1457]);
initD_RTCON4(s[1458]);
initD_PENMEX(s[1459]);
initD_PPPEX(s[1460]);
initD_PPPEXM(s[1461]);
initD_SPPEN(s[1462]);
initD_RTEXPJB(s[1463]);
initD_RTFND1(s[1464]);
initD_RTFND2(s[1465]);
initD_RTFND3(s[1466]);
initD_RTFND4(s[1467]);
initD_RTFND5(s[1468]);
initD_RTFND6(s[1469]);
initD_RTFND7(s[1470]);
initD_RTFND8(s[1471]);
initD_RTFND9(s[1472]);
initD_RTFND10(s[1473]);
initD_RTFND96(s[1474]);
initD_RETAMT(s[1475]);
initD_RETSUF(s[1476]);
initD_HUBUYS(s[1477]);
initD_HUFRYS(s[1478]);
initD_HUMOPS(s[1479]);
initD_HUIRON(s[1480]);
initD_HUPOTS(s[1481]);
initD_HUDIY(s[1482]);
initD_HUSITS(s[1483]);
initD_HUBOSS(s[1484]);
initD_HOWLNG(s[1485]);
initD_VOTE1(s[1486]);
initD_VOTE2(s[1487]);
initD_VOTE3(s[1488]);
initD_VOTE4(s[1489]);
initD_VOTE5(s[1490]);
initD_VOTE6(s[1491]);
initD_OLYMPAS11(s[1492]);
initD_OLYMPAS12(s[1493]);
initD_OLYMPAS13(s[1494]);
initD_OLYMPAS14(s[1495]);
initD_OLYMPAS15(s[1496]);
initD_OLYMPAS196(s[1497]);
initD_OLYMPAS198(s[1498]);
initD_OLYMACT11(s[1499]);
initD_OLYMACT12(s[1500]);
initD_OLYMACT13(s[1501]);
initD_OLYMACT14(s[1502]);
initD_OLYMACT15(s[1503]);
initD_OLYMACT16(s[1504]);
initD_OLYMACT17(s[1505]);
initD_OLYMACT18(s[1506]);
initD_OLYMACT196(s[1507]);
initD_OLYMACT198(s[1508]);
initD_OLYMPAS21(s[1509]);
initD_OLYMPAS22(s[1510]);
initD_OLYMPAS23(s[1511]);
initD_OLYMPAS24(s[1512]);
initD_OLYMPAS25(s[1513]);
initD_OLYMPAS296(s[1514]);
initD_OLYMPAS298(s[1515]);
initD_OLYMACT21(s[1516]);
initD_OLYMACT22(s[1517]);
initD_OLYMACT23(s[1518]);
initD_OLYMACT24(s[1519]);
initD_OLYMACT25(s[1520]);
initD_OLYMACT26(s[1521]);
initD_OLYMACT27(s[1522]);
initD_OLYMACT28(s[1523]);
initD_OLYMACT296(s[1524]);
initD_OLYMACT298(s[1525]);
initD_OLYMPAS31(s[1526]);
initD_OLYMPAS32(s[1527]);
initD_OLYMPAS33(s[1528]);
initD_OLYMPAS34(s[1529]);
initD_OLYMPAS35(s[1530]);
initD_OLYMPAS396(s[1531]);
initD_OLYMPAS398(s[1532]);
initD_OLYMACT31(s[1533]);
initD_OLYMACT32(s[1534]);
initD_OLYMACT33(s[1535]);
initD_OLYMACT34(s[1536]);
initD_OLYMACT35(s[1537]);
initD_OLYMACT36(s[1538]);
initD_OLYMACT37(s[1539]);
initD_OLYMACT38(s[1540]);
initD_OLYMACT396(s[1541]);
initD_OLYMACT398(s[1542]);
initD_ENVHABIT1(s[1543]);
initD_ENVHABIT2(s[1544]);
initD_ENVHABIT3(s[1545]);
initD_ENVHABIT4(s[1546]);
initD_ENVHABIT5(s[1547]);
initD_ENVHABIT6(s[1548]);
initD_ENVHABIT7(s[1549]);
initD_ENVHABIT8(s[1550]);
initD_ENVHABIT9(s[1551]);
initD_ENVHABIT10(s[1552]);
initD_ENVHABIT11(s[1553]);
initD_CARMILES(s[1554]);
initD_FLYES1(s[1555]);
initD_FLYES2(s[1556]);
initD_FLYES3(s[1557]);
initD_FLYES4(s[1558]);
initD_NFLYIN(s[1559]);
initD_NFLYEU(s[1560]);
initD_NFLYOS(s[1561]);
initD_SCAC(s[1562]);
initD_SCRF1(s[1563]);
initD_SCRF2(s[1564]);
initD_SCRF3(s[1565]);
initD_SCRF4(s[1566]);
initD_SCRF5(s[1567]);
initD_SCRF6(s[1568]);
initD_SCRF97(s[1569]);
initD_SCUN1(s[1570]);
initD_SCUN2(s[1571]);
initD_SCUN3(s[1572]);
initD_SCUN97(s[1573]);
initD_SCSF1(s[1574]);
initD_SCSF2A(s[1575]);
initD_SCSF2B(s[1576]);
initD_SCSF3A(s[1577]);
initD_SCSF3B(s[1578]);
initD_SCSF4A(s[1579]);
initD_SCSF4B(s[1580]);
initD_SCSF5(s[1581]);
initD_SCSF6A(s[1582]);
initD_SCSF6B(s[1583]);
initD_SCSF6C(s[1584]);
initD_SCSF7(s[1585]);
initD_SCGHQA(s[1586]);
initD_SCGHQB(s[1587]);
initD_SCGHQC(s[1588]);
initD_SCGHQD(s[1589]);
initD_SCGHQE(s[1590]);
initD_SCGHQF(s[1591]);
initD_SCGHQG(s[1592]);
initD_SCGHQH(s[1593]);
initD_SCGHQI(s[1594]);
initD_SCGHQJ(s[1595]);
initD_SCGHQK(s[1596]);
initD_SCGHQL(s[1597]);
initD_SCLFSAT1(s[1598]);
initD_SCLFSAT2(s[1599]);
initD_SCLFSAT7(s[1600]);
initD_SCLFSATO(s[1601]);
initD_SCWKIMP(s[1602]);
initD_SCWKOR1(s[1603]);
initD_SCWKOR2(s[1604]);
initD_SCWKOR3(s[1605]);
initD_SCWKOR4(s[1606]);
initD_SCWKOR5(s[1607]);
initD_SCWKOR6(s[1608]);
initD_SCWKOR7(s[1609]);
initD_SCWKOR8(s[1610]);
initD_SCWKOR9(s[1611]);
initD_SCWKOR10(s[1612]);
initD_SCWKOR11(s[1613]);
initD_SCWKOR12(s[1614]);
initD_SCWKOR13(s[1615]);
initD_SCWKOR14(s[1616]);
initD_SCWKOR15(s[1617]);
initD_SCOPFAMA(s[1618]);
initD_SCOPFAMB(s[1619]);
initD_SCOPFAMD(s[1620]);
initD_SCOPFAMF(s[1621]);
initD_SCOPFAMH(s[1622]);
initD_SCENV_FTST(s[1623]);
initD_SCENV_CRLF(s[1624]);
initD_SCENV_GRN(s[1625]);
initD_SCENV_BCCC(s[1626]);
initD_SCENV_PMEP(s[1627]);
initD_SCENV_MEDS(s[1628]);
initD_SCENV_CREX(s[1629]);
initD_SCENV_TLAT(s[1630]);
initD_SCENV_NOWO(s[1631]);
initD_SCENV_FITL(s[1632]);
initD_SCENV_NOOT(s[1633]);
initD_SCENV_CANC(s[1634]);
initD_SCOPECL30(s[1635]);
initD_SCOPECL200(s[1636]);
initD_SCWEMWBA(s[1637]);
initD_SCWEMWBB(s[1638]);
initD_SCWEMWBC(s[1639]);
initD_SCWEMWBD(s[1640]);
initD_SCWEMWBE(s[1641]);
initD_SCWEMWBF(s[1642]);
initD_SCWEMWBG(s[1643]);
initD_WHORUPRO(s[1644]);
initD_WHORUEDU(s[1645]);
initD_WHORURAC(s[1646]);
initD_WHORUPOL(s[1647]);
initD_WHORUFAM(s[1648]);
initD_WHORUSEX(s[1649]);
initD_WHORUAGE(s[1650]);
initD_YPNPAL(s[1651]);
initD_YPSOCWEB(s[1652]);
initD_YPNETCHT(s[1653]);
initD_EATLIVU(s[1654]);
initD_FAMSUP(s[1655]);
initD_UPSET(s[1656]);
initD_LATE(s[1657]);
initD_YPESTA(s[1658]);
initD_YPESTI(s[1659]);
initD_YPESTB(s[1660]);
initD_YPESTJ(s[1661]);
initD_YPESTC(s[1662]);
initD_YPESTK(s[1663]);
initD_YPESTE(s[1664]);
initD_YPESTF(s[1665]);
initD_YAJBSRV1(s[1666]);
initD_YAJBSRV2(s[1667]);
initD_YAJBSRV3(s[1668]);
initD_YAJBSRV4(s[1669]);
initD_YAJBSRV5(s[1670]);
initD_YAJBSRV8(s[1671]);
initD_YAJBSRV7(s[1672]);
initD_YAJBSRV96(s[1673]);
initD_EVRSMO(s[1674]);
initD_SMOFRQ(s[1675]);
initD_EVRALC(s[1676]);
initD_DKLM(s[1677]);
initD_FIVEALCDR(s[1678]);
initD_DRNK4W(s[1679]);
initD_DRGSOL(s[1680]);
initD_DRGMJ(s[1681]);
initD_DRGOTH(s[1682]);
initD_FRDRG(s[1683]);
initD_NCRR1(s[1684]);
initD_NCRRM(s[1685]);
initD_NCRRY4(s[1686]);
initD_NCRR3(s[1687]);
initD_NCRR4(s[1688]);
initD_NCRR5(s[1689]);
initD_NCRR6(s[1690]);
initD_NCRR8(s[1691]);
initD_NCRR9(s[1692]);
initD_NCRR11(s[1693]);
initD_NCRR12(s[1694]);
initD_CASIEND(s[1695]);
initD_SCHOOLCNTRY1(s[1696]);
initD_SCHOOLCNTRY2(s[1697]);
initD_SCHOOLCNTRY3(s[1698]);
initD_SCHOOLCNTRY4(s[1699]);
initD_SCHOOLCNTRY5(s[1700]);
initD_EDLINK(s[1701]);
initD_EDLINKCONF(s[1702]);
initD_EDLINKCONFB(s[1703]);
initD_EDLINKKIDE(s[1704]);
initD_EDLINKKIDSWN(s[1705]);
initD_EDUCSN(s[1706]);
initD_EDUCLINKB1(s[1707]);
initD_EDUCLINKB2(s[1708]);
initD_EDUCLINKB3(s[1709]);
initD_SIGNEDUCKIDS1(s[1710]);
initD_SIGNEDUCKIDS2(s[1711]);
initD_BENLINK(s[1712]);
initD_HLTHLINK(s[1713]);
initD_HLTHKIDLINK(s[1714]);
initD_HEALTHSN(s[1715]);
initD_HLTHLINKB1(s[1716]);
initD_HLTHLINKB2(s[1717]);
initD_HLTHLINKB3(s[1718]);
initD_FLAGLINKB1(s[1719]);
initD_FLAGLINKB2(s[1720]);
initD_FLAGLINKB3(s[1721]);
initD_INTSIGNHEALTH(s[1722]);
initD_SIGNHEALTHKI1(s[1723]);
initD_SIGNHEALTHKI2(s[1724]);
initD_LENINDINTV(s[1725]);
initD_BRLOOP(s[1726]);
initD_EDUCRECD(s[1727]);
initD_EDUCRSGN(s[1728]);
initD_EDUCISGN(s[1729]);
initD_HLTHRECD(s[1730]);
initD_HLTHRSGN(s[1731]);
initD_HLTHISGN(s[1732]);
initD_HEDNTO_CODE(s[1733]);
initD_YAFUTA(s[1734]);
initD_YAFUTB(s[1735]);
initD_SCRX_CODE(s[1736]);
initD_SCUX_CODE(s[1737]);
initD_MARSTAT(s[1738]);
initD_LIVESP(s[1739]);
initD_LIVEWITH(s[1740]);
initD_EMPLOY(s[1741]);
initD_LINGUA(s[1742]);
initD_PS1(s[1743]);
initD_PS2(s[1744]);
initD_PS3(s[1745]);
initD_PS4(s[1746]);
initD_PS5(s[1747]);
initD_PS6(s[1748]);
initD_PS7(s[1749]);
initD_PS8(s[1750]);
initD_PS9(s[1751]);
initD_PS10(s[1752]);
initD_PS11(s[1753]);
initD_PS12(s[1754]);
initD_PS13(s[1755]);
initD_PS14(s[1756]);
initD_PS15(s[1757]);
initD_PS16(s[1758]);
initD_PS17(s[1759]);
initD_PS18(s[1760]);
initD_PS19(s[1761]);
initD_PS20(s[1762]);
initD_PS21(s[1763]);
initD_PS22(s[1764]);
initD_PS23(s[1765]);
initD_PS24(s[1766]);
initD_PS25(s[1767]);
initD_PS26(s[1768]);
initD_PS27(s[1769]);
initD_PS28(s[1770]);
initD_PS29(s[1771]);
initD_PS30(s[1772]);
initD_PS31(s[1773]);
initD_PS32(s[1774]);
initD_PSNUMCH(s[1775]);
initD_DONEPROXY(s[1776]);
initD_PREL(s[1777]);
initD_PREASON(s[1778]);
initD_PRIPN(s[1779]);
initD_PJULK4WK(s[1780]);
initD_PJBPTFT(s[1781]);
initD_PJSPTFT(s[1782]);
initD_PREARN(s[1783]);
initD_PREARNW(s[1784]);
initD_PREARNA(s[1785]);
initD_PBNFT1(s[1786]);
initD_PBNFT2(s[1787]);
initD_PBNFT13(s[1788]);
initD_PBNFT3(s[1789]);
initD_PBNFT4(s[1790]);
initD_PBNFT5(s[1791]);
initD_PBNFT6(s[1792]);
initD_PBNFT7(s[1793]);
initD_PBNFT8(s[1794]);
initD_PBNFT9(s[1795]);
initD_PBNFT10(s[1796]);
initD_PBNFT11(s[1797]);
initD_PBNFT12(s[1798]);
initD_PBNFT96(s[1799]);
initD_NETUSE(s[1800]);
initD_PRFITB(s[1801]);
initD_PRFITBW(s[1802]);
initD_PRFITBA(s[1803]);
initD_IVCOOP(s[1804]);
initD_SUSP(s[1805]);
initD_UNDQUS(s[1806]);
initD_IVPRSNT(s[1807]);
initD_IVINFNCE(s[1808]);
initD_IVAFFCT11(s[1809]);
initD_IVAFFCT12(s[1810]);
initD_IVAFFCT13(s[1811]);
initD_IVAFFCT14(s[1812]);
initD_IVAFFCT15(s[1813]);
initD_IVAFFCT17(s[1814]);
initD_IVAFFCT21(s[1815]);
initD_IVAFFCT22(s[1816]);
initD_IVAFFCT23(s[1817]);
initD_IVAFFCT27(s[1818]);
initD_IVAFFCT30(s[1819]);
initD_IVAFFCT97(s[1820]);
initD_IVLIENG(s[1821]);
initD_IVLITRANS(s[1822]);
initD_IVLIWHO(s[1823]);
initD_IVLIBAL(s[1824]);
initD_HGBIOM(s[1825]);
initD_HGBIOF(s[1826]);
initD_RESPM16(s[1827]);
initD_RESPF16(s[1828]);
initD_HGADOPTM(s[1829]);
initD_HGADOPTF(s[1830]);
initD_HGPART(s[1831]);
initD_INTCONTACT(s[1832]);
initD_DETINC1(s[1833]);
initD_DETINC2(s[1834]);
initD_DETINC3(s[1835]);
initD_DETINC4(s[1836]);
initD_DETINC5(s[1837]);
initD_DETINC6(s[1838]);
initD_HASEMAIL(s[1839]);
initD_SOCCONT(s[1840]);
initD_OTHCONT(s[1841]);
initD_REMAIL_CODE(s[1842]);
initD_RHLAND_CODE(s[1843]);
initD_RPHMOB_CODE(s[1844]);
initD_RPHWRK_CODE(s[1845]);
initD_RCOTHERD_CODE(s[1846]);
initD_CTCONS(s[1847]);
initD_CTCONSCONF1(s[1848]);
initD_CTCONSCONF2(s[1849]);
initD_CTCONSCONF3(s[1850]);
initD_CTCONSCONF4(s[1851]);
initD_CTCONSCONF5(s[1852]);
initD_CTCONSCONF6(s[1853]);
initD_CTCONSCONF7(s[1854]);
initD_CTCONSCONF8(s[1855]);
initD_CTCONSCONF94(s[1856]);
initD_CTREL(s[1857]);
initD_CTTEL1_CODE(s[1858]);
initD_CTTEL2_CODE(s[1859]);
initD_CTADD1_CODE(s[1860]);
initD_CTADD2_CODE(s[1861]);
initD_CTEMAIL_CODE(s[1862]);
initD_CTTOWN_CODE(s[1863]);
initD_CTCNTY_CODE(s[1864]);
initD_CTPCODE_CODE(s[1865]);
initD_ORIGADD(s[1866]);
initD_INDMODE(s[1867]);
initD_PPSEX(s[1868]);
initD_FNPID(s[1869]);
initD_MNPID(s[1870]);
initD_PN1PID(s[1871]);
initD_PN1PNO(s[1872]);
initD_PN1SEX(s[1873]);
initD_PN2PID(s[1874]);
initD_PN2PNO(s[1875]);
initD_PN2SEX(s[1876]);
initD_PNS1PID(s[1877]);
initD_PNS1PNO(s[1878]);
initD_PNS1SEX(s[1879]);
initD_PNS2PID(s[1880]);
initD_PNS2PNO(s[1881]);
initD_PNS2SEX(s[1882]);
initD_GRFPID(s[1883]);
initD_GRMPID(s[1884]);
initD_ISTRTDATHH(s[1885]);
initD_ISTRTDATMM(s[1886]);
initD_ISTRTDATSS(s[1887]);
initD_IENDDATHH(s[1888]);
initD_IENDDATMM(s[1889]);
initD_IENDDATSS(s[1890]);
initD_J2PAY_IF(s[1891]);
initD_FIMNGRS_TC(s[1892]);
initD_FIMNGRS_DV(s[1893]);
initD_FIMNLABGRS_TC(s[1894]);
initD_FIMNLABGRS_DV(s[1895]);
initD_FIMNLABNET_TC(s[1896]);
initD_FIMNLABNET_DV(s[1897]);
initD_FIYRINVINC_TC(s[1898]);
initD_FIYRINVINC_DV(s[1899]);
initD_FIBENOTHR_TC(s[1900]);
initD_FIBENOTHR_DV(s[1901]);
initD_PAYGL(s[1902]);
initD_PAYNL(s[1903]);
initD_JSPRF(s[1904]);
initD_PAYGU_DV(s[1905]);
initD_PAYG_DV(s[1906]);
initD_PAYNU_DV(s[1907]);
initD_PAYN_DV(s[1908]);
initD_SEEARNGRS_DV(s[1909]);
initD_SEEARNNET_DV(s[1910]);
initD_J2PAY_DV(s[1911]);
initD_J2PAYNET_DV(s[1912]);
initD_FF_EVERINT(s[1913]);
initD_FF_JBSTAT(s[1914]);
initD_FF_EMPLW(s[1915]);
initD_FF_IVLOLW(s[1916]);
initD_FF_TEL(s[1917]);
initD_FF_JBSEMP(s[1918]);
initD_FF_JBMNGR(s[1919]);
initD_FF_JBSIZE(s[1920]);
initD_FF_OPRLG(s[1921]);
initD_FF_OPRLG0(s[1922]);
initD_FF_OPRLG0NI(s[1923]);
initD_FF_UKBORN(s[1924]);
initD_FF_YR2UK4(s[1925]);
initD_FF_BENTYPE01(s[1926]);
initD_FF_BENTYPE02(s[1927]);
initD_FF_BENTYPE03(s[1928]);
initD_FF_BENTYPE04(s[1929]);
initD_FF_BENTYPE05(s[1930]);
initD_FF_BENTYPE06(s[1931]);
initD_FF_BENTYPE07(s[1932]);
initD_FF_BENTYPE08(s[1933]);
initD_FF_BENTYPE09(s[1934]);
initD_FF_BENTYPE10(s[1935]);
initD_FF_BENTYPE11(s[1936]);
initD_FF_BENTYPE12(s[1937]);
initD_FF_BENTYPE13(s[1938]);
initD_FF_BENTYPE14(s[1939]);
initD_FF_BENTYPE15(s[1940]);
initD_FF_BENTYPE16(s[1941]);
initD_FF_BENTYPE17(s[1942]);
initD_FF_BENTYPE18(s[1943]);
initD_FF_BENTYPE19(s[1944]);
initD_FF_BENTYPE20(s[1945]);
initD_FF_BENTYPE21(s[1946]);
initD_FF_BENTYPE22(s[1947]);
initD_FF_BENTYPE23(s[1948]);
initD_FF_BENTYPE24(s[1949]);
initD_FF_BENTYPE25(s[1950]);
initD_FF_BENTYPE26(s[1951]);
initD_FF_BENTYPE27(s[1952]);
initD_FF_BENTYPE28(s[1953]);
initD_FF_BENTYPE29(s[1954]);
initD_FF_BENTYPE30(s[1955]);
initD_FF_BENTYPE31(s[1956]);
initD_FF_BENTYPE32(s[1957]);
initD_FF_BENTYPE33(s[1958]);
initD_FF_BENTYPE34(s[1959]);
initD_FF_BENTYPE35(s[1960]);
initD_FF_BENTYPE36(s[1961]);
initD_FF_BENTYPE37(s[1962]);
initD_FF_BENTYPE38(s[1963]);
initD_FF_BENTYPE39(s[1964]);
initD_FF_IVINTLANG(s[1965]);
initD_SEX_DV(s[1966]);
initD_AGE_DV(s[1967]);
initD_INTDATD_DV(s[1968]);
initD_INTDATM_DV(s[1969]);
initD_INTDATY_DV(s[1970]);
initD_DOBY_DV(s[1971]);
initD_PENSIONER_DV(s[1972]);
initD_NPN_DV(s[1973]);
initD_NPNS_DV(s[1974]);
initD_NGRP_DV(s[1975]);
initD_NNSIB_DV(s[1976]);
initD_NNSSIB_DV(s[1977]);
initD_NPENSIONER_DV(s[1978]);
initD_JBSOCGR_DV(s[1979]);
initD_ETHN_DV(s[1980]);
initD_FIMNMISC_DV(s[1981]);
initD_FIMNPRBEN_DV(s[1982]);
initD_FIMNINVNET_DV(s[1983]);
initD_FIMNPEN_DV(s[1984]);
initD_FIMNSBEN_DV(s[1985]);
initD_FIMNNET_DV(s[1986]);
initD_COUNTRY(s[1987]);
initD_GOR_DV(s[1988]);
initD_URBAN_DV(s[1989]);
initD_HHRESP_DV(s[1990]);
initD_XTRA5MIN_DV(s[1991]);
initD_XTRA5MINOSM_DV(s[1992]);
initD_AGEGR5_DV(s[1993]);
initD_AGEGR10_DV(s[1994]);
initD_AGEGR13_DV(s[1995]);
initD_LIVESP_DV(s[1996]);
initD_COHAB_DV(s[1997]);
initD_SINGLE_DV(s[1998]);
initD_MASTAT_DV(s[1999]);
initD_HHTYPE_DV(s[2000]);
initD_BUNO_DV(s[2001]);
initD_DEPCHL_DV(s[2002]);
initD_NCHILD_DV(s[2003]);
initD_NDEPCHL_DV(s[2004]);
initD_RESPM16_DV(s[2005]);
initD_RESPF16_DV(s[2006]);
initD_RACH16_DV(s[2007]);
initD_HRPID(s[2008]);
initD_HRPNO(s[2009]);
initD_PPID(s[2010]);
initD_PPNO(s[2011]);
initD_SPPID(s[2012]);
initD_SPPNO(s[2013]);
initD_FNPNO(s[2014]);
initD_FNSPID(s[2015]);
initD_FNSPNO(s[2016]);
initD_MNPNO(s[2017]);
initD_MNSPID(s[2018]);
initD_MNSPNO(s[2019]);
initD_GRFPNO(s[2020]);
initD_GRMPNO(s[2021]);
initD_QFHIGH_DV(s[2022]);
initD_NQFHIGH_DV(s[2023]);
initD_QFHIGHFL_DV(s[2024]);
initD_HIQUAL_DV(s[2025]);
initD_NHIQUAL_DV(s[2026]);
initD_NNMPSP_DV(s[2027]);
initD_NMPSP_DV(s[2028]);
initD_NUNMPSP_DV(s[2029]);
initD_JBFT_DV(s[2030]);
initD_JBSOC00_CC(s[2031]);
initD_JBSOC10_CC(s[2032]);
initD_JBSIC07_CC(s[2033]);
initD_JBIINDB_DV(s[2034]);
initD_JBES2000(s[2035]);
initD_JBSEG_DV(s[2036]);
initD_JBRGSC_DV(s[2037]);
initD_JBNSSEC_DV(s[2038]);
initD_JBNSSEC8_DV(s[2039]);
initD_JBNSSEC5_DV(s[2040]);
initD_JBNSSEC3_DV(s[2041]);
initD_JBISCO88_CC(s[2042]);
initD_JLSOC00_CC(s[2043]);
initD_JLSOC10_CC(s[2044]);
initD_JLSIC07_CC(s[2045]);
initD_JLIINDB_DV(s[2046]);
initD_JLES2000(s[2047]);
initD_JLSEG_DV(s[2048]);
initD_JLRGSC_DV(s[2049]);
initD_JLNSSEC_DV(s[2050]);
initD_JLNSSEC8_DV(s[2051]);
initD_JLNSSEC5_DV(s[2052]);
initD_JLNSSEC3_DV(s[2053]);
initD_JLISCO88_CC(s[2054]);
initD_PASOC90_CC(s[2055]);
initD_PASOC00_CC(s[2056]);
initD_PASOC10_CC(s[2057]);
initD_PANSSEC5_DV(s[2058]);
initD_MASOC90_CC(s[2059]);
initD_MASOC00_CC(s[2060]);
initD_MASOC10_CC(s[2061]);
initD_MANSSEC5_DV(s[2062]);
initD_J1SOC90_CC(s[2063]);
initD_J1SOC00_CC(s[2064]);
initD_J1SOC10_CC(s[2065]);
initD_J1NSSEC5_DV(s[2066]);
initD_J2SOC90_CC(s[2067]);
initD_J2SOC00_CC(s[2068]);
initD_J2SOC10_CC(s[2069]);
initD_J2NSSEC5_DV(s[2070]);
initD_YASOC90_CC(s[2071]);
initD_YASOC00_CC(s[2072]);
initD_YASOC10_CC(s[2073]);
initD_YANSSEC5_DV(s[2074]);
initD_SCGHQ1_DV(s[2075]);
initD_SCGHQ2_DV(s[2076]);
initD_SF12PCS_DV(s[2077]);
initD_SF12MCS_DV(s[2078]);
initD_SWEMWBS_DV(s[2079]);
initD_JWBS1_DV(s[2080]);
initD_JWBS2_DV(s[2081]);
initD_PSDQA_DV(s[2082]);
initD_PSDQB_DV(s[2083]);
initD_PSDQC_DV(s[2084]);
initD_SCFLAG_DV(s[2085]);
initD_PAYU_DV(s[2086]);
initD_PAYGU_IF(s[2087]);
initD_PAYNU_IF(s[2088]);
initD_SEEARNGRS_IF(s[2089]);
initD_FIYRINVINC_IF(s[2090]);
initD_FIBENOTHR_IF(s[2091]);
initD_FIMNLABGRS_IF(s[2092]);
initD_FIMNGRS_IF(s[2093]);
initD_INDIN91_LW(s[2094]);
initD_INDIN01_LW(s[2095]);
initD_INDPXUS_LW(s[2096]);
initD_INDINUS_LW(s[2097]);
initD_INDSCUS_LW(s[2098]);
initD_IND5MUS_LW(s[2099]);
initD_INDPXUB_LW(s[2100]);
initD_INDINUB_LW(s[2101]);
initD_INDSCUB_LW(s[2102]);
initD_INDNS91_LW(s[2103]);
initD_INDBD91_LW(s[2104]);
initD_INDNSUB_LW(s[2105]);
initD_INDBDUB_LW(s[2106]);
initD_INDPXUB_XW(s[2107]);
initD_INDINUB_XW(s[2108]);
initD_INDSCUB_XW(s[2109]);
initD_IND5MUS_XW(s[2110]);
initD_RACEL_DV(s[2111]);
}
}
